#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è endpoint /api/vacancies/upload-csv
"""

import requests
import json
import os
import tempfile

def test_successful_upload():
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ CSV"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É CSV...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π CSV —Ñ–∞–π–ª
    test_csv_content = """–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏,–û–±—ä–µ–∫—Ç,–û–ø–ª–∞—Ç–∞,–£—Å–ª–æ–≤–∏—è,–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è,–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å,–ú–µ–Ω–µ–¥–∂–µ—Ä,–Æ—Ä.–ª–∏—Ü–æ,–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
–î–æ–ª–∂–Ω–æ—Å—Ç—å:,–û–±—ä–µ–∫—Ç,–û–ø–ª–∞—Ç–∞,–£—Å–ª–æ–≤–∏—è,–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è,–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å,–ú–µ–Ω–µ–¥–∂–µ—Ä,–Æ—Ä.–ª–∏—Ü–æ,–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
,–°–±–æ—Ä—â–∏–∫ –Ω–∞ –∫–æ–Ω–≤–µ–π–µ—Ä–µ,–õ–ì –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫—Å,320 —Ä—É–±/—á–∞—Å,—Å–º–µ–Ω–∞ - 11 —á–∞—Å–æ–≤,–û—Ç 18 –¥–æ 45 –ª–µ—Ç,15 –º—É–∂.,–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –¢—Ä–µ–Ω–∏–Ω,–û–û–û –§–æ—Ä—Ç—Ä–µ–Ω–¥,–°–±–æ—Ä–∫–∞ –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏
,–†–∞–±–æ—Ç–Ω–∏–∫ —Å–∫–ª–∞–¥–∞,–î–∂–∞–º–∏–ª—å–ö–æ,370 —Ä—É–±/—á–∞—Å,—Å–º–µ–Ω–∞ - 11 —á–∞—Å–æ–≤,–†–§/–†–ë,0,–í–∏–∫—Ç–æ—Ä –ì–æ—Ä—è–∏–Ω–æ–≤,–û–û–û –§–æ—Ä—Ç—Ä–µ–Ω–¥,–ë—Ä–µ–Ω–¥–æ–≤–∞—è –æ–¥–µ–∂–¥–∞"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False, encoding='utf-8') as f:
        f.write(test_csv_content)
        temp_file = f.name
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        with open(temp_file, 'rb') as f:
            files = {"file": ("test_vacancies.csv", f, "text/csv")}
            
            response = requests.post(
                "http://localhost:5000/api/vacancies/upload-csv",
                files=files
            )
        
        print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.text[:500]}")
        
        assert response.status_code == 200, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 200, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
        
        data = response.json()
        assert data.get("success") == True, f"–û–∂–∏–¥–∞–ª—Å—è success=True, –ø–æ–ª—É—á–µ–Ω {data.get('success')}"
        assert "vacancies" in data, "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'vacancies'"
        assert "count" in data, "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'count'"
        
        vacancies = data.get("vacancies", [])
        assert len(vacancies) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω—ã –≤–∞–∫–∞–Ω—Å–∏–∏"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
        first_vacancy = vacancies[0]
        required_fields = ['position', 'salary', 'conditions', 'requirements', 'manager', 'company']
        for field in required_fields:
            assert field in first_vacancy, f"–ü–æ–ª–µ '{field}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –≤–∞–∫–∞–Ω—Å–∏–∏"
        
        print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CSV —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(temp_file):
            os.unlink(temp_file)

def test_no_file_error():
    """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ '—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É '—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'...")
    
    try:
        response = requests.post("http://localhost:5000/api/vacancies/upload-csv")
        
        assert response.status_code == 400, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 400, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
        
        data = response.json()
        assert data.get("success") == False, "–û–∂–∏–¥–∞–ª—Å—è success=False"
        assert "error" in data, "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'error'"
        assert "—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" in data.get("error", ""), "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å '—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'"
        
        print("‚úÖ –û—à–∏–±–∫–∞ '—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

def test_wrong_format_error():
    """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
    with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False, encoding='utf-8') as f:
        f.write("–≠—Ç–æ –Ω–µ CSV —Ñ–∞–π–ª")
        temp_file = f.name
    
    try:
        with open(temp_file, 'rb') as f:
            files = {"file": ("test.txt", f, "text/plain")}
            
            response = requests.post(
                "http://localhost:5000/api/vacancies/upload-csv",
                files=files
            )
        
        assert response.status_code == 400, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å 400, –ø–æ–ª—É—á–µ–Ω {response.status_code}"
        
        data = response.json()
        assert data.get("success") == False, "–û–∂–∏–¥–∞–ª—Å—è success=False"
        assert "CSV" in data.get("error", ""), "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'CSV'"
        
        print("‚úÖ –û—à–∏–±–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False
    finally:
        if os.path.exists(temp_file):
            os.unlink(temp_file)

def test_empty_file_error():
    """–¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π CSV —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False, encoding='utf-8') as f:
        f.write("")
        temp_file = f.name
    
    try:
        with open(temp_file, 'rb') as f:
            files = {"file": ("empty.csv", f, "text/csv")}
            
            response = requests.post(
                "http://localhost:5000/api/vacancies/upload-csv",
                files=files
            )
        
        # –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å 200 —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –∏–ª–∏ 400 —Å –æ—à–∏–±–∫–æ–π
        assert response.status_code in [200, 400], f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}"
        
        data = response.json()
        if response.status_code == 200:
            assert data.get("success") == True, "–ü—É—Å—Ç–æ–π —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å success=True"
            assert data.get("count", 0) == 0, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0"
        else:
            assert data.get("success") == False, "–û–∂–∏–¥–∞–ª—Å—è success=False"
        
        print("‚úÖ –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False
    finally:
        if os.path.exists(temp_file):
            os.unlink(temp_file)

def test_server_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...")
    
    try:
        response = requests.get("http://localhost:5000/", timeout=5)
        print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
        return True
    except requests.exceptions.ConnectionError:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: python app.py")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è /api/vacancies/upload-csv...")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
    if not test_server_connection():
        print("\n‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã - —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False
    
    try:
        test_successful_upload()
        test_no_file_error()
        test_wrong_format_error()
        test_empty_file_error()
        
        print("\nüéâ –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = run_all_tests()
    exit(0 if success else 1)
