#!/usr/bin/env python3
"""
–Æ–Ω–∏—Ç-—Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ parse_vacancies_direct
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from routes.vacancies import parse_vacancies_direct
import json

def test_correct_column_indices():
    """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–æ–≤ –∫–æ–ª–æ–Ω–æ–∫"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–æ–≤ –∫–æ–ª–æ–Ω–æ–∫...")
    
    test_csv = """–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏,–û–±—ä–µ–∫—Ç,–û–ø–ª–∞—Ç–∞,–£—Å–ª–æ–≤–∏—è,–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è,–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å,–ú–µ–Ω–µ–¥–∂–µ—Ä,–Æ—Ä.–ª–∏—Ü–æ,–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
–î–æ–ª–∂–Ω–æ—Å—Ç—å:,–û–±—ä–µ–∫—Ç,–û–ø–ª–∞—Ç–∞,–£—Å–ª–æ–≤–∏—è,–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è,–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å,–ú–µ–Ω–µ–¥–∂–µ—Ä,–Æ—Ä.–ª–∏—Ü–æ,–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
,–°–±–æ—Ä—â–∏–∫ –Ω–∞ –∫–æ–Ω–≤–µ–π–µ—Ä–µ,320 —Ä—É–±/—á–∞—Å,—Å–º–µ–Ω–∞ - 11 —á–∞—Å–æ–≤,–û—Ç 18 –¥–æ 45 –ª–µ—Ç,15 –º—É–∂.,–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –¢—Ä–µ–Ω–∏–Ω,–û–û–û –§–æ—Ä—Ç—Ä–µ–Ω–¥,–°–±–æ—Ä–∫–∞ –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏"""
    
    result = parse_vacancies_direct(test_csv)
    
    assert len(result) == 1, f"–û–∂–∏–¥–∞–ª–æ—Å—å 1 –≤–∞–∫–∞–Ω—Å–∏—è, –ø–æ–ª—É—á–µ–Ω–æ {len(result)}"
    
    vacancy = result[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–æ–≤
    assert vacancy['position'] == '–°–±–æ—Ä—â–∏–∫ –Ω–∞ –∫–æ–Ω–≤–µ–π–µ—Ä–µ', f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {vacancy['position']}"
    assert vacancy['salary'] == '320 —Ä—É–±/—á–∞—Å', f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {vacancy['salary']}"
    assert vacancy['conditions'] == '—Å–º–µ–Ω–∞ - 11 —á–∞—Å–æ–≤', f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {vacancy['conditions']}"
    assert vacancy['requirements'] == '–û—Ç 18 –¥–æ 45 –ª–µ—Ç', f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: {vacancy['requirements']}"
    assert vacancy['positions_needed'] == '15 –º—É–∂.', f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å: {vacancy['positions_needed']}"
    assert vacancy['manager'] == '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –¢—Ä–µ–Ω–∏–Ω', f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä: {vacancy['manager']}"
    assert vacancy['company'] == '–û–û–û –§–æ—Ä—Ç—Ä–µ–Ω–¥', f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è: {vacancy['company']}"
    assert vacancy['benefits'] == '–°–±–æ—Ä–∫–∞ –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏', f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: {vacancy['benefits']}"
    
    print("‚úÖ –ò–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ!")

def test_header_skipping():
    """–¢–µ—Å—Ç –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–ø—É—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤...")
    
    test_csv = """–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏,–û–±—ä–µ–∫—Ç,–û–ø–ª–∞—Ç–∞,–£—Å–ª–æ–≤–∏—è,–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è,–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å,–ú–µ–Ω–µ–¥–∂–µ—Ä,–Æ—Ä.–ª–∏—Ü–æ,–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
–î–æ–ª–∂–Ω–æ—Å—Ç—å:,–û–±—ä–µ–∫—Ç,–û–ø–ª–∞—Ç–∞,–£—Å–ª–æ–≤–∏—è,–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è,–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å,–ú–µ–Ω–µ–¥–∂–µ—Ä,–Æ—Ä.–ª–∏—Ü–æ,–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
,–°–±–æ—Ä—â–∏–∫ –Ω–∞ –∫–æ–Ω–≤–µ–π–µ—Ä–µ,320 —Ä—É–±/—á–∞—Å,—Å–º–µ–Ω–∞ - 11 —á–∞—Å–æ–≤,–û—Ç 18 –¥–æ 45 –ª–µ—Ç,15 –º—É–∂.,–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –¢—Ä–µ–Ω–∏–Ω,–û–û–û –§–æ—Ä—Ç—Ä–µ–Ω–¥,–°–±–æ—Ä–∫–∞ –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏
,–†–∞–±–æ—Ç–Ω–∏–∫ —Å–∫–ª–∞–¥–∞,370 —Ä—É–±/—á–∞—Å,—Å–º–µ–Ω–∞ - 11 —á–∞—Å–æ–≤,–†–§/–†–ë,0,–í–∏–∫—Ç–æ—Ä –ì–æ—Ä—è–∏–Ω–æ–≤,–û–û–û –§–æ—Ä—Ç—Ä–µ–Ω–¥,–ë—Ä–µ–Ω–¥–æ–≤–∞—è –æ–¥–µ–∂–¥–∞"""
    
    result = parse_vacancies_direct(test_csv)
    
    assert len(result) == 2, f"–û–∂–∏–¥–∞–ª–æ—Å—å 2 –≤–∞–∫–∞–Ω—Å–∏–∏, –ø–æ–ª—É—á–µ–Ω–æ {len(result)}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    positions = [v['position'] for v in result]
    assert '–û–±—ä–µ–∫—Ç' not in positions, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–ø–∞–ª –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
    assert '–î–æ–ª–∂–Ω–æ—Å—Ç—å:' not in positions, "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–ø–∞–ª –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
    
    print("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è!")

def test_empty_fields():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π...")
    
    test_csv = """–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏,–û–±—ä–µ–∫—Ç,–û–ø–ª–∞—Ç–∞,–£—Å–ª–æ–≤–∏—è,–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è,–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å,–ú–µ–Ω–µ–¥–∂–µ—Ä,–Æ—Ä.–ª–∏—Ü–æ,–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
–î–æ–ª–∂–Ω–æ—Å—Ç—å:,–û–±—ä–µ–∫—Ç,–û–ø–ª–∞—Ç–∞,–£—Å–ª–æ–≤–∏—è,–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è,–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å,–ú–µ–Ω–µ–¥–∂–µ—Ä,–Æ—Ä.–ª–∏—Ü–æ,–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
,–í–æ–¥–∏—Ç–µ–ª—å,,—Å–º–µ–Ω–∞ - 12 —á–∞—Å–æ–≤,–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∞,5 —á–µ–ª.,–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞,,"""
    
    result = parse_vacancies_direct(test_csv)
    
    assert len(result) == 1, f"–û–∂–∏–¥–∞–ª–æ—Å—å 1 –≤–∞–∫–∞–Ω—Å–∏—è, –ø–æ–ª—É—á–µ–Ω–æ {len(result)}"
    
    vacancy = result[0]
    assert vacancy['position'] == '–í–æ–¥–∏—Ç–µ–ª—å'
    assert vacancy['salary'] == '', "–ü—É—Å—Ç–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π"
    assert vacancy['benefits'] == '', "–ü—É—Å—Ç—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π"
    
    print("‚úÖ –ü—É—Å—Ç—ã–µ –ø–æ–ª—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")

def test_unicode_and_special_chars():
    """–¢–µ—Å—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –∏ unicode"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ unicode...")
    
    test_csv = """–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏,–û–±—ä–µ–∫—Ç,–û–ø–ª–∞—Ç–∞,–£—Å–ª–æ–≤–∏—è,–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è,–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å,–ú–µ–Ω–µ–¥–∂–µ—Ä,–Æ—Ä.–ª–∏—Ü–æ,–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
–î–æ–ª–∂–Ω–æ—Å—Ç—å:,–û–±—ä–µ–∫—Ç,–û–ø–ª–∞—Ç–∞,–£—Å–ª–æ–≤–∏—è,–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è,–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å,–ú–µ–Ω–µ–¥–∂–µ—Ä,–Æ—Ä.–ª–∏—Ü–æ,–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
,–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º,50000 —Ä—É–±/–º–µ—Å,–æ—Ñ–∏—Å,–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ,3 —á–µ–ª.,–°–µ—Ä–≥–µ–π –ò–≤–∞–Ω–æ–≤,–û–û–û –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏,–ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç & —Ä–∞–∑–≤–∏—Ç–∏–µ"""
    
    result = parse_vacancies_direct(test_csv)
    
    assert len(result) == 1, f"–û–∂–∏–¥–∞–ª–æ—Å—å 1 –≤–∞–∫–∞–Ω—Å–∏—è, –ø–æ–ª—É—á–µ–Ω–æ {len(result)}"
    
    vacancy = result[0]
    assert '&' in vacancy['benefits'], "–°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è"
    assert '–û–û–û –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' in vacancy['company'], "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è"
    
    print("‚úÖ –°–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ unicode –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")

def test_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")
    
    # –¢–µ—Å—Ç —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    test_csv_bad = """–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏,–û–±—ä–µ–∫—Ç,–û–ø–ª–∞—Ç–∞,–£—Å–ª–æ–≤–∏—è,–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è,–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å,–ú–µ–Ω–µ–¥–∂–µ—Ä,–Æ—Ä.–ª–∏—Ü–æ,–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
–î–æ–ª–∂–Ω–æ—Å—Ç—å:,–û–±—ä–µ–∫—Ç,–û–ø–ª–∞—Ç–∞,–£—Å–ª–æ–≤–∏—è,–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è,–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å,–ú–µ–Ω–µ–¥–∂–µ—Ä,–Æ—Ä.–ª–∏—Ü–æ,–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
,–ê,–Ω–µ—Ç_—á–∏—Å–µ–ª,—Å–º–µ–Ω–∞ - 11 —á–∞—Å–æ–≤,–û—Ç 18 –¥–æ 45 –ª–µ—Ç,–Ω–µ—Ç_—á–∏—Å–µ–ª,–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –¢—Ä–µ–Ω–∏–Ω,–û–û–û –§–æ—Ä—Ç—Ä–µ–Ω–¥,–°–±–æ—Ä–∫–∞ –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏"""
    
    result_bad = parse_vacancies_direct(test_csv_bad)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    assert len(result_bad) == 0, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã, –ø–æ–ª—É—á–µ–Ω–æ {len(result_bad)}"
    
    # –¢–µ—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    test_csv_good = """–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏,–û–±—ä–µ–∫—Ç,–û–ø–ª–∞—Ç–∞,–£—Å–ª–æ–≤–∏—è,–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è,–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å,–ú–µ–Ω–µ–¥–∂–µ—Ä,–Æ—Ä.–ª–∏—Ü–æ,–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
–î–æ–ª–∂–Ω–æ—Å—Ç—å:,–û–±—ä–µ–∫—Ç,–û–ø–ª–∞—Ç–∞,–£—Å–ª–æ–≤–∏—è,–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è,–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å,–ú–µ–Ω–µ–¥–∂–µ—Ä,–Æ—Ä.–ª–∏—Ü–æ,–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
,–°–±–æ—Ä—â–∏–∫ –Ω–∞ –∫–æ–Ω–≤–µ–π–µ—Ä–µ,320 —Ä—É–±/—á–∞—Å,—Å–º–µ–Ω–∞ - 11 —á–∞—Å–æ–≤,–û—Ç 18 –¥–æ 45 –ª–µ—Ç,15 –º—É–∂.,–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –¢—Ä–µ–Ω–∏–Ω,–û–û–û –§–æ—Ä—Ç—Ä–µ–Ω–¥,–°–±–æ—Ä–∫–∞ –±—ã—Ç–æ–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏"""
    
    result_good = parse_vacancies_direct(test_csv_good)
    
    assert len(result_good) == 1, f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é, –ø–æ–ª—É—á–µ–Ω–æ {len(result_good)}"
    
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")

def test_large_file():
    """–¢–µ—Å—Ç –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª...")
    
    # –°–æ–∑–¥–∞–µ–º CSV —Å 20 –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
    header = "–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏,–û–±—ä–µ–∫—Ç,–û–ø–ª–∞—Ç–∞,–£—Å–ª–æ–≤–∏—è,–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è,–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å,–ú–µ–Ω–µ–¥–∂–µ—Ä,–Æ—Ä.–ª–∏—Ü–æ,–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞\n–î–æ–ª–∂–Ω–æ—Å—Ç—å:,–û–±—ä–µ–∫—Ç,–û–ø–ª–∞—Ç–∞,–£—Å–ª–æ–≤–∏—è,–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è,–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å,–ú–µ–Ω–µ–¥–∂–µ—Ä,–Æ—Ä.–ª–∏—Ü–æ,–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞\n"
    
    rows = []
    for i in range(20):
        row = f",–í–∞–∫–∞–Ω—Å–∏—è {i+1},{(i+1)*100} —Ä—É–±/—á–∞—Å,—Å–º–µ–Ω–∞ - 8 —á–∞—Å–æ–≤,–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã,{i+1} —á–µ–ª.,–ú–µ–Ω–µ–¥–∂–µ—Ä {i+1},–ö–æ–º–ø–∞–Ω–∏—è {i+1},–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ {i+1}\n"
        rows.append(row)
    
    test_csv = header + "".join(rows)
    
    result = parse_vacancies_direct(test_csv)
    
    assert len(result) == 20, f"–û–∂–∏–¥–∞–ª–æ—Å—å 20 –≤–∞–∫–∞–Ω—Å–∏–π, –ø–æ–ª—É—á–µ–Ω–æ {len(result)}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã
    positions = [v['position'] for v in result]
    assert len(set(positions)) == 20, "–ù–µ –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã"
    
    print("‚úÖ –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è parse_vacancies_direct...")
    
    try:
        test_correct_column_indices()
        test_header_skipping()
        test_empty_fields()
        test_unicode_and_special_chars()
        test_validation()
        test_large_file()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = run_all_tests()
    exit(0 if success else 1)
