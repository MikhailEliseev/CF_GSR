#!/usr/bin/env python3
"""
–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –¥–ª—è CSV –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∞–∫–∞–Ω—Å–∏–π
"""

import sys
import os
import time
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from routes.vacancies import parse_vacancies_direct

def stress_test_large_csv():
    """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º CSV —Ñ–∞–π–ª–æ–º"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º CSV —Ñ–∞–π–ª–æ–º...")
    
    # –ß–∏—Ç–∞–µ–º –±–æ–ª—å—à–æ–π CSV —Ñ–∞–π–ª
    csv_file = "/Users/mikhaileliseev/Desktop/–ö–ó GSR/test_data/stress_test_vacancies.csv"
    
    if not os.path.exists(csv_file):
        print(f"‚ùå –§–∞–π–ª {csv_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open(csv_file, "r", encoding="utf-8") as f:
        csv_data = f.read()
    
    print(f"üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(csv_data)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {csv_data.count(chr(10)) + 1}")
    
    # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    start_time = time.time()
    vacancies = parse_vacancies_direct(csv_data)
    end_time = time.time()
    
    parsing_time = end_time - start_time
    
    print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {parsing_time:.3f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(vacancies)}")
    print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {len(vacancies)/parsing_time:.1f} –≤–∞–∫–∞–Ω—Å–∏–π/—Å–µ–∫")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö:")
    
    valid_vacancies = 0
    issues_count = 0
    
    for i, vacancy in enumerate(vacancies):
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not vacancy.get('position', '').strip():
            issues.append("–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è")
        if not vacancy.get('salary', '').strip():
            issues.append("–ù–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã")
        if not vacancy.get('company', '').strip():
            issues.append("–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏")
        
        if not issues:
            valid_vacancies += 1
        else:
            issues_count += 1
            if issues_count <= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö
                print(f"  –í–∞–∫–∞–Ω—Å–∏—è {i+1}: {', '.join(issues)}")
    
    quality_percent = (valid_vacancies/len(vacancies)*100) if vacancies else 0
    print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: {valid_vacancies}/{len(vacancies)}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∫–∞—á–µ—Å—Ç–≤–∞: {quality_percent:.1f}%")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if parsing_time > 5.0:
        print(f"‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–Ω—è–ª {parsing_time:.1f} —Å–µ–∫—É–Ω–¥ - —ç—Ç–æ –º–µ–¥–ª–µ–Ω–Ω–æ")
        return False
    
    if quality_percent < 90:
        print(f"‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö {quality_percent:.1f}% - –Ω–∏–∂–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ")
        return False
    
    print(f"\nüéâ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞ {parsing_time:.3f} —Å–µ–∫—É–Ω–¥")
    print(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {quality_percent:.1f}%")
    print(f"‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å: {len(vacancies)/parsing_time:.1f} –≤–∞–∫–∞–Ω—Å–∏–π/—Å–µ–∫")
    
    return True

def test_memory_usage():
    """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏...")
    
    # –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º —Ñ–∞–π–ª
    csv_file = "/Users/mikhaileliseev/Desktop/–ö–ó GSR/test_data/stress_test_vacancies.csv"
    with open(csv_file, "r", encoding="utf-8") as f:
        csv_data = f.read()
    
    vacancies = parse_vacancies_direct(csv_data)
    
    # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    csv_size_mb = len(csv_data) / 1024 / 1024
    vacancies_count = len(vacancies)
    
    print(f"üìä –†–∞–∑–º–µ—Ä CSV —Ñ–∞–π–ª–∞: {csv_size_mb:.3f} MB")
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π: {vacancies_count}")
    print(f"üìä –†–∞–∑–º–µ—Ä –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {csv_size_mb/vacancies_count:.6f} MB")
    
    if csv_size_mb > 10:  # –ë–æ–ª—å—à–µ 10 MB
        print(f"‚ö†Ô∏è –ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {csv_size_mb:.1f} MB")
        return False
    
    print(f"‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –Ω–æ—Ä–º–µ")
    return True

def run_stress_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã CSV –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    print("="*60)
    
    try:
        # –¢–µ—Å—Ç 1: –ë–æ–ª—å—à–æ–π CSV —Ñ–∞–π–ª
        test1_success = stress_test_large_csv()
        
        # –¢–µ—Å—Ç 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        test2_success = test_memory_usage()
        
        print("\n" + "="*60)
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–¢–†–ï–°–°-–¢–ï–°–¢–û–í:")
        print(f"‚úÖ –ë–æ–ª—å—à–æ–π CSV —Ñ–∞–π–ª: {'–ü–†–û–ô–î–ï–ù' if test1_success else '–ü–†–û–í–ê–õ–ï–ù'}")
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {'–ü–†–û–ô–î–ï–ù' if test2_success else '–ü–†–û–í–ê–õ–ï–ù'}")
        
        if test1_success and test2_success:
            print("\nüéâ –í–°–ï –°–¢–†–ï–°–°-–¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            print("üìã –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –±–æ–ª—å—à–∏–º–∏ –æ–±—ä–µ–º–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö:")
            print("  ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤")
            print("  ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
            print("  ‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö")
            return True
        else:
            print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –°–¢–†–ï–°–°-–¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
            return False
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = run_stress_tests()
    exit(0 if success else 1)
