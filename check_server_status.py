#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
"""

import paramiko
import time

SERVER_HOST = "72.56.66.228"
SERVER_USER = "root"
SERVER_PASSWORD = "g2D,RytdQoSAYv"

def check_server():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞...")
    
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(SERVER_HOST, username=SERVER_USER, password=SERVER_PASSWORD)
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã...")
        stdin, stdout, stderr = ssh.exec_command("ps aux | grep python | grep -v grep")
        processes = stdout.read().decode()
        print("Python –ø—Ä–æ—Ü–µ—Å—Å—ã:")
        print(processes)
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
        print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏...")
        stdin, stdout, stderr = ssh.exec_command("tail -20 /root/server.log")
        logs = stdout.read().decode()
        print("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:")
        print(logs)
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –≤ routes/vacancies.py
        print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å routes/vacancies.py...")
        stdin, stdout, stderr = ssh.exec_command("python3 -m py_compile /root/routes/vacancies.py")
        compile_result = stdout.read().decode()
        compile_errors = stderr.read().decode()
        
        if compile_errors:
            print("‚ùå –û—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:")
            print(compile_errors)
        else:
            print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å routes/vacancies.py –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        
        # 4. –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –≤—Ä—É—á–Ω—É—é
        print("\n4Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä...")
        ssh.exec_command("pkill -f python.*app")
        time.sleep(2)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        stdin, stdout, stderr = ssh.exec_command("cd /root && python3 app.py > server.log 2>&1 &")
        time.sleep(5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        stdin, stdout, stderr = ssh.exec_command("ps aux | grep python.*app | grep -v grep")
        processes = stdout.read().decode()
        if processes:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        else:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –æ—à–∏–±–æ–∫
            stdin, stdout, stderr = ssh.exec_command("tail -10 /root/server.log")
            error_logs = stdout.read().decode()
            print("–õ–æ–≥–∏ –æ—à–∏–±–æ–∫:")
            print(error_logs)
        
        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å...")
        stdin, stdout, stderr = ssh.exec_command("curl -s http://localhost:5000/")
        curl_result = stdout.read().decode()
        if "html" in curl_result.lower():
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç")
        else:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            print(f"–û—Ç–≤–µ—Ç: {curl_result[:200]}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        ssh.close()

if __name__ == "__main__":
    check_server()
