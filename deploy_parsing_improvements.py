#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è —É–ª—É—á—à–µ–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
"""

import paramiko
import scp
import time
import os
from datetime import datetime

# SSH –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SERVER_HOST = "72.56.66.228"
SERVER_USER = "root"
SERVER_PASSWORD = "g2D,RytdQoSAYv"

def connect_ssh():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ SSH"""
    print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É...")
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(SERVER_HOST, username=SERVER_USER, password=SERVER_PASSWORD)
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    return ssh

def create_backup(ssh):
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞"""
    print("üíæ –°–æ–∑–¥–∞–µ–º –±–µ–∫–∞–ø...")
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_cmd = f"cp /root/routes/vacancies.py /root/routes/vacancies.py.backup_{timestamp}"
    
    stdin, stdout, stderr = ssh.exec_command(backup_cmd)
    stdout.read()
    stderr.read()
    
    print(f"‚úÖ –ë–µ–∫–∞–ø —Å–æ–∑–¥–∞–Ω: vacancies.py.backup_{timestamp}")
    return timestamp

def deploy_file(ssh):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print("üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π routes/vacancies.py...")
    
    with scp.SCPClient(ssh.get_transport()) as scp_client:
        scp_client.put('routes/vacancies.py', '/root/routes/vacancies.py')
        print("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
    check_cmd = "ls -la /root/routes/vacancies.py"
    stdin, stdout, stderr = ssh.exec_command(check_cmd)
    result = stdout.read().decode().strip()
    print(f"üìÅ –§–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {result}")

def restart_server(ssh):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    stop_cmd = "pkill -f python.*app"
    stdin, stdout, stderr = ssh.exec_command(stop_cmd)
    stdout.read()
    stderr.read()
    
    time.sleep(2)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    start_cmd = "cd /root && nohup python3 app.py > server.log 2>&1 &"
    stdin, stdout, stderr = ssh.exec_command(start_cmd)
    stdout.read()
    stderr.read()
    
    time.sleep(3)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    check_cmd = "ps aux | grep python.*app | grep -v grep"
    stdin, stdout, stderr = ssh.exec_command(check_cmd)
    processes = stdout.read().decode().strip()
    
    if processes:
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        print(f"üìä –ü—Ä–æ—Ü–µ—Å—Å—ã: {processes}")
    else:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
        return False
    
    return True

def test_api(ssh):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç
    test_cmd = "curl -s http://localhost:5000/api/vacancies/test"
    stdin, stdout, stderr = ssh.exec_command(test_cmd)
    result = stdout.read().decode().strip()
    
    if "success" in result:
        print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    else:
        print(f"‚ùå API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π —É–ª—É—á—à–µ–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–π...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        ssh = connect_ssh()
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∫–∞–ø
        backup_timestamp = create_backup(ssh)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        deploy_file(ssh)
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        if not restart_server(ssh):
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
        if not test_api(ssh):
            print("‚ùå API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è")
            return False
        
        print("üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üíæ –ë–µ–∫–∞–ø: vacancies.py.backup_{backup_timestamp}")
        print("üåê –°–µ—Ä–≤–µ—Ä: http://72.56.66.228/module/vacancies")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: {e}")
        return False
    
    finally:
        if 'ssh' in locals():
            ssh.close()

if __name__ == "__main__":
    main()
