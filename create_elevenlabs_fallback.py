#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ fallback —Ä–µ—à–µ–Ω–∏—è –¥–ª—è ElevenLabs
"""

import paramiko
import json
import time

SERVER_HOST = "72.56.66.228"
SERVER_USER = "root"
SERVER_PASSWORD = "g2D,RytdQoSAYv"

def create_fallback_solution():
    """–°–æ–∑–¥–∞–µ–º fallback —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è ElevenLabs"""
    print("üîß –°–æ–∑–¥–∞–µ–º fallback —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è ElevenLabs...")
    
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(SERVER_HOST, username=SERVER_USER, password=SERVER_PASSWORD)
    
    try:
        # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º espeak –∏ ffmpeg
        print("\n1Ô∏è‚É£ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTS –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
        stdin, stdout, stderr = ssh.exec_command("apt-get update && apt-get install -y espeak ffmpeg")
        install_result = stdout.read().decode()
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        # 2. –°–æ–∑–¥–∞–µ–º fallback —Å–µ—Ä–≤–∏—Å
        print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º fallback —Å–µ—Ä–≤–∏—Å...")
        
        fallback_service = '''
import subprocess
import tempfile
import os
import base64
from typing import Optional

class ElevenLabsFallback:
    """Fallback –¥–ª—è ElevenLabs —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º espeak"""
    
    def __init__(self):
        self.voice = "ru"  # –†—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
        self.speed = 150   # –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏
        
    def generate_audio(self, text: str) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é espeak"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_wav = tempfile.mktemp(suffix=".wav")
            temp_mp3 = tempfile.mktemp(suffix=".mp3")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ espeak
            cmd = [
                "espeak", 
                "-s", str(self.speed),
                "-v", self.voice,
                "-w", temp_wav,
                text
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0 and os.path.exists(temp_wav):
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3
                convert_cmd = [
                    "ffmpeg", 
                    "-i", temp_wav, 
                    "-acodec", "mp3", 
                    "-y", temp_mp3
                ]
                
                convert_result = subprocess.run(convert_cmd, capture_output=True, text=True)
                
                if convert_result.returncode == 0 and os.path.exists(temp_mp3):
                    # –ß–∏—Ç–∞–µ–º MP3 —Ñ–∞–π–ª
                    with open(temp_mp3, 'rb') as f:
                        audio_data = f.read()
                    
                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                    os.unlink(temp_wav)
                    os.unlink(temp_mp3)
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º base64
                    return base64.b64encode(audio_data).decode()
                else:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º WAV –µ—Å–ª–∏ MP3 –Ω–µ –ø–æ–ª—É—á–∏–ª—Å—è
                    with open(temp_wav, 'rb') as f:
                        audio_data = f.read()
                    
                    os.unlink(temp_wav)
                    if os.path.exists(temp_mp3):
                        os.unlink(temp_mp3)
                    
                    return base64.b64encode(audio_data).decode()
            else:
                print(f"–û—à–∏–±–∫–∞ espeak: {result.stderr}")
                return None
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ fallback: {e}")
            return None
'''
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º fallback —Å–µ—Ä–≤–∏—Å
        stdin, stdout, stderr = ssh.exec_command("cat > /root/services/elevenlabs_fallback.py << 'EOF'\n" + fallback_service + "\nEOF")
        stdout.read()
        print("‚úÖ Fallback —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω")
        
        # 3. –û–±–Ω–æ–≤–ª—è–µ–º routes/vacancies.py —Å fallback
        print("\n3Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º routes/vacancies.py...")
        
        fallback_endpoint = '''
@vacancies_bp.route('/api/vacancies/generate-audio-fallback', methods=['POST'])
def generate_audio_fallback():
    """Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ espeak"""
    try:
        from services.elevenlabs_fallback import ElevenLabsFallback
        
        data = request.get_json()
        text = data.get('text', '')
        
        if not text:
            return jsonify({"success": False, "error": "–¢–µ–∫—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω"}), 400
        
        print(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º fallback –∞—É–¥–∏–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞: {text[:50]}...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback
        fallback = ElevenLabsFallback()
        audio_base64 = fallback.generate_audio(text)
        
        if audio_base64:
            return jsonify({
                "success": True,
                "audio_data": audio_base64,
                "method": "espeak_fallback",
                "message": "–ê—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π TTS"
            })
        else:
            return jsonify({
                "success": False,
                "error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ fallback –∞—É–¥–∏–æ"
            }), 500
            
    except Exception as e:
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ fallback: {str(e)}"
        }), 500
'''
        
        # –î–æ–±–∞–≤–ª—è–µ–º endpoint
        stdin, stdout, stderr = ssh.exec_command("echo '\n" + fallback_endpoint + "' >> /root/routes/vacancies.py")
        stdout.read()
        print("‚úÖ Fallback endpoint –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # 4. –û–±–Ω–æ–≤–ª—è–µ–º frontend –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è fallback
        print("\n4Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º frontend...")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JavaScript –¥–ª—è fallback
        frontend_update = '''
// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è fallback
function generateAudioFallback() {
    const text = document.getElementById('generatedText').value;
    if (!text) {
        alert('–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç');
        return;
    }
    
    showStatus('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ fallback TTS...', 'info');
    
    fetch('/api/vacancies/generate-audio-fallback', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text: text })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showStatus('‚úÖ –ê—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ fallback TTS', 'success');
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ
            const audioBlob = new Blob([Uint8Array.from(atob(data.audio_data), c => c.charCodeAt(0))], { type: 'audio/mp3' });
            const audioUrl = URL.createObjectURL(audioBlob);
            
            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            const audio = document.createElement('audio');
            audio.controls = true;
            audio.src = audioUrl;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            const audioContainer = document.getElementById('audioContainer');
            if (audioContainer) {
                audioContainer.innerHTML = '';
                audioContainer.appendChild(audio);
            }
        } else {
            showStatus('‚ùå –û—à–∏–±–∫–∞: ' + data.error, 'error');
        }
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞:', error);
        showStatus('‚ùå –û—à–∏–±–∫–∞: ' + error.message, 'error');
    });
}
'''
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        stdin, stdout, stderr = ssh.exec_command("echo '" + frontend_update + "' > /root/fallback_audio.js")
        stdout.read()
        print("‚úÖ Frontend –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        
        # 5. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        print("\n5Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
        ssh.exec_command("pkill -f python.*app")
        time.sleep(2)
        ssh.exec_command("cd /root && nohup python3 app.py > server.log 2>&1 &")
        time.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
        stdin, stdout, stderr = ssh.exec_command("ps aux | grep python.*app | grep -v grep")
        processes = stdout.read().decode()
        if processes:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        else:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
        
        # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback...")
        test_payload = {
            "text": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç fallback –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ espeak."
        }
        
        test_cmd = f"curl -X POST -H 'Content-Type: application/json' -d '{json.dumps(test_payload)}' http://localhost:5000/api/vacancies/generate-audio-fallback"
        stdin, stdout, stderr = ssh.exec_command(test_cmd)
        result = stdout.read().decode()
        
        if "success" in result and "audio_data" in result:
            print("‚úÖ Fallback —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print("üéâ Fallback —Ä–µ—à–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!")
        else:
            print(f"‚ùå Fallback –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result[:200]}")
        
        print("\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–ò:")
        print("1. –û—Ç–∫—Ä–æ–π—Ç–µ http://72.56.66.228/module/vacancies")
        print("2. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç")
        print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ fallback –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
        print("4. Fallback –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π TTS (espeak)")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        ssh.close()

if __name__ == "__main__":
    create_fallback_solution()
