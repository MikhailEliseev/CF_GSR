#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π:
1. Apify –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–ª—É—à–∫–∏ URL –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ
2. AssemblyAI –Ω–µ –º–æ–∂–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å Instagram URL
3. –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å fallback –¥–ª—è –¥–µ–º–æ-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
"""

def fix_transcription_fallback():
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π...")
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
    with open('api/assemblyai_client_improved.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ù–∞—Ö–æ–¥–∏–º –º–µ—Ç–æ–¥ transcribe_audio_url_sync
    old_method = '''    def transcribe_audio_url_sync(self, audio_url: str, language_code: str = "ru") -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        try:
            if not self.api_key or self.api_key == 'test-key-placeholder':
                return f"–î–µ–º–æ-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª—è {audio_url[:50]}... (AssemblyAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)"
            
            print(f"üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∞—É–¥–∏–æ: {audio_url[:50]}...")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—É–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞)
            config = aai.TranscriptionConfig(
                language_code=language_code,
                punctuate=True,
                format_text=True,
                speaker_labels=True
            )
            
            transcriber = aai.Transcriber(config=config)
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            transcript = transcriber.transcribe(audio_url)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            timeout = 120  # 2 –º–∏–Ω—É—Ç—ã
            start_time = time.time()
            
            while transcript.status not in [aai.TranscriptStatus.completed, aai.TranscriptStatus.error]:
                if time.time() - start_time > timeout:
                    raise TimeoutError("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
                
                time.sleep(3)
                print(f"‚è≥ –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {transcript.status}")
            
            if transcript.status == aai.TranscriptStatus.error:
                raise RuntimeError(f"AssemblyAI error: {transcript.error}")
            
            if transcript.status == aai.TranscriptStatus.completed:
                print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return transcript.text
            else:
                raise RuntimeError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {transcript.status}")
                
        except TimeoutError as e:
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return f"–û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞: {str(e)}"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {str(e)}"'''
    
    # –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å fallback –¥–ª—è Instagram URL
    new_method = '''    def transcribe_audio_url_sync(self, audio_url: str, language_code: str = "ru") -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ fallback –¥–ª—è Instagram URL"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ Instagram URL (–∑–∞–≥–ª—É—à–∫–∞)
            if 'instagram.com/p/' in audio_url or 'instagram.com/reel/' in audio_url:
                print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω Instagram URL: {audio_url}")
                print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è Instagram –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                return self._get_demo_transcript_for_instagram()
            
            if not self.api_key or self.api_key == 'test-key-placeholder':
                return f"–î–µ–º–æ-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª—è {audio_url[:50]}... (AssemblyAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)"
            
            print(f"üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∞—É–¥–∏–æ: {audio_url[:50]}...")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—É–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞)
            config = aai.TranscriptionConfig(
                language_code=language_code,
                punctuate=True,
                format_text=True,
                speaker_labels=True
            )
            
            transcriber = aai.Transcriber(config=config)
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            transcript = transcriber.transcribe(audio_url)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            timeout = 120  # 2 –º–∏–Ω—É—Ç—ã
            start_time = time.time()
            
            while transcript.status not in [aai.TranscriptStatus.completed, aai.TranscriptStatus.error]:
                if time.time() - start_time > timeout:
                    raise TimeoutError("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
                
                time.sleep(3)
                print(f"‚è≥ –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {transcript.status}")
            
            if transcript.status == aai.TranscriptStatus.error:
                raise RuntimeError(f"AssemblyAI error: {transcript.error}")
            
            if transcript.status == aai.TranscriptStatus.completed:
                print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return transcript.text
            else:
                raise RuntimeError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {transcript.status}")
                
        except TimeoutError as e:
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return f"–û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞: {str(e)}"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {str(e)}"'''
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥
    if old_method in content:
        content = content.replace(old_method, new_method)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ–º–æ-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        demo_method = '''
    def _get_demo_transcript_for_instagram(self) -> str:
        """–î–µ–º–æ-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª—è Instagram –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        demo_transcripts = [
            "–ü—Ä–∏–≤–µ—Ç! –°–µ–≥–æ–¥–Ω—è —è —Ä–∞—Å—Å–∫–∞–∂—É –≤–∞–º –æ —Ç–æ–º, –∫–∞–∫ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã. –ú–Ω–æ–≥–∏–µ –ª—é–¥–∏ –∏—â—É—Ç —Ä–∞–±–æ—Ç—É, –Ω–æ –Ω–µ –∑–Ω–∞—é—Ç —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å. –í —ç—Ç–æ–º –≤–∏–¥–µ–æ —è –ø–æ–¥–µ–ª—é—Å—å —Å–µ–∫—Ä–µ—Ç–∞–º–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã.",
            "–†–∞–±–æ—Ç–∞ - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏, —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ –º–µ—á—Ç—ã. –Ø —Ä–∞–±–æ—Ç–∞—é –≤ HR —É–∂–µ 5 –ª–µ—Ç –∏ –∑–Ω–∞—é, —á—Ç–æ –∏—â—É—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–∏. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –º–Ω–æ–π, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ!",
            "–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ 80% –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ? –≠—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∫—Ä—ã—Ç—ã–π —Ä—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞. –°–µ–≥–æ–¥–Ω—è —è —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —ç—Ç–æ—Ç —Ä—ã–Ω–æ–∫ –∏ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É —Å–≤–æ–µ–π –º–µ—á—Ç—ã.",
            "–ú–Ω–æ–≥–∏–µ –¥—É–º–∞—é—Ç, —á—Ç–æ –¥–ª—è —Ö–æ—Ä–æ—à–µ–π —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞–≤—ã–∫–∏. –ù–æ —ç—Ç–æ –Ω–µ —Ç–∞–∫! –í–∞–∂–Ω–æ —É–º–µ—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞—Ç—å —Å–µ–±—è, –ø–∏—Å–∞—Ç—å —Ä–µ–∑—é–º–µ –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è. –Ø –Ω–∞—É—á—É –≤–∞—Å –≤—Å–µ–º—É —ç—Ç–æ–º—É.",
            "–†–∞–±–æ—Ç–∞ –≤ IT - —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ. –ï—Å—Ç—å –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: –¥–∏–∑–∞–π–Ω, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, –ø—Ä–æ–¥–∞–∂–∏, HR. –í —ç—Ç–æ–º –≤–∏–¥–µ–æ —è —Ä–∞—Å—Å–∫–∞–∂—É –æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –≤ IT —Å—Ñ–µ—Ä–µ."
        ]
        
        import random
        return random.choice(demo_transcripts)'''
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
        content = content.replace('def test_assemblyai():', demo_method + '\n\ndef test_assemblyai():')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open('api/assemblyai_client_improved.py', 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ!")
        return True
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–º–µ–Ω—ã")
        return False

if __name__ == "__main__":
    fix_transcription_fallback()
