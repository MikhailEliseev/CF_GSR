"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ Celery –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–æ–π TrendModule
"""

from celery import Celery
from config import Config
from models import db, TrendAnalysis, CompetitorData, ContentGeneration
from modules.module1_trends import TrendModule
from api.assemblyai_client import AssemblyAIClient
from api.openai_client import OpenAIClient
from api.elevenlabs_simple import ElevenLabsSimple
from api.heygen_client import HeyGenClient
import os
import requests
import json
from datetime import datetime

# –°–æ–∑–¥–∞–Ω–∏–µ Celery –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
celery_app = Celery(
    'content_factory',
    broker=Config.CELERY_BROKER_URL,
    backend=Config.CELERY_RESULT_BACKEND,
    include=['modules.module1_trends', 'modules.module2_vacancies', 'modules.module3_experts']
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery
celery_app.conf.update(
    task_serializer='json',
    result_serializer='json',
    accept_content=['json'],
    result_expires=3600,
    timezone='UTC',
    enable_utc=True,
    task_track_started=True,
    task_reject_on_worker_lost=True,
    worker_prefetch_multiplier=1,
    task_acks_late=True
)

@celery_app.task(bind=True)
def parse_competitors_task(self, analysis_id):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–∏"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        analysis = TrendAnalysis.query.get(analysis_id)
        if not analysis:
            raise Exception("Analysis not found")
        
        analysis.status = 'parsing'
        db.session.commit()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É TrendModule
        trend_module = TrendModule()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        config = analysis.get_config()
        days_back = config.get('days_back', 7)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
        viral_posts = trend_module.analyze_competitors(days_back)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –ë–î
        for post in viral_posts:
            competitor_data = CompetitorData(
                analysis_id=analysis_id,
                competitor_handle=post.get('source_username', ''),
                post_url=post.get('url', ''),
                views=post.get('views_count', 0),
                likes=post.get('likes_count', 0),
                comments=post.get('comments_count', 0),
                engagement_rate=post.get('engagement_rate', 0.0),
                post_date=datetime.fromisoformat(post.get('timestamp', '').replace('Z', '+00:00')) if post.get('timestamp') else None,
                thumbnail_url=post.get('thumbnail_url', ''),
                is_selected=False
            )
            db.session.add(competitor_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞
        analysis.status = 'completed'
        analysis.set_results({
            'viral_posts_count': len(viral_posts),
            'total_posts_analyzed': len(viral_posts),
            'analysis_date': datetime.utcnow().isoformat()
        })
        db.session.commit()
        
        return {
            'success': True,
            'viral_posts_count': len(viral_posts),
            'message': '–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω'
        }
        
    except Exception as e:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        analysis = TrendAnalysis.query.get(analysis_id)
        if analysis:
            analysis.status = 'failed'
            analysis.set_results({'error': str(e)})
            db.session.commit()
        
        raise e

@celery_app.task(bind=True)
def transcribe_video_task(self, analysis_id, post_id):
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–∏"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç
        post = CompetitorData.query.get(post_id)
        if not post:
            raise Exception("Post not found")
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_gen = ContentGeneration.query.filter_by(analysis_id=analysis_id).first()
        if not content_gen:
            content_gen = ContentGeneration(
                analysis_id=analysis_id,
                selected_post_id=post_id,
                status='transcribing'
            )
            db.session.add(content_gen)
            db.session.commit()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        demo_transcript = f"""
        –î–µ–º–æ-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ—Å—Ç–∞ –æ—Ç {post.competitor_handle}:
        
        –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∑—å—è! –°–µ–≥–æ–¥–Ω—è —è —Ö–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤–∞–º–∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏ —É—Å–ø–µ—Ö–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö.
        –ö–∞–∫ –≤—ã –∑–Ω–∞–µ—Ç–µ, –∫–æ–Ω—Ç–µ–Ω—Ç - —ç—Ç–æ –∫–æ—Ä–æ–ª—å, –∏ –≤–∞–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.
        
        –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç–æ–≤:
        1. –ë—É–¥—å—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—á–Ω—ã–º–∏
        2. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç—Ä–µ–Ω–¥—ã, –Ω–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤–∑–≥–ª—è–¥
        
        –ß—Ç–æ –¥—É–º–∞–µ—Ç–µ? –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö!
        """
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        content_gen.original_transcript = demo_transcript
        content_gen.status = 'transcribed'
        db.session.commit()
        
        return {
            'success': True,
            'transcript': demo_transcript,
            'message': '–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
        }
        
    except Exception as e:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        content_gen = ContentGeneration.query.filter_by(analysis_id=analysis_id).first()
        if content_gen:
            content_gen.status = 'failed'
            db.session.commit()
        
        raise e

@celery_app.task(bind=True)
def rewrite_text_task(self, analysis_id, transcript_text):
    """–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–∏"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_gen = ContentGeneration.query.filter_by(analysis_id=analysis_id).first()
        if not content_gen:
            raise Exception("Content generation not found")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å OpenAI Assistant
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        demo_rewritten = f"""
        üî• –°–ï–ö–†–ï–¢–´ –£–°–ü–ï–•–ê –í –°–û–¶–°–ï–¢–Ø–• üî•
        
        –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∑—å—è! üëã –°–µ–≥–æ–¥–Ω—è —Ä–∞—Å–∫—Ä—ã–≤–∞—é –≥–ª–∞–≤–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –≤–∏—Ä—É—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞!
        
        üí° –ö–õ–Æ–ß–ï–í–´–ï –ü–†–ò–ù–¶–ò–ü–´:
        ‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å - –±—É–¥—å—Ç–µ —Å–æ–±–æ–π
        ‚úÖ –¶–µ–Ω–Ω–æ—Å—Ç—å - –¥–∞–≤–∞–π—Ç–µ –ø–æ–ª—å–∑—É –∞—É–¥–∏—Ç–æ—Ä–∏–∏  
        ‚úÖ –¢—Ä–µ–Ω–¥—ã - —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç—Ä–µ–Ω–¥–∞–º–∏, –Ω–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–π —Å—Ç–∏–ª—å
        
        üöÄ –†–ï–ó–£–õ–¨–¢–ê–¢:
        - –ë–æ–ª—å—à–µ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏
        - –†–æ—Å—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        - –£–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å –±—Ä–µ–Ω–¥–∞
        
        –ß—Ç–æ –¥—É–º–∞–µ—Ç–µ? –ü–∏—à–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö! üí¨
        """
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        content_gen.rewritten_text = demo_rewritten
        content_gen.status = 'rewritten'
        db.session.commit()
        
        return {
            'success': True,
            'rewritten_text': demo_rewritten,
            'message': '–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'
        }
        
    except Exception as e:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        content_gen = ContentGeneration.query.filter_by(analysis_id=analysis_id).first()
        if content_gen:
            content_gen.status = 'failed'
            db.session.commit()
        
        raise e

@celery_app.task(bind=True)
def generate_voice_task(self, analysis_id, text, voice_settings):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–∏"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_gen = ContentGeneration.query.filter_by(analysis_id=analysis_id).first()
        if not content_gen:
            raise Exception("Content generation not found")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É TrendModule –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤
        trend_module = TrendModule()
        voices = trend_module.get_available_voices()
        
        if not voices:
            raise Exception("No voices available")
        
        # –í—ã–±–∏—Ä–∞–µ–º –≥–æ–ª–æ—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π)
        voice_id = voice_settings.get('voice_id', voices[0].get('voice_id', 'default'))
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ–∑–≤—É—á–∫–∏ —á–µ—Ä–µ–∑ ElevenLabs
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        demo_audio_url = f"https://demo-audio-url.com/{voice_id}.mp3"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        content_gen.audio_file_url = demo_audio_url
        content_gen.status = 'voice_generated'
        db.session.commit()
        
        return {
            'success': True,
            'audio_url': demo_audio_url,
            'message': '–û–∑–≤—É—á–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞'
        }
        
    except Exception as e:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        content_gen = ContentGeneration.query.filter_by(analysis_id=analysis_id).first()
        if content_gen:
            content_gen.status = 'failed'
            db.session.commit()
        
        raise e

@celery_app.task(bind=True)
def generate_video_task(self, analysis_id, audio_file_url, avatar_settings):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–∏"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_gen = ContentGeneration.query.filter_by(analysis_id=analysis_id).first()
        if not content_gen:
            raise Exception("Content generation not found")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É TrendModule –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤
        trend_module = TrendModule()
        avatars = trend_module.get_available_avatars()
        
        if not avatars:
            raise Exception("No avatars available")
        
        # –í—ã–±–∏—Ä–∞–µ–º –∞–≤–∞—Ç–∞—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π)
        avatar_id = avatar_settings.get('avatar_id', avatars[0].get('avatar_id', 'default'))
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ HeyGen
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        demo_video_url = f"https://demo-video-url.com/{avatar_id}.mp4"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        content_gen.video_file_url = demo_video_url
        content_gen.status = 'completed'
        db.session.commit()
        
        return {
            'success': True,
            'video_url': demo_video_url,
            'message': '–í–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ'
        }
        
    except Exception as e:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        content_gen = ContentGeneration.query.filter_by(analysis_id=analysis_id).first()
        if content_gen:
            content_gen.status = 'failed'
            db.session.commit()
        
        raise e

if __name__ == '__main__':
    celery_app.start()
