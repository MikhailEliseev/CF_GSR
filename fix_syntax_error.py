#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –≤ routes/vacancies.py
"""

import paramiko

SERVER_HOST = "72.56.66.228"
SERVER_USER = "root"
SERVER_PASSWORD = "g2D,RytdQoSAYv"

def fix_syntax_error():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É...")
    
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(SERVER_HOST, username=SERVER_USER, password=SERVER_PASSWORD)
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –±–µ–∫–∞–ø
        print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –±–µ–∫–∞–ø...")
        stdin, stdout, stderr = ssh.exec_command("cp /root/routes/vacancies.py /root/routes/vacancies.py.backup_$(date +%Y%m%d_%H%M%S)")
        stdout.read()
        print("‚úÖ –ë–µ–∫–∞–ø —Å–æ–∑–¥–∞–Ω")
        
        # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
        print("\n2Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É...")
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        fix_cmd = '''
# –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ—à–∏–±–∫–æ–π
sed -i '/@vacancies_bp.route(\/api\/vacancies\/generate-audio-fallback, methods=\[POST\])/d' /root/routes/vacancies.py

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
cat >> /root/routes/vacancies.py << 'EOF'

@vacancies_bp.route('/api/vacancies/generate-audio-fallback', methods=['POST'])
def generate_audio_fallback():
    """Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ espeak"""
    try:
        from services.elevenlabs_fallback import ElevenLabsFallback
        
        data = request.get_json()
        text = data.get('text', '')
        
        if not text:
            return jsonify({"success": False, "error": "–¢–µ–∫—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω"}), 400
        
        print(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º fallback –∞—É–¥–∏–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞: {text[:50]}...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback
        fallback = ElevenLabsFallback()
        audio_base64 = fallback.generate_audio(text)
        
        if audio_base64:
            return jsonify({
                "success": True,
                "audio_data": audio_base64,
                "method": "espeak_fallback",
                "message": "–ê—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π TTS"
            })
        else:
            return jsonify({
                "success": False,
                "error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ fallback –∞—É–¥–∏–æ"
            }), 500
            
    except Exception as e:
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ fallback: {str(e)}"
        }), 500
EOF
'''
        
        stdin, stdout, stderr = ssh.exec_command(fix_cmd)
        stdout.read()
        stderr.read()
        print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å...")
        stdin, stdout, stderr = ssh.exec_command("python3 -m py_compile /root/routes/vacancies.py")
        compile_result = stdout.read().decode()
        compile_errors = stderr.read().decode()
        
        if compile_errors:
            print("‚ùå –û—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:")
            print(compile_errors)
            return False
        else:
            print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        
        # 4. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        print("\n4Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
        ssh.exec_command("pkill -f python.*app")
        time.sleep(3)
        ssh.exec_command("cd /root && nohup python3 app.py > server.log 2>&1 &")
        time.sleep(5)
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä...")
        stdin, stdout, stderr = ssh.exec_command("ps aux | grep python.*app | grep -v grep")
        processes = stdout.read().decode()
        if processes:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        else:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏
            stdin, stdout, stderr = ssh.exec_command("tail -10 /root/server.log")
            error_logs = stdout.read().decode()
            print("–õ–æ–≥–∏ –æ—à–∏–±–æ–∫:")
            print(error_logs)
            return False
        
        # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å...")
        stdin, stdout, stderr = ssh.exec_command("curl -s http://localhost:5000/")
        curl_result = stdout.read().decode()
        if "html" in curl_result.lower():
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç")
        else:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return False
        
        # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback endpoint
        print("\n7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback endpoint...")
        test_payload = {
            "text": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç fallback –∞—É–¥–∏–æ."
        }
        
        import json
        test_cmd = f"curl -X POST -H 'Content-Type: application/json' -d '{json.dumps(test_payload)}' http://localhost:5000/api/vacancies/generate-audio-fallback"
        stdin, stdout, stderr = ssh.exec_command(test_cmd)
        result = stdout.read().decode()
        
        if "success" in result and "audio_data" in result:
            print("‚úÖ Fallback endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print("üéâ –ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞!")
            return True
        else:
            print(f"‚ùå Fallback –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result[:200]}")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    finally:
        ssh.close()

if __name__ == "__main__":
    success = fix_syntax_error()
    if success:
        print("\n‚úÖ ElevenLabs fallback –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ http://72.56.66.228/module/vacancies")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞")
