#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ö–æ–Ω—Ç–µ–Ω—Ç –ó–∞–≤–æ–¥–∞
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def check_redis():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Redis"""
    try:
        import redis
        r = redis.Redis(host='localhost', port=6379, db=0)
        r.ping()
        return True
    except Exception:
        return False

def start_redis():
    """–ó–∞–ø—É—Å–∫ Redis (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)"""
    try:
        subprocess.Popen(['redis-server'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        time.sleep(2)
        return check_redis()
    except FileNotFoundError:
        print("‚ùå Redis –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Redis:")
        print("   Ubuntu/Debian: sudo apt-get install redis-server")
        print("   macOS: brew install redis")
        print("   Windows: https://redis.io/download")
        return False

def start_celery():
    """–ó–∞–ø—É—Å–∫ Celery worker"""
    try:
        celery_process = subprocess.Popen([
            sys.executable, '-m', 'celery', '-A', 'celery_app', 'worker', '--loglevel=info'
        ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        return celery_process
    except FileNotFoundError:
        print("‚ùå Celery –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install celery")
        return None

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_packages = [
        'flask', 'flask_sqlalchemy', 'flask_socketio', 
        'celery', 'redis', 'requests', 'openai'
    ]
    
    missing = []
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            missing.append(package)
    
    if missing:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install -r requirements.txt")
        return False
    
    return True

def setup_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from app import create_app
        from models import db
        
        app, _ = create_app()
        with app.app_context():
            db.create_all()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ö–æ–Ω—Ç–µ–Ω—Ç –ó–∞–≤–æ–¥–∞...")
    print("=" * 50)

    # –û–±–Ω–æ–≤–ª—è–µ–º PATH, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–Ω–∞—Ä–Ω–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    venv_bin = Path(sys.executable).resolve().parent
    current_path = os.environ.get('PATH', '')
    path_parts = [str(venv_bin)] + [p for p in current_path.split(os.pathsep) if p]
    os.environ['PATH'] = os.pathsep.join(path_parts)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    if not check_dependencies():
        sys.exit(1)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    print("üóÑÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    if not setup_database():
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    print("üî¥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis...")
    if not check_redis():
        print("‚ö†Ô∏è  Redis –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞...")
        if not start_redis():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Redis")
            sys.exit(1)
    print("‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫ Celery
    print("‚öôÔ∏è  –ó–∞–ø—É—Å–∫ Celery worker...")
    celery_process = start_celery()
    if not celery_process:
        sys.exit(1)
    print("‚úÖ Celery worker –∑–∞–ø—É—â–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        from app import create_app
        app, socketio = create_app()
        
        print("=" * 50)
        print("üéâ –ö–æ–Ω—Ç–µ–Ω—Ç –ó–∞–≤–æ–¥ –∑–∞–ø—É—â–µ–Ω!")
        print("üì± –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:5000")
        print("‚ö†Ô∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("=" * 50)
        
        # –ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏–ª–∏ start.sh!
        # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç app.py (–∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å thin-–æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ app_current_backup.py)
        socketio.run(app, debug=False, host='0.0.0.0', port=5001, allow_unsafe_werkzeug=True)
        
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        if celery_process:
            celery_process.terminate()
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        if celery_process:
            celery_process.terminate()
        sys.exit(1)

if __name__ == "__main__":
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
    os.chdir(Path(__file__).parent)
    main()
