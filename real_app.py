# –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Ñ–∞–π–ª —É—Å—Ç–∞—Ä–µ–ª. –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ run.py/start.sh –∏ app.py (–∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç socketio).
# –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è!
#!/usr/bin/env python3
"""
–†–µ–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ö–æ–Ω—Ç–µ–Ω—Ç –ó–∞–≤–æ–¥–∞ —Å –Ω–∞—Å—Ç–æ—è—â–∏–º–∏ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏
"""

from flask import Flask, render_template, request, jsonify, redirect, url_for, flash
from models import db, Settings, Competitors, TaskStatus, VideoGeneration, ExpertTopics
from config import Config
from api.openai_client import OpenAIClient
from api.elevenlabs_client import ElevenLabsClient
from api.heygen_client import HeyGenClient
from api.apify_client import ApifyInstagramClient
from api.assemblyai_client import AssemblyAIClient
import uuid
from datetime import datetime
import json
import os
import time

def create_real_app():
    app = Flask(__name__)
    app.config.from_object(Config)
    
    # Initialize extensions
    db.init_app(app)
    
    # Create tables and default settings
    with app.app_context():
        db.create_all()
        
        # Initialize default settings for modules if they don't exist
        modules = ['trends', 'vacancies', 'experts']
        for module_name in modules:
            existing = Settings.query.filter_by(module_name=module_name).first()
            if not existing:
                settings = Settings(
                    module_name=module_name,
                    master_prompt="",
                    api_keys="{}",
                    additional_settings="{}"
                )
                db.session.add(settings)
        db.session.commit()
    
    def get_api_clients(module_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö API –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –º–æ–¥—É–ª—è"""
        settings = Settings.query.filter_by(module_name=module_name).first()
        if not settings:
            return None, None, None, None, None
            
        api_keys = settings.get_api_keys()
        
        openai_client = OpenAIClient(api_keys.get('openai_api_key')) if api_keys.get('openai_api_key') else None
        elevenlabs_client = ElevenLabsClient(api_keys.get('elevenlabs_api_key')) if api_keys.get('elevenlabs_api_key') else None
        heygen_client = HeyGenClient(api_keys.get('heygen_api_key')) if api_keys.get('heygen_api_key') else None
        apify_client = ApifyInstagramClient(api_keys.get('apify_api_key')) if api_keys.get('apify_api_key') else None
        assemblyai_client = AssemblyAIClient(api_keys.get('assemblyai_api_key')) if api_keys.get('assemblyai_api_key') else None
        
        return openai_client, elevenlabs_client, heygen_client, apify_client, assemblyai_client
    
    @app.route('/')
    def index():
        return render_template('index.html')
    
    @app.route('/module/<module_name>')
    def module_page(module_name):
        if module_name not in ['trends', 'vacancies', 'experts']:
            flash('–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('index'))
        
        settings = Settings.query.filter_by(module_name=module_name).first()
        if module_name == 'trends':
            return render_template('module_trends_new.html', settings=settings)
        else:
            return render_template(f'module_{module_name}.html', settings=settings)
    
    @app.route('/settings/<module_name>')
    def settings_page(module_name):
        if module_name not in ['trends', 'vacancies', 'experts']:
            flash('–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('index'))
        
        settings = Settings.query.filter_by(module_name=module_name).first()
        competitors = []
        if module_name == 'trends':
            competitors = Competitors.query.filter_by(is_active=True).all()
        
        return render_template('settings.html', 
                             module_name=module_name, 
                             settings=settings,
                             competitors=competitors)
    
    @app.route('/api/settings/<module_name>', methods=['POST'])
    def save_settings(module_name):
        try:
            data = request.get_json()
            settings = Settings.query.filter_by(module_name=module_name).first()
            
            if not settings:
                settings = Settings(module_name=module_name)
                db.session.add(settings)
            
            settings.openai_assistant_id = data.get('openai_assistant_id', '')
            settings.master_prompt = data.get('master_prompt', '')
            settings.set_api_keys(data.get('api_keys', {}))
            settings.set_additional_settings(data.get('additional_settings', {}))
            
            db.session.commit()
            return jsonify({'success': True, 'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'})
        except Exception as e:
            return jsonify({'success': False, 'message': str(e)}), 500
    
    @app.route('/api/competitors', methods=['GET', 'POST', 'DELETE'])
    def manage_competitors():
        if request.method == 'GET':
            competitors = Competitors.query.filter_by(is_active=True).all()
            return jsonify([{
                'id': c.id,
                'username': c.username,
                'platform': c.platform,
                'last_checked': c.last_checked.isoformat() if c.last_checked else None
            } for c in competitors])
        
        elif request.method == 'POST':
            data = request.get_json()
            competitor = Competitors(
                username=data['username'],
                platform=data.get('platform', 'instagram')
            )
            db.session.add(competitor)
            db.session.commit()
            return jsonify({'success': True, 'message': '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω'})
        
        elif request.method == 'DELETE':
            competitor_id = request.args.get('id')
            competitor = Competitors.query.get(competitor_id)
            if competitor:
                competitor.is_active = False
                db.session.commit()
                return jsonify({'success': True, 'message': '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç —É–¥–∞–ª–µ–Ω'})
            return jsonify({'success': False, 'message': '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
    
    # –†–ï–ê–õ–¨–ù–´–ï API –¥–ª—è –≥–æ–ª–æ—Å–æ–≤ –∏ –∞–≤–∞—Ç–∞—Ä–æ–≤
    @app.route('/api/module/<module_name>/voices')
    def get_voices(module_name):
        try:
            _, elevenlabs_client, _, _, _ = get_api_clients(module_name)
            if elevenlabs_client:
                try:
                    voices = elevenlabs_client.get_available_voices()
                    return jsonify(voices)
                except Exception as e:
                    print(f"ElevenLabs error: {e}")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–≥–æ–ª–æ—Å–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    demo_voices = [
                        {"voice_id": "21m00Tcm4TlvDq8ikWAM", "name": "Rachel (–ñ–µ–Ω—Å–∫–∏–π, —Å–ø–æ–∫–æ–π–Ω—ã–π)"},
                        {"voice_id": "AZnzlk1XvdvUeBnXmlld", "name": "Domi (–ñ–µ–Ω—Å–∫–∏–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π)"},
                        {"voice_id": "ErXwobaYiN019PkySvjV", "name": "Antoni (–ú—É–∂—Å–∫–æ–π, –º–æ–ª–æ–¥–æ–π)"},
                        {"voice_id": "VR6AewLTigWG4xSOukaG", "name": "Arnold (–ú—É–∂—Å–∫–æ–π, —Å—Ä–µ–¥–Ω–∏–π)"}
                    ]
                    return jsonify(demo_voices)
            else:
                return jsonify({'error': 'ElevenLabs API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}), 400
        except Exception as e:
            return jsonify({'error': str(e)}), 500
    
    @app.route('/api/module/<module_name>/avatars')
    def get_avatars(module_name):
        try:
            _, _, heygen_client, _, _ = get_api_clients(module_name)
            if heygen_client:
                try:
                    avatars = heygen_client.get_available_avatars()
                    return jsonify(avatars)
                except Exception as e:
                    print(f"HeyGen error: {e}")
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–∞–≤–∞—Ç–∞—Ä—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    demo_avatars = [
                        {"avatar_id": "Angela_public", "avatar_name": "Angela (–ñ–µ–Ω—â–∏–Ω–∞, –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å)"},
                        {"avatar_id": "Josh_lite", "avatar_name": "Josh (–ú—É–∂—á–∏–Ω–∞, –º–æ–ª–æ–¥–æ–π)"},
                        {"avatar_id": "Monica_public", "avatar_name": "Monica (–ñ–µ–Ω—â–∏–Ω–∞, –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è)"},
                        {"avatar_id": "Wayne_20220426", "avatar_name": "Wayne (–ú—É–∂—á–∏–Ω–∞, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π)"}
                    ]
                    return jsonify(demo_avatars)
            else:
                return jsonify({'error': 'HeyGen API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}), 400
        except Exception as e:
            return jsonify({'error': str(e)}), 500
    
    # –†–ï–ê–õ–¨–ù–´–ô API –¥–ª—è —Å–±–æ—Ä–∞ —Ä–∏–ª—Å–æ–≤ —á–µ—Ä–µ–∑ Apify
    @app.route('/api/trends/collect-reels', methods=['POST'])
    def collect_reels():
        """–†–ï–ê–õ–¨–ù–´–ô —Å–±–æ—Ä —Ä–∏–ª—Å–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Apify"""
        try:
            data = request.get_json()
            competitors = data.get('competitors', [])
            count = data.get('count', 20)
            
            if not competitors:
                return jsonify({'success': False, 'message': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤'}), 400
            
            _, _, _, apify_client, _ = get_api_clients('trends')
            if not apify_client:
                return jsonify({'success': False, 'message': 'Apify API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}), 400
            
            print(f"üîç –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ {len(competitors)} –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            viral_posts = apify_client.get_trending_content(competitors, days_back=7)
            
            if not viral_posts:
                return jsonify({'success': False, 'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤'}), 400
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
            for competitor_username in competitors:
                competitor = Competitors.query.filter_by(username=competitor_username).first()
                if competitor:
                    competitor.last_checked = datetime.utcnow()
            
            db.session.commit()
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(viral_posts)} –ø–æ—Å—Ç–æ–≤, –∏–∑ –Ω–∏—Ö –≤–∏—Ä–∞–ª—å–Ω—ã—Ö: {len([p for p in viral_posts if p['is_viral']])}")
            
            return jsonify({
                'success': True,
                'reels': viral_posts,
                'total_count': len(viral_posts),
                'viral_count': len([p for p in viral_posts if p['is_viral']])
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Ä–∏–ª—Å–æ–≤: {e}")
            return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}'}), 500
    
    # –†–ï–ê–õ–¨–ù–´–ô API –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ AssemblyAI
    @app.route('/api/trends/transcribe', methods=['POST'])
    def transcribe_reel():
        """–†–ï–ê–õ–¨–ù–ê–Ø —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —á–µ—Ä–µ–∑ AssemblyAI"""
        try:
            data = request.get_json()
            reel_id = data.get('reel_id')
            video_url = data.get('video_url')  # URL –≤–∏–¥–µ–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
            
            if not video_url:
                return jsonify({'success': False, 'message': 'URL –≤–∏–¥–µ–æ –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
            
            _, _, _, _, assemblyai_client = get_api_clients('trends')
            if not assemblyai_client:
                return jsonify({'success': False, 'message': 'AssemblyAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}), 400
            
            print(f"üé§ –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –≤–∏–¥–µ–æ: {video_url[:50]}...")
            
            # –†–µ–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
            transcript = assemblyai_client.transcribe_video_url(video_url, language_code="ru")
            
            if not transcript:
                return jsonify({'success': False, 'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ'}), 400
            
            print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ç–µ–∫—Å—Ç: {len(transcript)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return jsonify({
                'success': True,
                'transcript': transcript,
                'reel_id': reel_id
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
            return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}'}), 500
    
    # –†–ï–ê–õ–¨–ù–´–ô API –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI
    @app.route('/api/trends/rewrite', methods=['POST'])
    def rewrite_text():
        """–†–ï–ê–õ–¨–ù–û–ï –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI Assistant"""
        try:
            data = request.get_json()
            transcript = data.get('transcript', '')
            
            if not transcript:
                return jsonify({'success': False, 'message': '–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
            
            settings = Settings.query.filter_by(module_name='trends').first()
            if not settings or not settings.openai_assistant_id:
                return jsonify({'success': False, 'message': 'OpenAI Assistant –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}), 400
            
            openai_client, _, _, _, _ = get_api_clients('trends')
            if not openai_client:
                return jsonify({'success': False, 'message': 'OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}), 400
            
            print(f"ü§ñ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI Assistant...")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è
            rewrite_prompt = f"""
            {settings.master_prompt}
            
            –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è:
            {transcript}
            
            –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω:
            1. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–¥–µ—é
            2. –ë—ã—Ç—å –±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ –≤–∏—Ä—É—Å–Ω—ã–º
            3. –ü–æ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è 40-—Å–µ–∫—É–Ω–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
            4. –ò–º–µ—Ç—å –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –Ω–∞—á–∞–ª–æ –∏ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
            """
            
            # –†–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ OpenAI Assistant
            result = openai_client.create_assistant_message(settings.openai_assistant_id, rewrite_prompt)
            
            if not result:
                return jsonify({'success': False, 'message': 'OpenAI Assistant –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª'}), 400
            
            rewritten_text = result['content']
            
            print(f"‚úÖ –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(rewritten_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return jsonify({
                'success': True,
                'rewritten_text': rewritten_text,
                'original_length': len(transcript),
                'new_length': len(rewritten_text)
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è: {e}")
            return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ OpenAI: {str(e)}'}), 500
    
    # –†–ï–ê–õ–¨–ù–´–ô API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
    @app.route('/api/trends/generate-video', methods=['POST'])
    def generate_video():
        """–†–ï–ê–õ–¨–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ ElevenLabs + HeyGen"""
        try:
            data = request.get_json()
            text = data.get('text', '')
            voice_id = data.get('voice_id', '')
            avatar_id = data.get('avatar_id', '')
            
            if not all([text, voice_id, avatar_id]):
                return jsonify({'success': False, 'message': '–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–∞–∑–∞–Ω—ã'}), 400
            
            _, elevenlabs_client, heygen_client, _, _ = get_api_clients('trends')
            
            if not elevenlabs_client:
                return jsonify({'success': False, 'message': 'ElevenLabs API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}), 400
            if not heygen_client:
                return jsonify({'success': False, 'message': 'HeyGen API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}), 400
            
            print(f"üéµ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ElevenLabs...")
            
            # –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ElevenLabs
            audio_url = elevenlabs_client.generate_speech_for_video(text, voice_id)
            if not audio_url:
                return jsonify({'success': False, 'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ'}), 400
            
            print(f"‚úÖ –ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ: {audio_url}")
            print(f"üé¨ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ HeyGen...")
            
            # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ HeyGen
            video_url = heygen_client.generate_video_complete(avatar_id, audio_url)
            if not video_url:
                return jsonify({'success': False, 'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ'}), 400
            
            print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {video_url}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            task_id = str(uuid.uuid4())
            generation = VideoGeneration(
                task_id=task_id,
                module_name='trends',
                generated_text=text,
                audio_file_url=audio_url,
                video_file_url=video_url,
                avatar_id=avatar_id,
                voice_id=voice_id
            )
            db.session.add(generation)
            db.session.commit()
            
            return jsonify({
                'success': True,
                'text': text,
                'audio_url': audio_url,
                'video_url': video_url,
                'voice_id': voice_id,
                'avatar_id': avatar_id,
                'task_id': task_id
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
            return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ: {str(e)}'}), 500
    
    @app.route('/api/module/<module_name>/preview')
    def get_module_preview(module_name):
        if module_name == 'vacancies':
            try:
                from modules.module2_vacancies import VacancyModule
                vacancy_module = VacancyModule()
                preview = vacancy_module.get_vacancies_preview()
                return jsonify(preview)
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        return jsonify([])
    
    @app.route('/api/module/<module_name>/stats')
    def get_module_stats(module_name):
        if module_name == 'vacancies':
            try:
                from modules.module2_vacancies import VacancyModule
                vacancy_module = VacancyModule()
                vacancies = vacancy_module.get_vacancies_from_sheets()
                return jsonify({
                    "total": len(vacancies),
                    "active": len([v for v in vacancies if v['positions_needed'] != '0']),
                    "priority": len([v for v in vacancies if '–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç' in v.get('comments', '').lower()]),
                    "updated": datetime.now().strftime("%H:%M")
                })
            except Exception as e:
                return jsonify({'error': str(e)}), 500
        return jsonify({})
    
    @app.route('/api/expert-topics', methods=['POST'])
    def generate_expert_topics():
        """–†–ï–ê–õ–¨–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º —á–µ—Ä–µ–∑ OpenAI"""
        try:
            data = request.get_json()
            num_topics = data.get('num_topics', 15)
            
            settings = Settings.query.filter_by(module_name='experts').first()
            if not settings or not settings.openai_assistant_id:
                return jsonify({'success': False, 'message': 'OpenAI Assistant –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}), 400
            
            openai_client, _, _, _, _ = get_api_clients('experts')
            if not openai_client:
                return jsonify({'success': False, 'message': 'OpenAI API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}), 400
            
            additional_settings = settings.get_additional_settings()
            consumer_profile = additional_settings.get('consumer_profile', '–û–±—â–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è')
            
            prompt = f"""
            –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ {num_topics} –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–µ–º –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
            
            –ü–æ—Ä—Ç—Ä–µ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è: {consumer_profile}
            
            –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–µ–º–∞–º:
            1. –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
            2. –ü–æ–∑–≤–æ–ª—è—é—Ç –¥–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
            3. –ò–º–µ—é—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
            4. –ü–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è 40-—Å–µ–∫—É–Ω–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
            5. –í—ã–∑—ã–≤–∞—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å –∏ –∂–µ–ª–∞–Ω–∏–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ
            
            –§–æ—Ä–º–∞—Ç–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç –∫–∞–∫ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º, –∫–∞–∂–¥–∞—è —Ç–µ–º–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.
            """
            
            print(f"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é {num_topics} —Ç–µ–º —á–µ—Ä–µ–∑ OpenAI...")
            
            result = openai_client.create_assistant_message(settings.openai_assistant_id, prompt)
            if not result:
                return jsonify({'success': False, 'message': 'OpenAI –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª'}), 400
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            topics_text = result['content']
            topics = []
            session_id = str(uuid.uuid4())
            
            for line in topics_text.split('\n'):
                line = line.strip()
                if line and any(line.startswith(str(i) + '.') for i in range(1, 100)):
                    topic = line.split('.', 1)[1].strip()
                    topics.append(topic)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                    expert_topic = ExpertTopics(
                        session_id=session_id,
                        topic=topic,
                        is_selected=False
                    )
                    db.session.add(expert_topic)
            
            db.session.commit()
            
            print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(topics)} —Ç–µ–º")
            
            return jsonify({
                'success': True,
                'session_id': session_id,
                'topics': topics
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º: {e}")
            return jsonify({'success': False, 'message': str(e)}), 500
    
    return app

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –†–ï–ê–õ–¨–ù–û–ì–û –ö–æ–Ω—Ç–µ–Ω—Ç –ó–∞–≤–æ–¥–∞...")
    print("üî• –í—Å–µ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã")
    print("‚ö° Apify, AssemblyAI, OpenAI, ElevenLabs, HeyGen")
    print("=" * 60)
    
    app = create_real_app()
    
    print("üéâ –ö–æ–Ω—Ç–µ–Ω—Ç –ó–∞–≤–æ–¥ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ API –≥–æ—Ç–æ–≤!")
    print("üì± –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:5001")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 60)
    
    try:
        app.run(debug=True, host='0.0.0.0', port=5001)
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("‚úÖ –ì–æ—Ç–æ–≤–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
