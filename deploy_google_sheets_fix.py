#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–ø–ª–æ—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Google Sheets URL
"""

import paramiko
import scp
import os
import time
from datetime import datetime

# SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SSH_CONFIG = {
    'hostname': '72.56.66.228',
    'username': 'root',
    'password': 'g2D,RytdQoSAYv',
    'port': 22
}

def connect_ssh():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ SSH"""
    print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É...")
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    
    try:
        ssh.connect(**SSH_CONFIG)
        print("‚úÖ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return ssh
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return None

def create_backup(ssh):
    """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ routes/vacancies.py"""
    print("üíæ –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø routes/vacancies.py...")
    
    try:
        # –ò—â–µ–º –ø—Ä–æ–µ–∫—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        find_cmd = "find /root -name 'routes' -type d 2>/dev/null | head -3"
        stdin, stdout, stderr = ssh.exec_command(find_cmd)
        routes_dirs = stdout.read().decode().strip().split('\n')
        
        actual_path = None
        for routes_dir in routes_dirs:
            if routes_dir and 'vacancies.py' in str(ssh.exec_command(f"ls {routes_dir} 2>/dev/null")[1].read()):
                actual_path = routes_dir
                break
        
        if not actual_path:
            # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏
            check_dirs = ["/root/routes", "/root/content_factory/routes", "/root/gsr/routes", "/root/app/routes"]
            for dir_path in check_dirs:
                stdin, stdout, stderr = ssh.exec_command(f"ls {dir_path}/vacancies.py 2>/dev/null")
                if not stderr.read():
                    actual_path = dir_path
                    break
        
        if not actual_path:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª routes/vacancies.py –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            return False
        
        print(f"üìÅ –ù–∞–π–¥–µ–Ω routes –≤: {actual_path}")
        
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        backup_cmd = f"cp {actual_path}/vacancies.py {actual_path}/vacancies_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.py"
        stdin, stdout, stderr = ssh.exec_command(backup_cmd)
        stdout.read()
        stderr.read()
        print("‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω")
        
        return actual_path
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        return False

def upload_file(ssh, routes_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    print("üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π routes/vacancies.py...")
    
    try:
        with scp.SCPClient(ssh.get_transport()) as scp_client:
            scp_client.put('routes/vacancies.py', f"{routes_path}/vacancies.py")
        print("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return False

def restart_server(ssh):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        kill_cmd = "pkill -f 'python.*app' || pkill -f 'flask' || true"
        stdin, stdout, stderr = ssh.exec_command(kill_cmd)
        stdout.read()
        stderr.read()
        time.sleep(2)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
        start_cmd = "cd /root && nohup python3 app.py > server.log 2>&1 &"
        stdin, stdout, stderr = ssh.exec_command(start_cmd)
        stdout.read()
        stderr.read()
        
        time.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        check_cmd = "ps aux | grep -E '(python.*app|flask)' | grep -v grep"
        stdin, stdout, stderr = ssh.exec_command(check_cmd)
        processes = stdout.read().decode().strip()
        
        if processes:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            return True
        else:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False

def test_fix():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...")
    
    import requests
    
    test_url = "https://docs.google.com/spreadsheets/u/1/d/1I1AfpmNbd-K0Osd4Vh7npDCYSQr2a1t_KdT8ms9vgr4/edit?gid=718924971"
    
    try:
        response = requests.post(
            "http://72.56.66.228/api/vacancies/parse",
            json={"url": test_url},
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get("success"):
                print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ Google Sheets —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {data.get('count', 0)}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {data.get('error')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ø–ª–æ—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Google Sheets...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists('routes/vacancies.py'):
        print("‚ùå –§–∞–π–ª routes/vacancies.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    ssh = connect_ssh()
    if not ssh:
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        routes_path = create_backup(ssh)
        if not routes_path:
            return False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if not upload_file(ssh, routes_path):
            return False
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        if not restart_server(ssh):
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if test_fix():
            print("üéâ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            return True
        else:
            print("‚ö†Ô∏è –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
            return False
            
    finally:
        ssh.close()
        print("üîå SSH —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    main()

