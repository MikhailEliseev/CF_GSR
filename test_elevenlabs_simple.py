#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç ElevenLabs
"""

import requests
import json

def test_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç ElevenLabs API"""
    api_key = "sk_76ff61f01df7d9a12c594e8f45cfa349d1917402ba5ec828"
    
    print("üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç ElevenLabs...")
    
    try:
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–∞
        print("1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–∞...")
        response = requests.get(
            "https://api.elevenlabs.io/v1/voices",
            headers={"xi-api-key": api_key},
            timeout=10
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            voices = response.json()
            print(f"‚úÖ –ì–æ–ª–æ—Å–æ–≤: {len(voices.get('voices', []))}")
            
            if voices.get('voices'):
                voice = voices['voices'][0]
                print(f"‚úÖ –ü–µ—Ä–≤—ã–π –≥–æ–ª–æ—Å: {voice.get('name')} (ID: {voice.get('voice_id')})")
                
                # –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
                print("\n2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ...")
                payload = {
                    "text": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç.",
                    "model_id": "eleven_multilingual_v2",
                    "voice_settings": {
                        "stability": 0.5,
                        "similarity_boost": 0.5
                    }
                }
                
                response = requests.post(
                    f"https://api.elevenlabs.io/v1/text-to-speech/{voice['voice_id']}",
                    headers={
                        "xi-api-key": api_key,
                        "Content-Type": "application/json"
                    },
                    json=payload,
                    timeout=30
                )
                
                print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
                if response.status_code == 200:
                    print(f"‚úÖ –ê—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ! –†–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                    with open("test_audio.mp3", "wb") as f:
                        f.write(response.content)
                    print("üíæ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ test_audio.mp3")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.text}")
                    return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤: {response.text}")
            return False
            
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return False
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = test_simple()
    if success:
        print("\nüéâ ElevenLabs —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("\n‚ùå ElevenLabs –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
