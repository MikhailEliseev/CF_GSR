#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
"""

import requests
import time
from datetime import datetime

def check_deployment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø –ö–û–ù–¢–ï–ù–¢-–ó–ê–í–û–î–ê")
    print("=" * 50)
    
    server_url = "http://72.56.66.228"
    endpoints_to_check = [
        ("/", "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"),
        ("/status", "–°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
        ("/api/trends", "API —Ç—Ä–µ–Ω–¥–æ–≤"),
        ("/api/vacancies", "API –≤–∞–∫–∞–Ω—Å–∏–π"),
        ("/api/experts", "API —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
    ]
    
    results = {}
    
    for endpoint, description in endpoints_to_check:
        url = f"{server_url}{endpoint}"
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {description}: {url}")
        
        try:
            response = requests.get(url, timeout=10)
            status_code = response.status_code
            
            if status_code == 200:
                print(f"‚úÖ {description}: OK (200)")
                results[endpoint] = "OK"
            elif status_code == 404:
                print(f"‚ö†Ô∏è  {description}: –ù–µ –Ω–∞–π–¥–µ–Ω–æ (404)")
                results[endpoint] = "404"
            elif status_code == 502:
                print(f"‚ùå {description}: Bad Gateway (502)")
                results[endpoint] = "502"
            else:
                print(f"‚ö†Ô∏è  {description}: –°—Ç–∞—Ç—É—Å {status_code}")
                results[endpoint] = f"Status {status_code}"
                
        except requests.exceptions.Timeout:
            print(f"‚è∞ {description}: –¢–∞–π–º–∞—É—Ç")
            results[endpoint] = "Timeout"
        except requests.exceptions.ConnectionError:
            print(f"‚ùå {description}: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            results[endpoint] = "Connection Error"
        except Exception as e:
            print(f"‚ùå {description}: –û—à–∏–±–∫–∞ - {e}")
            results[endpoint] = f"Error: {e}"
    
    return results

def analyze_results(results):
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("\n" + "=" * 50)
    print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 50)
    
    ok_count = sum(1 for status in results.values() if status == "OK")
    total_count = len(results)
    
    print(f"‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö endpoints: {ok_count}/{total_count}")
    
    if ok_count == total_count:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç-–∑–∞–≤–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return "success"
    elif ok_count > 0:
        print("‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–¢–ê–ï–¢")
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ endpoints —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        return "partial"
    else:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï–ú")
        print("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
        return "failed"

def show_next_steps(status):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞"""
    print("\n" + "=" * 50)
    print("üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò")
    print("=" * 50)
    
    if status == "success":
        print("üéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("\n‚úÖ –ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
        print("- –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        print("- API endpoints")
        print("- –í—Å–µ –º–æ–¥—É–ª–∏")
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
    elif status == "partial":
        print("‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–û–ï –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï")
        print("\nüîß –ß—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:")
        print("1. –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        print("2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("3. API –∫–ª—é—á–∏")
        print("4. –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º")
        
    else:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï–ú")
        print("\nüîß –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:")
        print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ nginx")
        print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏")
        print("4. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def main():
    print(f"üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    results = check_deployment()
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    status = analyze_results(results)
    
    # –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    show_next_steps(status)
    
    print(f"\nüïê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
