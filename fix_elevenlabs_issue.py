#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å ElevenLabs
"""

import paramiko
import json

SERVER_HOST = "72.56.66.228"
SERVER_USER = "root"
SERVER_PASSWORD = "g2D,RytdQoSAYv"

def fix_elevenlabs():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å ElevenLabs"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å ElevenLabs...")
    
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(SERVER_HOST, username=SERVER_USER, password=SERVER_PASSWORD)
    
    try:
        # 1. –î–æ–±–∞–≤–ª—è–µ–º fallback –¥–ª—è ElevenLabs
        print("\n1Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º fallback –¥–ª—è ElevenLabs...")
        
        fallback_code = '''
# –î–æ–±–∞–≤–ª—è–µ–º –≤ routes/vacancies.py fallback –¥–ª—è ElevenLabs
import os
import tempfile
import subprocess

def generate_audio_fallback(text, output_path):
    """Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π TTS"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º espeak –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
        temp_file = tempfile.mktemp(suffix=".wav")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ espeak
        cmd = ["espeak", "-s", "150", "-v", "ru", "-w", temp_file, text]
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0 and os.path.exists(temp_file):
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if output_path.endswith('.mp3'):
                mp3_file = tempfile.mktemp(suffix=".mp3")
                convert_cmd = ["ffmpeg", "-i", temp_file, "-acodec", "mp3", mp3_file]
                convert_result = subprocess.run(convert_cmd, capture_output=True, text=True)
                
                if convert_result.returncode == 0:
                    os.rename(mp3_file, output_path)
                    os.unlink(temp_file)
                    return True
                else:
                    os.rename(temp_file, output_path)
                    return True
            else:
                os.rename(temp_file, output_path)
                return True
        else:
            print(f"–û—à–∏–±–∫–∞ espeak: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ fallback: {e}")
        return False
'''
        
        # 2. –û–±–Ω–æ–≤–ª—è–µ–º ElevenLabs —Å–µ—Ä–≤–∏—Å —Å fallback
        print("\n2Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º ElevenLabs —Å–µ—Ä–≤–∏—Å...")
        
        updated_service = '''
import requests
import json
import os
import tempfile
import subprocess
from typing import Optional

class ElevenLabsService:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://api.elevenlabs.io/v1"
        
    def generate_audio(self, text: str, voice_id: str = None, output_path: str = None) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å fallback"""
        try:
            # –ü—Ä–æ–±—É–µ–º ElevenLabs API
            if self._try_elevenlabs_api(text, voice_id, output_path):
                return output_path
        except Exception as e:
            print(f"ElevenLabs API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # Fallback –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–π TTS
        print("–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback TTS...")
        return self._generate_audio_fallback(text, output_path)
    
    def _try_elevenlabs_api(self, text: str, voice_id: str, output_path: str) -> bool:
        """–ü—Ä–æ–±—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ElevenLabs API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
            if not voice_id:
                voices_response = requests.get(
                    f"{self.base_url}/voices",
                    headers={"xi-api-key": self.api_key},
                    timeout=10
                )
                if voices_response.status_code == 200:
                    voices = voices_response.json()
                    if voices.get('voices'):
                        voice_id = voices['voices'][0]['voice_id']
                    else:
                        return False
                else:
                    return False
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            payload = {
                "text": text,
                "model_id": "eleven_multilingual_v2",
                "voice_settings": {
                    "stability": 0.5,
                    "similarity_boost": 0.5
                }
            }
            
            response = requests.post(
                f"{self.base_url}/text-to-speech/{voice_id}",
                headers={
                    "xi-api-key": self.api_key,
                    "Content-Type": "application/json"
                },
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                with open(output_path, 'wb') as f:
                    f.write(response.content)
                return True
            else:
                print(f"ElevenLabs API –æ—à–∏–±–∫–∞: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"ElevenLabs API –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return False
    
    def _generate_audio_fallback(self, text: str, output_path: str) -> Optional[str]:
        """Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ"""
        try:
            temp_file = tempfile.mktemp(suffix=".wav")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º espeak
            cmd = ["espeak", "-s", "150", "-v", "ru", "-w", temp_file, text]
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0 and os.path.exists(temp_file):
                if output_path.endswith('.mp3'):
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3
                    mp3_file = tempfile.mktemp(suffix=".mp3")
                    convert_cmd = ["ffmpeg", "-i", temp_file, "-acodec", "mp3", "-y", mp3_file]
                    convert_result = subprocess.run(convert_cmd, capture_output=True, text=True)
                    
                    if convert_result.returncode == 0:
                        os.rename(mp3_file, output_path)
                        os.unlink(temp_file)
                        return output_path
                    else:
                        os.rename(temp_file, output_path)
                        return output_path
                else:
                    os.rename(temp_file, output_path)
                    return output_path
            else:
                print(f"–û—à–∏–±–∫–∞ espeak: {result.stderr}")
                return None
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ fallback: {e}")
            return None
'''
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        stdin, stdout, stderr = ssh.exec_command("cat > /root/services/elevenlabs_service.py << 'EOF'\n" + updated_service + "\nEOF")
        stdout.read()
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω ElevenLabs —Å–µ—Ä–≤–∏—Å —Å fallback")
        
        # 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º espeak –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        print("\n3Ô∏è‚É£ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º espeak...")
        stdin, stdout, stderr = ssh.exec_command("apt-get update && apt-get install -y espeak ffmpeg")
        install_result = stdout.read().decode()
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
        print(install_result[:500])
        
        # 4. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        print("\n4Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
        ssh.exec_command("pkill -f python.*app")
        time.sleep(2)
        ssh.exec_command("cd /root && nohup python3 app.py > server.log 2>&1 &")
        time.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        stdin, stdout, stderr = ssh.exec_command("ps aux | grep python.*app | grep -v grep")
        processes = stdout.read().decode()
        if processes:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        else:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
        
        print("\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("–¢–µ–ø–µ—Ä—å ElevenLabs –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback TTS –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
    finally:
        ssh.close()

if __name__ == "__main__":
    fix_elevenlabs()
