#!/usr/bin/env python3
"""
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –≤ –º–æ–¥—É–ª—å –≤–∞–∫–∞–Ω—Å–∏–π
"""

import paramiko
import time

SERVER_HOST = "72.56.66.228"
SERVER_USER = "root"
SERVER_PASSWORD = "g2D,RytdQoSAYv"

def add_audio_endpoint():
    """–î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ"""
    print("üîß –î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ...")
    
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(SERVER_HOST, username=SERVER_USER, password=SERVER_PASSWORD)
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –±–µ–∫–∞–ø
        print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –±–µ–∫–∞–ø...")
        stdin, stdout, stderr = ssh.exec_command("cp /root/routes/vacancies.py /root/routes/vacancies.py.backup_audio")
        stdout.read()
        print("‚úÖ –ë–µ–∫–∞–ø —Å–æ–∑–¥–∞–Ω")
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
        print("\n2Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ...")
        
        audio_endpoint = '''

@vacancies_bp.route('/api/vacancies/generate-audio', methods=['POST'])
def generate_audio():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ElevenLabs (–∫–∞–∫ –≤ –º–æ–¥—É–ª–µ —Ç—Ä–µ–Ω–¥–≤–æ—á–∏–Ω–≥–∞)"""
    try:
        data = request.get_json() or {}
        text = (data.get("text") or "").strip()
        
        if not text:
            return jsonify({"success": False, "message": "–¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω"}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è
        settings = Settings.query.filter_by(module_name='vacancies').first()
        if not settings:
            return jsonify({"success": False, "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}), 400
        
        additional = settings.get_additional_settings() or {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞ (–∫–∞–∫ –≤ —Ç—Ä–µ–Ω–¥–≤–æ—á–∏–Ω–≥–µ)
        voice_id = data.get("voice_id") or additional.get("default_voice_id") or "jP9L6ZC55cz5mmx4ZpCk"
        model_id = data.get("model_id") or additional.get("default_voice_model") or "eleven_flash_v2_5"
        stability = float(data.get("stability", 0.5))
        similarity_boost = float(data.get("similarity_boost", 0.5))
        
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
        api_keys = settings.get_api_keys() or {}
        elevenlabs_key = api_keys.get('elevenlabs_api_key')
        
        if not elevenlabs_key:
            return jsonify({
                "success": False, 
                "message": "ElevenLabs API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            }), 400
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ElevenLabs API
        try:
            from api.elevenlabs_simple import ElevenLabsSimple
            client = ElevenLabsSimple(elevenlabs_key)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            audio_url = client.generate_audio(
                text, 
                voice_id=voice_id, 
                model_id=model_id
            )
            
            if audio_url:
                return jsonify({
                    "success": True,
                    "audio_url": audio_url,
                    "voice_id": voice_id,
                    "model_id": model_id
                })
            else:
                return jsonify({
                    "success": False,
                    "message": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ElevenLabs"
                }), 500
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ ElevenLabs: {e}")
            return jsonify({
                "success": False,
                "message": f"–û—à–∏–±–∫–∞ ElevenLabs API: {str(e)}"
            }), 500
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
        return jsonify({
            "success": False,
            "message": f"–û—à–∏–±–∫–∞: {str(e)}"
        }), 500
'''
        
        # –î–æ–±–∞–≤–ª—è–µ–º endpoint –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        stdin, stdout, stderr = ssh.exec_command("echo '" + audio_endpoint + "' >> /root/routes/vacancies.py")
        stdout.read()
        print("‚úÖ Endpoint –¥–æ–±–∞–≤–ª–µ–Ω")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
        print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å...")
        stdin, stdout, stderr = ssh.exec_command("python3 -m py_compile /root/routes/vacancies.py")
        compile_errors = stderr.read().decode()
        
        if compile_errors:
            print("‚ùå –û—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏:")
            print(compile_errors)
            return False
        else:
            print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        
        # 4. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        print("\n4Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
        ssh.exec_command("pkill -f python.*app")
        time.sleep(3)
        ssh.exec_command("cd /root && nohup python3 app.py > server.log 2>&1 &")
        time.sleep(5)
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        print("\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä...")
        stdin, stdout, stderr = ssh.exec_command("ps aux | grep python.*app | grep -v grep")
        processes = stdout.read().decode()
        if processes:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        else:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
            return False
        
        # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π endpoint
        print("\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π endpoint...")
        test_payload = {
            "text": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π."
        }
        
        import json
        test_cmd = f"curl -X POST -H 'Content-Type: application/json' -d '{json.dumps(test_payload)}' http://localhost:5000/api/vacancies/generate-audio"
        stdin, stdout, stderr = ssh.exec_command(test_cmd)
        result = stdout.read().decode()
        
        if "success" in result:
            print("‚úÖ Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            return True
        else:
            print(f"‚ùå Endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result[:200]}")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    finally:
        ssh.close()

if __name__ == "__main__":
    success = add_audio_endpoint()
    if success:
        print("\n‚úÖ Endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ http://72.56.66.228/module/vacancies")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞")
