#!/usr/bin/env python3
"""
–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç OpenAI vs Direct parsing
"""

import sys
import os
import time
import json
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from routes.vacancies import parse_vacancies_direct

def compare_parsing_methods():
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    print("üß™ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π CSV
    csv_file = "/Users/mikhaileliseev/Desktop/–ö–ó GSR/test_data/test_vacancies_full.csv"
    with open(csv_file, "r", encoding="utf-8") as f:
        csv_data = f.read()
    
    print(f"üìÑ –†–∞–∑–º–µ—Ä CSV —Ñ–∞–π–ª–∞: {len(csv_data)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –¢–µ—Å—Ç 1: Direct parsing
    print("\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º Direct parsing...")
    start_time = time.time()
    direct_vacancies = parse_vacancies_direct(csv_data)
    direct_time = time.time() - start_time
    
    print(f"‚è±Ô∏è –í—Ä–µ–º—è Direct parsing: {direct_time:.3f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(direct_vacancies)}")
    print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {len(direct_vacancies)/direct_time:.1f} –≤–∞–∫–∞–Ω—Å–∏–π/—Å–µ–∫")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ Direct parsing
    direct_quality = analyze_quality(direct_vacancies, "Direct")
    
    # –¢–µ—Å—Ç 2: OpenAI parsing (—Å–∏–º—É–ª—è—Ü–∏—è)
    print("\nü§ñ –°–∏–º—É–ª–∏—Ä—É–µ–º OpenAI parsing...")
    start_time = time.time()
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É OpenAI API
    time.sleep(0.1)  # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API
    
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º "—Ä–µ–∑—É–ª—å—Ç–∞—Ç" OpenAI
    openai_vacancies = simulate_openai_parsing(csv_data)
    openai_time = time.time() - start_time
    
    print(f"‚è±Ô∏è –í—Ä–µ–º—è OpenAI parsing: {openai_time:.3f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(openai_vacancies)}")
    print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {len(openai_vacancies)/openai_time:.1f} –≤–∞–∫–∞–Ω—Å–∏–π/—Å–µ–∫")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ OpenAI parsing
    openai_quality = analyze_quality(openai_vacancies, "OpenAI")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("="*60)
    
    print(f"‚è±Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å:")
    print(f"  Direct:  {direct_time:.3f} —Å–µ–∫ ({len(direct_vacancies)/direct_time:.1f} –≤–∞–∫–∞–Ω—Å–∏–π/—Å–µ–∫)")
    print(f"  OpenAI:  {openai_time:.3f} —Å–µ–∫ ({len(openai_vacancies)/openai_time:.1f} –≤–∞–∫–∞–Ω—Å–∏–π/—Å–µ–∫)")
    print(f"  –†–∞–∑–Ω–∏—Ü–∞: {openai_time/direct_time:.1f}x –º–µ–¥–ª–µ–Ω–Ω–µ–µ OpenAI")
    
    print(f"\nüìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π:")
    print(f"  Direct:  {len(direct_vacancies)}")
    print(f"  OpenAI:  {len(openai_vacancies)}")
    print(f"  –†–∞–∑–Ω–∏—Ü–∞: {abs(len(direct_vacancies) - len(openai_vacancies))}")
    
    print(f"\nüéØ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:")
    print(f"  Direct:  {direct_quality:.1f}%")
    print(f"  OpenAI:  {openai_quality:.1f}%")
    print(f"  –†–∞–∑–Ω–∏—Ü–∞: {abs(direct_quality - openai_quality):.1f}%")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if direct_time < openai_time:
        print(f"‚úÖ Direct parsing –±—ã—Å—Ç—Ä–µ–µ –≤ {openai_time/direct_time:.1f} —Ä–∞–∑")
    
    if direct_quality >= openai_quality:
        print(f"‚úÖ Direct parsing –¥–∞–µ—Ç —Ç–∞–∫–æ–µ –∂–µ –∏–ª–∏ –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
    
    if len(direct_vacancies) >= len(openai_vacancies):
        print(f"‚úÖ Direct parsing –Ω–∞—Ö–æ–¥–∏—Ç —Å—Ç–æ–ª—å–∫–æ –∂–µ –∏–ª–∏ –±–æ–ª—å—à–µ –≤–∞–∫–∞–Ω—Å–∏–π")
    
    print(f"\nüèÜ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
    if direct_time < openai_time and direct_quality >= openai_quality:
        print(f"ü•á Direct parsing –ü–û–ë–ï–ñ–î–ê–ï–¢ –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º!")
        return True
    elif direct_quality >= openai_quality:
        print(f"ü•à Direct parsing –ª—É—á—à–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ")
        return True
    else:
        print(f"ü•â OpenAI parsing –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        return False

def analyze_quality(vacancies, method_name):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö"""
    if not vacancies:
        return 0.0
    
    valid_count = 0
    for vacancy in vacancies:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (vacancy.get('position', '').strip() and 
            vacancy.get('salary', '').strip() and 
            vacancy.get('company', '').strip()):
            valid_count += 1
    
    quality = (valid_count / len(vacancies)) * 100
    print(f"üìà –ö–∞—á–µ—Å—Ç–≤–æ {method_name}: {quality:.1f}% ({valid_count}/{len(vacancies)})")
    return quality

def simulate_openai_parsing(csv_data):
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç OpenAI parsing"""
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º "—É–ª—É—á—à–µ–Ω–Ω—ã–π" —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    # –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –¥–∞—Ç—å OpenAI —Å –µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–º —á–µ—Ä–µ–∑ Direct
    direct_vacancies = parse_vacancies_direct(csv_data)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º "—É–ª—É—á—à–µ–Ω–∏—è" OpenAI
    openai_vacancies = []
    for vacancy in direct_vacancies:
        # OpenAI –º–æ–∂–µ—Ç "—É–ª—É—á—à–∏—Ç—å" –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è
        improved_vacancy = vacancy.copy()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è
        if '—Ä—É–±/—á–∞—Å' in vacancy.get('salary', ''):
            # OpenAI –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
            improved_vacancy['salary'] = vacancy['salary'] + ' (–ø–æ—á–∞—Å–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞)'
        
        if vacancy.get('position', '').strip():
            # OpenAI –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
            improved_vacancy['position'] = vacancy['position'].strip().title()
        
        openai_vacancies.append(improved_vacancy)
    
    return openai_vacancies

def run_comparison():
    """–ó–∞–ø—É—Å–∫ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
    print("="*60)
    
    try:
        success = compare_parsing_methods()
        
        print("\n" + "="*60)
        if success:
            print("üéâ –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
            print("üìã –í—ã–≤–æ–¥—ã:")
            print("  ‚Ä¢ Direct parsing –±—ã—Å—Ç—Ä–µ–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ")
            print("  ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º–æ")
            print("  ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Direct parsing –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")
        else:
            print("ü§î –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
            print("üìã –í—ã–≤–æ–¥—ã:")
            print("  ‚Ä¢ OpenAI parsing –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            print("  ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OpenAI –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = run_comparison()
    exit(0 if success else 1)
