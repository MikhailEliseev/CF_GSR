#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ElevenLabs
"""

import paramiko
import time

SERVER_HOST = "72.56.66.228"
SERVER_USER = "root"
SERVER_PASSWORD = "g2D,RytdQoSAYv"

def simple_fix():
    """–ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ElevenLabs"""
    print("üîß –ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ElevenLabs...")
    
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(SERVER_HOST, username=SERVER_USER, password=SERVER_PASSWORD)
    
    try:
        # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º espeak
        print("\n1Ô∏è‚É£ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º espeak...")
        stdin, stdout, stderr = ssh.exec_command("apt-get update && apt-get install -y espeak ffmpeg")
        result = stdout.read().decode()
        print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π fallback endpoint
        print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º fallback endpoint...")
        
        fallback_endpoint = '''
@vacancies_bp.route('/api/vacancies/generate-audio-fallback', methods=['POST'])
def generate_audio_fallback():
    """Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ espeak"""
    try:
        data = request.get_json()
        text = data.get('text', '')
        
        if not text:
            return jsonify({"success": False, "error": "–¢–µ–∫—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω"}), 400
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import tempfile
        import subprocess
        import os
        
        temp_wav = tempfile.mktemp(suffix=".wav")
        temp_mp3 = tempfile.mktemp(suffix=".mp3")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ espeak
        cmd = ["espeak", "-s", "150", "-v", "ru", "-w", temp_wav, text]
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0 and os.path.exists(temp_wav):
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3
            convert_cmd = ["ffmpeg", "-i", temp_wav, "-acodec", "mp3", "-y", temp_mp3]
            convert_result = subprocess.run(convert_cmd, capture_output=True, text=True)
            
            if convert_result.returncode == 0:
                # –ß–∏—Ç–∞–µ–º MP3 —Ñ–∞–π–ª
                with open(temp_mp3, 'rb') as f:
                    audio_data = f.read()
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                os.unlink(temp_wav)
                os.unlink(temp_mp3)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º base64
                import base64
                audio_base64 = base64.b64encode(audio_data).decode()
                
                return jsonify({
                    "success": True,
                    "audio_data": audio_base64,
                    "method": "espeak_fallback"
                })
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º WAV –µ—Å–ª–∏ MP3 –Ω–µ –ø–æ–ª—É—á–∏–ª—Å—è
                with open(temp_wav, 'rb') as f:
                    audio_data = f.read()
                
                os.unlink(temp_wav)
                if os.path.exists(temp_mp3):
                    os.unlink(temp_mp3)
                
                import base64
                audio_base64 = base64.b64encode(audio_data).decode()
                
                return jsonify({
                    "success": True,
                    "audio_data": audio_base64,
                    "method": "espeak_wav"
                })
        else:
            return jsonify({
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ espeak: {result.stderr}"
            }), 500
            
    except Exception as e:
        return jsonify({
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ fallback: {str(e)}"
        }), 500
'''
        
        # –î–æ–±–∞–≤–ª—è–µ–º endpoint –≤ routes/vacancies.py
        stdin, stdout, stderr = ssh.exec_command("echo '\n" + fallback_endpoint + "' >> /root/routes/vacancies.py")
        stdout.read()
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω fallback endpoint")
        
        # 3. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        print("\n3Ô∏è‚É£ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
        ssh.exec_command("pkill -f python.*app")
        time.sleep(2)
        ssh.exec_command("cd /root && nohup python3 app.py > server.log 2>&1 &")
        time.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
        stdin, stdout, stderr = ssh.exec_command("ps aux | grep python.*app | grep -v grep")
        processes = stdout.read().decode()
        if processes:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        else:
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback...")
        test_payload = {
            "text": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç fallback –∞—É–¥–∏–æ."
        }
        
        import json
        test_cmd = f"curl -X POST -H 'Content-Type: application/json' -d '{json.dumps(test_payload)}' http://localhost:5000/api/vacancies/generate-audio-fallback"
        stdin, stdout, stderr = ssh.exec_command(test_cmd)
        result = stdout.read().decode()
        
        if "success" in result and "audio_data" in result:
            print("‚úÖ Fallback —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            print(f"‚ùå Fallback –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result[:200]}")
        
        print("\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        ssh.close()

if __name__ == "__main__":
    simple_fix()
