"""Blueprint —Å —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏ –º–æ–¥—É–ª—è —Ç—Ä–µ–Ω–¥–≤–æ—Ç—á–∏–Ω–≥–∞."""
from __future__ import annotations

from flask import Blueprint, jsonify, request, render_template
from models import db, Settings, Competitors
from modules.module1_trends import TrendModule
from services import AssemblyService
from typing import List, Dict, Any
from concurrent.futures import ThreadPoolExecutor
import threading
import time
import os
import uuid
from threading import Thread

trends_bp = Blueprint('trends', __name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á
task_status = {}
task_lock = threading.Lock()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á Submagic
submagic_tasks = {}
submagic_lock = threading.Lock()


def _get_trends_settings() -> Settings | None:
    return Settings.query.filter_by(module_name='trends').first()


@trends_bp.route('/api/trends/test-video-url', methods=['GET'])
def get_test_video_url():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ –¥–ª—è Submagic"""
    import os
    import glob
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ HeyGen
    video_dir = '/root/static/video'
    if os.path.exists(video_dir):
        video_files = glob.glob(os.path.join(video_dir, '*.mp4'))
        if video_files:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏, –±–µ—Ä–µ–º —Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ
            latest_video = max(video_files, key=os.path.getmtime)
            video_filename = os.path.basename(latest_video)
            video_url = f'http://72.56.66.228/static/video/{video_filename}'
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            file_size = os.path.getsize(latest_video)
            file_size_mb = round(file_size / (1024 * 1024), 1)

            return jsonify({
                'success': True,
                'video_id': f'test_video_{video_filename}',
                'video_url': video_url,
                'duration': 60.0,
                'file_size_mb': file_size_mb,
                'message': f'–†–µ–∞–ª—å–Ω–æ–µ HeyGen –≤–∏–¥–µ–æ: {video_filename} ({file_size_mb}MB)'
            })
    
    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    return jsonify({
        'success': False,
        'message': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    }), 404


@trends_bp.route('/test-submagic')
def test_submagic_page():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è Submagic API"""
    return render_template('test_submagic.html')


@trends_bp.route('/api/trends/upload-video', methods=['POST'])
def upload_video():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    try:
        if 'video' not in request.files:
            return jsonify({'success': False, 'message': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
        
        file = request.files['video']
        if file.filename == '':
            return jsonify({'success': False, 'message': '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if not file.content_type.startswith('video/'):
            return jsonify({'success': False, 'message': '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 100MB)
        file.seek(0, 2)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        file_size = file.tell()
        file.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ
        
        if file_size > 100 * 1024 * 1024:  # 100MB
            return jsonify({'success': False, 'message': '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 100MB.'}), 400
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        import uuid
        import os
        from werkzeug.utils import secure_filename
        
        filename = secure_filename(file.filename)
        name, ext = os.path.splitext(filename)
        unique_filename = f"{name}_{uuid.uuid4().hex[:8]}{ext}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        upload_dir = '/root/static/video'
        os.makedirs(upload_dir, exist_ok=True)
        
        file_path = os.path.join(upload_dir, unique_filename)
        file.save(file_path)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
        video_url = f'http://72.56.66.228/static/video/{unique_filename}'
        
        return jsonify({
            'success': True,
            'filename': unique_filename,
            'video_url': video_url,
            'file_size_mb': round(file_size / (1024 * 1024), 1),
            'message': f'–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {unique_filename}'
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")
        return jsonify({
            'success': False, 
            'message': f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}'
        }), 500


@trends_bp.route('/api/trends/add-captions', methods=['POST'])
def add_captions_to_video():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∫ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Submagic (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"""
    try:
        data = request.get_json() or {}
        video_url = data.get('video_url')
        settings = data.get('settings', {})
        
        if not video_url:
            return jsonify({'success': False, 'message': 'URL –≤–∏–¥–µ–æ –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
        
        print(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∫ –≤–∏–¥–µ–æ: {video_url}")
        print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {settings}")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π task_id
        task_id = f"submagic_{uuid.uuid4().hex[:8]}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        with submagic_lock:
            submagic_tasks[task_id] = {
                'status': 'processing',
                'progress': 0,
                'video_url': video_url,
                'settings': settings,
                'result_url': None,
                'error': None,
                'start_time': time.time()
            }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
        thread = Thread(target=process_submagic_async, args=(task_id, video_url, settings))
        thread.daemon = True
        thread.start()
        
        print(f"üöÄ –ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ Submagic: {task_id}")
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º task_id –∏ –∏—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ
        return jsonify({
            'success': True,
            'task_id': task_id,
            'video_url': video_url,  # –ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ HeyGen
            'message': '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ'
        })
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return jsonify({
            'success': False, 
            'message': f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}'
        })


def process_submagic_async(task_id, video_url, settings):
    """–§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Submagic"""
    try:
        print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É Submagic –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
        print(f"üìπ URL –≤–∏–¥–µ–æ: {video_url}")
        print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {settings}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        with submagic_lock:
            submagic_tasks[task_id]['progress'] = 10
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        from app import create_app
        app, socketio = create_app()
        with app.app_context():
            print(f"üîß –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
            settings_db = Settings.query.filter_by(module_name='trends').first()
            if not settings_db:
                raise Exception('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
            
            api_keys = settings_db.get_api_keys()
            submagic_key = api_keys.get('submagic_api_key')
            if not submagic_key:
                raise Exception('Submagic API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
            
            print(f"üîë Submagic API –∫–ª—é—á: {submagic_key[:20]}...")
            
            # –°–æ–∑–¥–∞–µ–º SubmagicService
            from services.submagic_service import SubmagicService
            submagic_service = SubmagicService(submagic_key)
            print(f"‚úÖ SubmagicService —Å–æ–∑–¥–∞–Ω")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            with submagic_lock:
                submagic_tasks[task_id]['progress'] = 20
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ —Å callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            def progress_callback(progress):
                with submagic_lock:
                    submagic_tasks[task_id]['progress'] = 20 + int(progress * 0.7)  # 20-90%
                print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å Submagic: {progress}%")
            
            print(f"üé¨ –í—ã–∑—ã–≤–∞–µ–º submagic_service.add_captions...")
            processed_video_path = submagic_service.add_captions(video_url, settings, progress_callback)
            print(f"‚úÖ Submagic –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {processed_video_path}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            with submagic_lock:
                submagic_tasks[task_id]['progress'] = 90
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
            result_url = f"/static/video/{os.path.basename(processed_video_path)}"
            print(f"üîó –†–µ–∑—É–ª—å—Ç–∞—Ç URL: {result_url}")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
            with submagic_lock:
                submagic_tasks[task_id].update({
                    'status': 'completed',
                    'progress': 100,
                    'result_url': result_url
                })
            
            print(f"‚úÖ –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Submagic –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result_url}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ Submagic: {e}")
        import traceback
        print(f"üìã Traceback: {traceback.format_exc()}")
        with submagic_lock:
            submagic_tasks[task_id].update({
                'status': 'error',
                'error': str(e)
            })


@trends_bp.route('/api/trends/submagic-status/<task_id>', methods=['GET'])
def get_submagic_status(task_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Submagic"""
    with submagic_lock:
        task = submagic_tasks.get(task_id)
    
    if not task:
        return jsonify({'success': False, 'message': '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}), 404
    
    return jsonify({
        'success': True,
        'status': task['status'],  # processing, completed, error
        'progress': task['progress'],  # 0-100
        'video_url': task.get('result_url'),
        'error': task.get('error'),
        'elapsed_time': int(time.time() - task.get('start_time', time.time()))
    })


@trends_bp.route('/api/trends/submagic-templates', methods=['GET'])
def get_submagic_templates():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ Submagic"""
    try:
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Flask
        from flask import current_app
        with current_app.app_context():
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            settings = Settings.query.filter_by(module_name='trends').first()
            if not settings:
                return jsonify({'success': False, 'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}), 500
            
            api_keys = settings.get_api_keys()
            submagic_key = api_keys.get('submagic_api_key')
            if not submagic_key:
                return jsonify({'success': False, 'message': 'Submagic API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}), 500
            
            # –°–æ–∑–¥–∞–µ–º SubmagicService –Ω–∞–ø—Ä—è–º—É—é
            from services.submagic_service import SubmagicService
            submagic_service = SubmagicService(submagic_key)
            
            templates = submagic_service.get_templates()
            
            return jsonify({'success': True, 'templates': templates})
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {str(e)}'}), 500


@trends_bp.route('/api/trends/submagic-languages', methods=['GET'])
def get_submagic_languages():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —è–∑—ã–∫–æ–≤ Submagic"""
    try:
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Flask
        from flask import current_app
        with current_app.app_context():
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            settings = Settings.query.filter_by(module_name='trends').first()
            if not settings:
                return jsonify({'success': False, 'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}), 500
            
            api_keys = settings.get_api_keys()
            submagic_key = api_keys.get('submagic_api_key')
            if not submagic_key:
                return jsonify({'success': False, 'message': 'Submagic API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}), 500
            
            # –°–æ–∑–¥–∞–µ–º SubmagicService –Ω–∞–ø—Ä—è–º—É—é
            from services.submagic_service import SubmagicService
            submagic_service = SubmagicService(submagic_key)
            
            languages = submagic_service.get_languages()
            
            return jsonify({'success': True, 'languages': languages})
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤: {e}")
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤: {str(e)}'}), 500


@trends_bp.route('/api/trends/start-step-generation', methods=['POST'])
def start_step_generation():
    """–ó–∞–ø—É—Å–∫ –ø–æ—à–∞–≥–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    try:
        data = request.get_json() or {}
        step = data.get('step')
        task_id = data.get('task_id')
        
        if not step or not task_id:
            return jsonify({'success': False, 'message': 'Step and task_id required'}), 400
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ
        from celery_app import celery_app
        task = celery_app.send_task(
            'modules.module1_trends.TrendModule.start_step_by_step_generation',
            args=[task_id, step],
            kwargs=data.get('kwargs', {})
        )
        
        return jsonify({
            'success': True,
            'task_id': task.id,
            'message': f'–®–∞–≥ {step} –∑–∞–ø—É—â–µ–Ω'
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —à–∞–≥–∞: {e}")
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —à–∞–≥–∞: {str(e)}'}), 500


@trends_bp.route('/api/trends/collect-reels', methods=['POST'])
def collect_reels():
    """–°–±–æ—Ä —Ä–∏–ª—Å–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Apify"""
    data = request.get_json() or {}
    competitors = data.get('competitors', [])
    count = int(data.get('count', 10) or 10)

    if not competitors:
        return jsonify({'success': False, 'message': '–ù–µ –≤—ã–±—Ä–∞–Ω—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –¥–ª—è —Å–±–æ—Ä–∞'}), 400

    module = TrendModule()
    reels = module.apify_service.fetch_reels(competitors, count)

    if not reels:
        return jsonify({'success': False, 'message': 'Apify –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.'}), 400

    viral = [post for post in reels if post.get('is_viral') or (post.get('views_count') or 0) > 30000]

    return jsonify({
        'success': True,
        'reels': reels,
        'total_count': len(reels),
        'viral_count': len(viral)
    })


@trends_bp.route('/api/trends/transcribe', methods=['POST'])
def transcribe_reel():
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ AssemblyAI"""
    data = request.get_json() or {}
    video_url = data.get('video_url')

    if not video_url:
        return jsonify({'success': False, 'message': 'URL –≤–∏–¥–µ–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω'}), 400

    settings = _get_trends_settings()
    api_keys = settings.get_api_keys() if settings else {}
    assembly_service = AssemblyService(api_keys.get('assemblyai_api_key'))
    transcript = assembly_service.transcribe(video_url)

    return jsonify({'success': True, 'transcript': transcript})


@trends_bp.route('/api/trends/rewrite', methods=['POST'])
def rewrite_text():
    """–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI"""
    data = request.get_json() or {}
    transcript = (data.get('transcript') or '').strip()

    if not transcript:
        return jsonify({'success': False, 'message': '–¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω'}), 400

    module = TrendModule()
    rewritten = module.openai_service.rewrite_transcript(
        transcript,
        master_prompt=module.settings.master_prompt
    )

    return jsonify({'success': True, 'rewritten_text': rewritten})


@trends_bp.route('/api/trends/generate-audio', methods=['POST'])
def generate_audio():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ElevenLabs"""
    data = request.get_json() or {}
    text = (data.get('text') or '').strip()
    if not text:
        return jsonify({'success': False, 'message': '–¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω'}), 400

    module = TrendModule()
    additional = module.settings.get_additional_settings() or {}

    voice_id = data.get('voice_id') or additional.get('default_voice_id') or 'demo_voice'
    model_id = data.get('model_id') or additional.get('default_voice_model')

    audio_url = module.elevenlabs_service.generate_audio(text, voice_id=voice_id, model_id=model_id)

    payload = {'success': True, 'audio_url': audio_url}
    if not module.elevenlabs_service.api_key:
        payload['warning'] = 'ElevenLabs API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ-–∞—É–¥–∏–æ'
    return jsonify(payload)


@trends_bp.route('/api/trends/generate-video', methods=['POST'])
def generate_video():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ HeyGen"""
    data = request.get_json() or {}
    audio_url = (data.get('audio_url') or '').strip()
    avatar_id = data.get('avatar_id') or 'demo_avatar'

    if not audio_url:
        return jsonify({'success': False, 'message': '–ê—É–¥–∏–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ'}), 400

    module = TrendModule()
    video_info = module.heygen_service.generate_video(audio_url, avatar_id)

    payload: Dict[str, Any] = {'success': True}
    payload.update(video_info if isinstance(video_info, dict) else {'video_url': video_info})

    if not module.heygen_service.api_key:
        payload['warning'] = 'HeyGen API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ-–≤–∏–¥–µ–æ'
    return jsonify(payload)


@trends_bp.route('/api/trends/voices', methods=['GET'])
def list_voices():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤"""
    module = TrendModule()
    voices = module.elevenlabs_service.list_voices() if module.elevenlabs_service else []
    return jsonify({'success': True, 'voices': voices})


@trends_bp.route('/api/trends/avatars', methods=['GET'])
def list_avatars():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤"""
    module = TrendModule()
    avatars = module.heygen_service.list_avatars() if module.heygen_service else []
    return jsonify({'success': True, 'avatars': avatars})


@trends_bp.route('/api/competitors', methods=['GET', 'POST', 'DELETE'])
def manage_competitors():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏"""
    if request.method == 'GET':
        competitors = Competitors.query.filter_by(is_active=True).all()
        return jsonify([
            {
                'id': c.id,
                'username': c.username,
                'platform': c.platform,
                'last_checked': c.last_checked.isoformat() if c.last_checked else None
            }
            for c in competitors
        ])

    if request.method == 'POST':
        data = request.get_json() or {}
        username = (data.get('username') or '').strip()
        platform = data.get('platform', 'instagram')
        if not username:
            return jsonify({'success': False, 'message': 'Username is required'}), 400

        competitor = Competitors(username=username, platform=platform)
        db.session.add(competitor)
        db.session.commit()
        return jsonify({'success': True, 'message': '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω'})

    competitor_id = request.args.get('id')
    competitor = Competitors.query.get(competitor_id)
    if competitor:
        competitor.is_active = False
        db.session.commit()
        return jsonify({'success': True, 'message': '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç —É–¥–∞–ª–µ–Ω'})
    return jsonify({'success': False, 'message': '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
