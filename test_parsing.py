import csv
from io import StringIO
import os

def parse_vacancies_direct(csv_data):
    """–ü—Ä—è–º–æ–π –ø–∞—Ä—Å–∏–Ω–≥ CSV —Å –ø—Ä–æ–ø—É—Å–∫–æ–º –∞–∫—Ü–∏–π –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
    import csv
    from io import StringIO
    
    try:
        reader = csv.reader(StringIO(csv_data))
        vacancies = []
        skipped_rows = 0
        
        print(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ CSV, —Ä–∞–∑–º–µ—Ä: {len(csv_data)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        for i, row in enumerate(reader):
            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å—Ç—Ä–æ–∫–∏: –∞–∫—Ü–∏–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
                if i == 0:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫—Ü–∏–∏
                    skipped_rows += 1
                    print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É {i}: –∞–∫—Ü–∏–∏")
                    continue
                if i == 1:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                    skipped_rows += 1
                    print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É {i}: –∑–∞–≥–æ–ª–æ–≤–∫–∏")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–∫–∞–Ω—Å–∏—è, –∞ –Ω–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                if not row[1].strip():  # –ù–µ—Ç –æ–±—ä–µ–∫—Ç–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue
                if '–î–æ–ª–∂–Ω–æ—Å—Ç—å' in row[0] or '–ü–æ–ª' in row[0]:  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
                vacancy = {
                    'position': row[1].strip() if len(row) > 1 else '',  # –ö–æ–ª–æ–Ω–∫–∞ B - –û–±—ä–µ–∫—Ç (–¥–æ–ª–∂–Ω–æ—Å—Ç—å)
                    'location': row[1].strip() if len(row) > 1 else '',  # –ö–æ–ª–æ–Ω–∫–∞ B - –û–±—ä–µ–∫—Ç
                    'salary': row[3].strip() if len(row) > 3 else '',    # –ö–æ–ª–æ–Ω–∫–∞ D - –û–ø–ª–∞—Ç–∞
                    'conditions': row[4].strip() if len(row) > 4 else '', # –ö–æ–ª–æ–Ω–∫–∞ E - –£—Å–ª–æ–≤–∏—è
                    'requirements': row[5].strip() if len(row) > 5 else '', # –ö–æ–ª–æ–Ω–∫–∞ F - –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
                    'positions_needed': row[6].strip() if len(row) > 6 else '', # –ö–æ–ª–æ–Ω–∫–∞ G - –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å
                    'manager': row[7].strip() if len(row) > 7 else '',   # –ö–æ–ª–æ–Ω–∫–∞ H - –ú–µ–Ω–µ–¥–∂–µ—Ä
                    'company': row[8].strip() if len(row) > 8 else '',   # –ö–æ–ª–æ–Ω–∫–∞ I - –Æ—Ä.–ª–∏—Ü–æ
                    'benefits': row[9].strip() if len(row) > 9 else ''   # –ö–æ–ª–æ–Ω–∫–∞ J - –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
                }
                vacancies.append(vacancy)
                print(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è {len(vacancies)}: {vacancy['location'][:30]}...")
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
                continue
        
        print(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å—Ç—Ä–æ–∫: {skipped_rows}")
        print(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(vacancies)}")
        return vacancies
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV: {e}")
        return []

if __name__ == '__main__':
    script_dir = os.path.dirname(__file__)
    csv_file_path = os.path.join(script_dir, 'test_data', 'real_vacancies.csv')
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–π...")
    
    with open(csv_file_path, 'r', encoding='utf-8') as f:
        csv_data = f.read()
    
    result = parse_vacancies_direct(csv_data)
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"–ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(result)}")
    
    if result:
        print(f"\nüìã –ü–ï–†–í–´–ï 3 –í–ê–ö–ê–ù–°–ò–ò:")
        for i, v in enumerate(result[:3]):
            print(f"\n--- –í–∞–∫–∞–Ω—Å–∏—è {i+1} ---")
            print(f"  –î–æ–ª–∂–Ω–æ—Å—Ç—å: {v['position']}")
            print(f"  –û–±—ä–µ–∫—Ç: {v['location']}")
            print(f"  –û–ø–ª–∞—Ç–∞: {v['salary'][:50]}...")
            print(f"  –£—Å–ª–æ–≤–∏—è: {v['conditions'][:50]}...")
            print(f"  –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {v['requirements'][:50]}...")
            print(f"  –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å: {v['positions_needed']}")
            print(f"  –ú–µ–Ω–µ–¥–∂–µ—Ä: {v['manager']}")
            print(f"  –ö–æ–º–ø–∞–Ω–∏—è: {v['company']}")
            print(f"  –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: {v['benefits'][:50]}...")
    
    print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")