#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –ö–æ–Ω—Ç–µ–Ω—Ç –ó–∞–≤–æ–¥–∞ –±–µ–∑ Redis/Celery
–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
"""

from flask import Flask, render_template, request, jsonify, redirect, url_for, flash
from models import db, Settings, Competitors, TaskStatus, VideoGeneration, ExpertTopics
from config import Config
import uuid
from datetime import datetime
import json
import os

def create_simple_app():
    app = Flask(__name__)
    app.config.from_object(Config)
    
    # Initialize extensions
    db.init_app(app)
    
    # Create tables and default settings
    with app.app_context():
        db.create_all()
        
        # Initialize default settings for modules if they don't exist
        modules = ['trends', 'vacancies', 'experts']
        for module_name in modules:
            existing = Settings.query.filter_by(module_name=module_name).first()
            if not existing:
                settings = Settings(
                    module_name=module_name,
                    master_prompt="",
                    api_keys="{}",
                    additional_settings="{}"
                )
                db.session.add(settings)
        db.session.commit()
    
    @app.route('/')
    def index():
        return render_template('index.html')
    
    @app.route('/module/<module_name>')
    def module_page(module_name):
        if module_name not in ['trends', 'vacancies', 'experts']:
            flash('–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('index'))
        
        settings = Settings.query.filter_by(module_name=module_name).first()
        if module_name == 'trends':
            return render_template('module_trends_new.html', settings=settings)
        else:
            return render_template(f'module_{module_name}.html', settings=settings)
    
    @app.route('/settings/<module_name>')
    def settings_page(module_name):
        if module_name not in ['trends', 'vacancies', 'experts']:
            flash('–ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('index'))
        
        settings = Settings.query.filter_by(module_name=module_name).first()
        competitors = []
        if module_name == 'trends':
            competitors = Competitors.query.filter_by(is_active=True).all()
        
        return render_template('settings.html', 
                             module_name=module_name, 
                             settings=settings,
                             competitors=competitors)
    
    @app.route('/api/settings/<module_name>', methods=['GET', 'POST'])
    def module_settings(module_name):
        try:
            settings = Settings.query.filter_by(module_name=module_name).first()

            if request.method == 'GET':
                if not settings:
                    return jsonify({'success': True, 'api_keys': {}, 'openai_assistant_id': '', 'additional_settings': {}})
                return jsonify({
                    'success': True,
                    'api_keys': settings.get_api_keys(),
                    'openai_assistant_id': settings.openai_assistant_id,
                    'additional_settings': settings.get_additional_settings()
                })

            # POST ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            data = request.get_json() or {}
            if not settings:
                settings = Settings(module_name=module_name)
                db.session.add(settings)

            settings.openai_assistant_id = data.get('openai_assistant_id', '')
            settings.master_prompt = data.get('master_prompt', '')
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º API –∫–ª—é—á–∏
            api_keys = {}
            for key in ['openai_api_key', 'elevenlabs_api_key', 'heygen_api_key', 'apify_api_key', 'assemblyai_api_key']:
                if key in data:
                    api_keys[key] = data[key]
            settings.set_api_keys(api_keys)
            
            settings.set_additional_settings(data.get('additional_settings', {}))

            db.session.commit()
            return jsonify({'success': True, 'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'})
        except Exception as e:
            return jsonify({'success': False, 'message': str(e)}), 500
    
    @app.route('/api/competitors', methods=['GET', 'POST', 'DELETE'])
    def manage_competitors():
        if request.method == 'GET':
            competitors = Competitors.query.filter_by(is_active=True).all()
            return jsonify([{
                'id': c.id,
                'username': c.username,
                'platform': c.platform,
                'last_checked': c.last_checked.isoformat() if c.last_checked else None
            } for c in competitors])
        
        elif request.method == 'POST':
            data = request.get_json()
            competitor = Competitors(
                username=data['username'],
                platform=data.get('platform', 'instagram')
            )
            db.session.add(competitor)
            db.session.commit()
            return jsonify({'success': True, 'message': '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω'})
        
        elif request.method == 'DELETE':
            competitor_id = request.args.get('id')
            competitor = Competitors.query.get(competitor_id)
            if competitor:
                competitor.is_active = False
                db.session.commit()
                return jsonify({'success': True, 'message': '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç —É–¥–∞–ª–µ–Ω'})
            return jsonify({'success': False, 'message': '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
    
    # –†–ï–ê–õ–¨–ù–´–ï API –¥–ª—è –≥–æ–ª–æ—Å–æ–≤ –∏ –∞–≤–∞—Ç–∞—Ä–æ–≤
    @app.route('/api/module/<module_name>/voices')
    def get_voices(module_name):
        try:
            from api.elevenlabs_client import ElevenLabsClient
            
            settings = Settings.query.filter_by(module_name=module_name).first()
            if not settings:
                return jsonify({'error': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}), 400
            
            api_keys = settings.get_api_keys()
            elevenlabs_key = api_keys.get('elevenlabs_api_key')
            
            if not elevenlabs_key:
                return jsonify({'error': 'ElevenLabs API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}), 400
            
            elevenlabs_client = ElevenLabsClient(elevenlabs_key)
            voices = elevenlabs_client.get_available_voices()
            
            if not voices:
                return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤'}), 500
            
            return jsonify(voices)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤: {e}")
            return jsonify({'error': f'–û—à–∏–±–∫–∞ ElevenLabs API: {str(e)}'}), 500
    
    @app.route('/api/module/<module_name>/avatars')
    def get_avatars(module_name):
        try:
            from api.heygen_client import HeyGenClient
            
            settings = Settings.query.filter_by(module_name=module_name).first()
            if not settings:
                return jsonify({'error': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}), 400
            
            api_keys = settings.get_api_keys()
            heygen_key = api_keys.get('heygen_api_key')
            
            if not heygen_key:
                return jsonify({'error': 'HeyGen API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}), 400
            
            heygen_client = HeyGenClient(heygen_key)
            avatars = heygen_client.get_available_avatars()
            
            if not avatars:
                return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤–∞—Ç–∞—Ä–æ–≤'}), 500
            
            return jsonify(avatars)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤: {e}")
            return jsonify({'error': f'–û—à–∏–±–∫–∞ HeyGen API: {str(e)}'}), 500
    
    # –†–ï–ê–õ–¨–ù–´–ï API –¥–ª—è —Ç—Ä–µ–Ω–¥–≤–æ—Ç—á–∏–Ω–≥–∞ —Å Apify
    @app.route('/api/trends/collect-reels', methods=['POST'])
    def collect_reels():
        """–†–ï–ê–õ–¨–ù–´–ô —Å–±–æ—Ä —Ä–∏–ª—Å–æ–≤ —á–µ—Ä–µ–∑ Apify"""
        try:
            from api.apify_client import ApifyInstagramClient
            
            data = request.get_json()
            competitors = data.get('competitors', [])
            count = data.get('count', 20)
            
            if not competitors:
                return jsonify({'success': False, 'message': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤'}), 400
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–Ω–¥–≤–æ—Ç—á–∏–Ω–≥–∞
            settings = Settings.query.filter_by(module_name='trends').first()
            if not settings:
                return jsonify({'success': False, 'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–Ω–¥–≤–æ—Ç—á–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}), 400
            
            api_keys = settings.get_api_keys()
            apify_key = api_keys.get('apify_api_key')
            
            if not apify_key:
                error_msg = """
                üîë APIFY API –ö–õ–Æ–ß –ù–ï –ù–ê–°–¢–†–û–ï–ù
                
                üìã –ö–ê–ö –ò–°–ü–†–ê–í–ò–¢–¨:
                1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è (–∫–Ω–æ–ø–∫–∞ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
                2. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à Apify API –∫–ª—é—á 
                3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞
                
                üîó –ü–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á: https://console.apify.com/account/integrations
                """
                return jsonify({'success': False, 'message': error_msg.strip()}), 400
            
            print(f"üîç –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ Apify –¥–ª—è {len(competitors)} –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...")
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –†–ï–ê–õ–¨–ù–´–ï –í–ò–î–ï–û —á–µ—Ä–µ–∑ Apify
            try:
                from api.apify_client import ApifyInstagramClient
                apify_client = ApifyInstagramClient(apify_key)
                viral_posts = apify_client.get_trending_content(competitors, count=count, days_back=7)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –í–°–ï –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –æ—Ç Apify
                if viral_posts and len(viral_posts) > 0:
                    print(f"‚úÖ Apify –≤–µ—Ä–Ω—É–ª {len(viral_posts)} –ø–æ—Å—Ç–æ–≤ –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤")
                    print(f"üìä –ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç: {list(viral_posts[0].keys()) if viral_posts else 'None'}")
                    print(f"üéØ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã: {competitors}")
                else:
                    raise Exception("Apify –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    
            except Exception as e:
                print(f"‚ùå Apify –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –†–ï–ê–õ–¨–ù–´–ï —Ä–∏–ª—Å—ã: {e}")
                
                # –ù–ò–ö–ê–ö–ò–• —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö! –¢–æ–ª—å–∫–æ —á–µ—Ç–∫–∞—è –æ—à–∏–±–∫–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
                error_message = f"""
                üö® –ù–ï –£–î–ê–õ–û–°–¨ –ü–û–õ–£–ß–ò–¢–¨ –†–ï–ê–õ–¨–ù–´–ï –†–ò–õ–°–´ –ò–ó INSTAGRAM

                –ü—Ä–æ–±–ª–µ–º–∞: {str(e)}

                ‚úÖ –ü–†–û–í–ï–†–¨–¢–ï:
                1. Apify API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∏–π)
                2. –ë–∞–ª–∞–Ω—Å Apify –∞–∫–∫–∞—É–Ω—Ç–∞ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞)
                3. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å usernames –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (@rem.vac, @msk.job)
                4. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Instagram –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã)

                üîß –ö–ê–ö –ò–°–ü–†–ê–í–ò–¢–¨:
                ‚Ä¢ –í–æ–π–¥–∏—Ç–µ –≤ https://console.apify.com/
                ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –±–∞–ª–∞–Ω—Å
                ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–∫—Ç–æ—Ä –≤—Ä—É—á–Ω—É—é
                ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø—É–±–ª–∏—á–Ω—ã–µ

                ‚ö†Ô∏è –ë–ï–ó –†–ê–ë–û–ß–ï–ì–û APIFY API –°–ò–°–¢–ï–ú–ê –ù–ï –ú–û–ñ–ï–¢ –ü–û–õ–£–ß–ò–¢–¨ –†–ï–ê–õ–¨–ù–´–ï –†–ò–õ–°–´
                """
                
                return jsonify({
                    'success': False, 
                    'message': error_message.strip()
                }), 400
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
            for competitor_username in competitors:
                competitor = Competitors.query.filter_by(username=competitor_username).first()
                if competitor:
                    competitor.last_checked = datetime.utcnow()
            
            db.session.commit()
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(viral_posts)} –ø–æ—Å—Ç–æ–≤ –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤")
            
            return jsonify({
                'success': True,
                'reels': viral_posts,
                'total_count': len(viral_posts),
                'viral_count': len([r for r in viral_posts if r['is_viral']])
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Apify: {e}")
            import traceback
            traceback.print_exc()
            return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ API: {str(e)}'}), 500
    
    @app.route('/api/trends/transcribe', methods=['POST'])
    def transcribe_reel():
        """–†–ï–ê–õ–¨–ù–ê–Ø —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —á–µ—Ä–µ–∑ AssemblyAI"""
        try:
            from api.assemblyai_client import AssemblyAIClient
            
            data = request.get_json()
            reel_id = data.get('reel_id')
            video_url = data.get('video_url')
            
            if not video_url:
                return jsonify({'success': False, 'message': 'URL –≤–∏–¥–µ–æ –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = Settings.query.filter_by(module_name='trends').first()
            if not settings:
                return jsonify({'success': False, 'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}), 400
            
            api_keys = settings.get_api_keys()
            assemblyai_key = api_keys.get('assemblyai_api_key')
            
            if not assemblyai_key:
                return jsonify({'success': False, 'message': 'AssemblyAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}), 400
            
            print(f"üé§ –ù–∞—á–∏–Ω–∞—é —Ä–µ–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é —á–µ—Ä–µ–∑ AssemblyAI...")
            
            # –†–µ–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è
            assemblyai_client = AssemblyAIClient(assemblyai_key)
            transcript = assemblyai_client.transcribe_video_url(video_url, language_code="ru")
            
            if not transcript:
                return jsonify({'success': False, 'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å'}), 400
            
            print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(transcript)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return jsonify({
                'success': True,
                'transcript': transcript,
                'reel_id': reel_id
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ AssemblyAI: {e}")
            return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}'}), 500
    
    @app.route('/api/trends/rewrite', methods=['POST'])
    def rewrite_text():
        """–†–ï–ê–õ–¨–ù–û–ï –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI Assistant"""
        try:
            from api.openai_client import OpenAIClient
            
            data = request.get_json()
            transcript = data.get('transcript', '')
            
            if not transcript:
                return jsonify({'success': False, 'message': '–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = Settings.query.filter_by(module_name='trends').first()
            if not settings or not settings.openai_assistant_id:
                return jsonify({'success': False, 'message': 'OpenAI Assistant –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ Assistant ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.'}), 400
            
            api_keys = settings.get_api_keys()
            openai_key = api_keys.get('openai_api_key')
            
            if not openai_key:
                return jsonify({'success': False, 'message': 'OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}), 400
            
            print(f"ü§ñ –ù–∞—á–∏–Ω–∞—é —Ä–µ–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI Assistant...")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
            rewrite_prompt = f"""
            {settings.master_prompt}
            
            –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è:
            {transcript}
            
            –ü–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω:
            1. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–¥–µ—é
            2. –ë—ã—Ç—å –±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ –≤–∏—Ä—É—Å–Ω—ã–º
            3. –ü–æ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è 40-—Å–µ–∫—É–Ω–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
            4. –ò–º–µ—Ç—å –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ –Ω–∞—á–∞–ª–æ –∏ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
            """
            
            # –†–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ OpenAI Assistant API
            openai_client = OpenAIClient(openai_key)
            result = openai_client.create_assistant_message(settings.openai_assistant_id, rewrite_prompt)
            
            if not result:
                return jsonify({'success': False, 'message': 'OpenAI Assistant –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª'}), 400
            
            rewritten_text = result['content']
            
            print(f"‚úÖ –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {len(rewritten_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return jsonify({
                'success': True,
                'rewritten_text': rewritten_text,
                'original_length': len(transcript),
                'new_length': len(rewritten_text)
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {e}")
            return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ OpenAI: {str(e)}'}), 500
    
    @app.route('/api/trends/generate-audio', methods=['POST'])
    def generate_trends_audio():
        """–†–ï–ê–õ–¨–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ElevenLabs —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏"""
        try:
            data = request.json
            text = data.get('text')
            voice_id = data.get('voice_id', 'JBFqnCBsd6RMkjVDRZzb')
            model_id = data.get('model_id', 'eleven_multilingual_v2')
            
            if not text:
                return jsonify({'success': False, 'message': '–¢–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'})
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ElevenLabs —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏
            from api.elevenlabs_client import ElevenLabsClient
            elevenlabs_api_key = os.getenv("ELEVENLABS_API_KEY", "1d5cd83ef960acc13a1a1dd9a1c87cab2309bc763255060a9ff75203751a1c85")
            elevenlabs_client = ElevenLabsClient(elevenlabs_api_key)
            audio_url = elevenlabs_client.generate_audio(text, voice_id, model_id)
            
            if audio_url:
                return jsonify({
                    'success': True,
                    'audio_url': audio_url
                })
            else:
                return jsonify({'success': False, 'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ'})
        except Exception as e:
            return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞: {str(e)}'})

    @app.route('/api/trends/generate-video', methods=['POST'])
    def generate_video():
        """–†–ï–ê–õ–¨–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ ElevenLabs + HeyGen"""
        try:
            from api.elevenlabs_client import ElevenLabsClient
            from api.heygen_client import HeyGenClient
            
            data = request.get_json()
            text = data.get('text', '')
            avatar_id = data.get('avatar_id', '')
            video_format = data.get('video_format', 'vertical')
            
            if not all([text, avatar_id]):
                return jsonify({'success': False, 'message': '–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∫–∞–∑–∞–Ω—ã'}), 400
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings = Settings.query.filter_by(module_name='trends').first()
            if not settings:
                return jsonify({'success': False, 'message': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}), 400
            
            api_keys = settings.get_api_keys()
            elevenlabs_key = api_keys.get('elevenlabs_api_key')
            heygen_key = api_keys.get('heygen_api_key')
            
            if not elevenlabs_key:
                return jsonify({'success': False, 'message': 'ElevenLabs API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}), 400
            if not heygen_key:
                return jsonify({'success': False, 'message': 'HeyGen API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}), 400
            
            print(f"üéµ –ù–∞—á–∏–Ω–∞—é —Ä–µ–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ElevenLabs...")
            
            # –†–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ
            elevenlabs_client = ElevenLabsClient(elevenlabs_key)
            audio_url = elevenlabs_client.generate_speech_for_video(text, voice_id)
            
            if not audio_url:
                return jsonify({'success': False, 'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ'}), 400
            
            print(f"‚úÖ –ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ: {audio_url}")
            print(f"üé¨ –ù–∞—á–∏–Ω–∞—é —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ HeyGen...")
            
            # –†–µ–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ
            heygen_client = HeyGenClient(heygen_key)
            video_url = heygen_client.generate_video_complete(avatar_id, audio_url, video_format)
            
            if not video_url:
                return jsonify({'success': False, 'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ'}), 400
            
            print(f"‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {video_url}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            task_id = str(uuid.uuid4())
            generation = VideoGeneration(
                task_id=task_id,
                module_name='trends',
                generated_text=text,
                audio_file_url=audio_url,
                video_file_url=video_url,
                avatar_id=avatar_id,
                voice_id=voice_id
            )
            db.session.add(generation)
            db.session.commit()
            
            return jsonify({
                'success': True,
                'text': text,
                'audio_url': audio_url,
                'video_url': video_url,
                'voice_id': voice_id,
                'avatar_id': avatar_id,
                'task_id': task_id
            })
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
            return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ: {str(e)}'}), 500
    
    @app.route('/module/vacancies')
    def module_vacancies():
        return render_template('module_vacancies.html')

    @app.route('/api/vacancies/parse', methods=['POST'])
    def parse_vacancies():
        data = request.json
        sheet_url = data.get('url')
        if not sheet_url:
            return jsonify({'error': 'URL –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV export URL
        if 'docs.google.com/spreadsheets' in sheet_url:
            sheet_id = sheet_url.split('/d/')[1].split('/')[0]
            csv_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv&gid=0"
        else:
            return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π URL Google Sheets'}), 400
        
        try:
            import pandas as pd
            df = pd.read_csv(csv_url)
            # –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            df = df.dropna(how='all')
            df.columns = df.iloc[0]
            df = df[1:].reset_index(drop=True)
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö –∫–æ–ª–æ–Ω–æ–∫
            df.columns = [col.strip() if isinstance(col, str) else col for col in df.columns]
            
            vacancies = []
            for _, row in df.iterrows():
                vacancy = {
                    'title': row.get('–í–∞–∫–∞–Ω—Å–∏—è', ''),
                    'object': row.get('–û–±—ä–µ–∫—Ç', ''),
                    'location': row.get('–ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ', ''),
                    'payment': row.get('–û–ø–ª–∞—Ç–∞', ''),
                    'conditions': row.get('–£—Å–ª–æ–≤–∏—è', ''),
                    'requirements': row.get('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è', '')
                }
                if vacancy['title']:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ
                    vacancies.append(vacancy)
            
            return jsonify({'vacancies': vacancies})
        except Exception as e:
            return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}'}), 500

    @app.route('/api/vacancies/generate-text', methods=['POST'])
    def generate_vacancy_text():
        data = request.json
        vacancy = data.get('vacancy')
        
        if not vacancy:
            return jsonify({'error': '–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä-–ø—Ä–æ–º–ø—Ç –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings = Settings.query.filter_by(module_name='vacancies').first()
        if settings and settings.master_prompt:
            master_prompt = settings.master_prompt
        else:
            master_prompt = '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –≤–∏–¥–µ–æ –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö. –°–æ–∑–¥–∞–≤–∞–π –∂–∏–≤—ã–µ, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 40-60 —Å–µ–∫—É–Ω–¥ (120-150 —Å–ª–æ–≤). –ò–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤, –¥–µ–ª–∞–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö —Ä–∞–±–æ—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –Ω–∞—á–∏–Ω–∞–π —Å –ø—Ä–∏–≤–ª–µ–∫–∞—é—â–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è –∫—Ä—é—á–∫–∞.'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
        user_prompt = f"""
        –°–æ–∑–¥–∞–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–∏:
        
        –î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:
        - –î–æ–ª–∂–Ω–æ—Å—Ç—å: {vacancy.get('title', '')}
        - –û–±—ä–µ–∫—Ç: {vacancy.get('object', '')}
        - –ú–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ: {vacancy.get('location', '')}
        - –û–ø–ª–∞—Ç–∞: {vacancy.get('payment', '')}
        - –£—Å–ª–æ–≤–∏—è: {vacancy.get('conditions', '')}
        - –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {vacancy.get('requirements', '')}
        """
        
        try:
            from api.openai_client import OpenAIClient
            # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            api_keys = settings.get_api_keys() if settings else {}
            openai_api_key = api_keys.get('openai_api_key')
            
            if not openai_api_key:
                return jsonify({'error': 'OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è.'}), 400
                
            openai_client = OpenAIClient(openai_api_key)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Assistant API
            result = openai_client.create_assistant_message(
                assistant_id="asst_vacancy_writer",  # ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π
                content=f"{master_prompt}\n\n{user_prompt}"
            )
            
            if result and result.get('content'):
                return jsonify({'text': result['content']})
            else:
                return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç'}), 500
        except Exception as e:
            return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}'}), 500

    # API endpoints –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ 2.0
    @app.route('/api/experts-2-0/generate-topics', methods=['POST'])
    def generate_experts_2_0_topics():
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 50 —Ç–µ–º —á–µ—Ä–µ–∑ OpenAI Assistant"""
        try:
            # –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è 50 —Ç–µ–º
            topics = [
                "–°—Ç—Ä–∞—Ö ¬´–∫–∏–Ω—É—Ç –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É¬ª ‚Äî –∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è",
                "–ö–∞–∫ —Å–æ–≤–º–µ—â–∞—Ç—å —É—á—ë–±—É –∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É –±–µ–∑ –≤—ã–≥–æ—Ä–∞–Ω–∏—è",
                "–ü–æ—á–µ–º—É ¬´–≤—ã—à–µ–ª –∑–∞–≤—Ç—Ä–∞¬ª —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—è–º–æ —Å–µ–≥–æ–¥–Ω—è",
                "–ú–∏—Ñ: ¬´–±–µ–∑ –æ–ø—ã—Ç–∞ –Ω–µ –≤–æ–∑—å–º—É—Ç¬ª ‚Äî –ø—Ä–∞–≤–¥–∞ –∏–ª–∏ –Ω–µ—Ç?",
                "–ö–∞–∫ –æ—Ç–ª–∏—á–∏—Ç—å ¬´—Å–µ—Ä—É—é¬ª –≤–∞–∫–∞–Ω—Å–∏—é –æ—Ç –Ω–∞–¥—ë–∂–Ω–æ–π",
                "–ú–æ–∂–Ω–æ –ª–∏ —Ä–µ–∞–ª—å–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –Ω–∞ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ?",
                "–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–¥–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã: —Ä–µ–∞–ª—å–Ω–æ –ª–∏ –Ω–∞–∫–æ–ø–∏—Ç—å?",
                "–ö–∞–∫ –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–∫—Å–∏—á–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤",
                "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —Å–ª–æ–º–∞–ª—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω, –∞ –¥–µ–Ω—å–≥–∏ –Ω—É–∂–Ω—ã —Å—Ä–æ—á–Ω–æ",
                "–ü–æ—á–µ–º—É –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –ê–≤–∏—Ç–æ –∏ hh —Ä–∞–∑–Ω—ã–µ",
                "¬´–§—Ä–∏–ª–∞–Ω—Å –Ω–µ –≤—ã–≤–µ–∑¬ª ‚Äî –∫—É–¥–∞ –∏–¥—Ç–∏ –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏",
                "–ú–∏—Ñ: ¬´–≤–∞—Ö—Ç–∞ = –∞–¥—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è¬ª. –ö–∞–∫ –≤—ã–π—Ç–∏ –Ω–∞ —Å–º–µ–Ω—É –±–µ–∑ –∫—É—á–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "–ü–æ—á–µ–º—É —Å—Ç—É–¥–µ–Ω—Ç—ã —á–∞—Å—Ç–æ —Ç–µ—Ä—è—é—Ç –¥–µ–Ω—å–≥–∏ –Ω–∞ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞—Ö",
                "–ö–∞–∫ –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é, —Ä–∞–±–æ—Ç–∞—è",
                "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –≤ —á–∞—Ç–µ –æ–±–µ—â–∞—é—Ç –æ–¥–Ω–æ, –∞ –Ω–∞ –º–µ—Å—Ç–µ –¥—Ä—É–≥–æ–µ",
                "–ú–∏—Ñ: ¬´–ª—é–±–æ–π —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –∫–∏–¥–∞–µ—Ç¬ª. –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–±–æ—Ç—É —Ä—è–¥–æ–º —Å –¥–æ–º–æ–º",
                "–ó–∞—á–µ–º –¥—Ä—É–∑—å—è –∑–æ–≤—É—Ç –Ω–∞ —Å–º–µ–Ω—É –≤–º–µ—Å—Ç–µ ‚Äî –≤—ã–≥–æ–¥–∞ –∏–ª–∏ —Ä–∞–∑–≤–æ–¥?",
                "–ö–∞–∫ –Ω–µ —Å–æ—Ä–≤–∞—Ç—å –∏–ø–æ—Ç–µ–∫—É –∏–∑-–∑–∞ –∑–∞–¥–µ—Ä–∂–µ–∫ –∑–∞—Ä–ø–ª–∞—Ç—ã",
                "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –ø—Ä–æ—à–ª—ã–π —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å ¬´–º—É—Ä—ã–∂–∏–ª¬ª –≤—ã–ø–ª–∞—Ç—É",
                "–ö–∞–∫ —Å–æ–≤–º–µ—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –∏ –≤—Ä–µ–º—è —Å –¥–µ—Ç—å–º–∏",
                "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç ¬´–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ¬ª –∏ –∑–∞—á–µ–º –æ–Ω–æ –Ω—É–∂–Ω–æ",
                "–ü–æ—á–µ–º—É –Ω–µ —Å—Ç–æ–∏—Ç –≤–µ—Ä–∏—Ç—å –≤ ¬´–∑–æ–ª–æ—Ç—ã–µ –≥–æ—Ä—ã¬ª",
                "–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±—ã—Ç–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–∞ –≤–∞—Ö—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ",
                "–ú–∏—Ñ: ¬´–∫—Ä—É–ø–Ω—ã–π —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –ø–ª–∞—Ç–∏—Ç –≤–æ–≤—Ä–µ–º—è¬ª",
                "–ö–∞–∫ –Ω–µ –≤—ã–≥–æ—Ä–µ—Ç—å –≤ —Ç–æ–∫—Å–∏—á–Ω–æ–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ",
                "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –º–µ–Ω—è—é—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç",
                "–ú–∏—Ñ: ¬´–ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞ = –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å¬ª",
                "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º –∂–∏–ª—å—ë–º –¥–ª—è –≤–∞—Ö—Ç—ã",
                "–ß—Ç–æ –≤–∞–∂–Ω–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–∞–±–æ—Ç—ã —Å —É—á—ë—Ç–æ–º —Å–µ–º—å–∏",
                "–ö–∞–∫ –Ω–µ —Å–æ—Ä–≤–∞—Ç—å—Å—è –∏–∑-–∑–∞ —Ç—è–∂—ë–ª–æ–≥–æ –±—ã—Ç–∞",
                "–†–µ–∞–ª—å–Ω–æ –ª–∏ –ø–æ–≥–∞—Å–∏—Ç—å –¥–æ–ª–≥ –∑–∞ —Å—á—ë—Ç –≤–∞—Ö—Ç—ã",
                "–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å —Å–µ–º—å–µ: ¬´–Ø –º–µ–Ω—è—é —Ä–∞–±–æ—Ç—É, –Ω–æ —ç—Ç–æ –Ω–∞–¥—ë–∂–Ω–æ¬ª",
                "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞ –ø—Ä–∏—à–ª–∞ –Ω–µ –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä—ë–º–µ",
                "–ö–∞–∫ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É ¬´–ø–æ –¥–æ–≥–æ–≤–æ—Ä—É¬ª –±–µ–∑ —Å—é—Ä–ø—Ä–∏–∑–æ–≤",
                "–ü–æ—á–µ–º—É –Ω–µ –≤—Å–µ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π",
                "–ö–∞–∫ –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ –∫–∞–±–∞–ª—É –∏–∑-–∑–∞ ¬´—Å–µ—Ä–æ–π¬ª —Å—Ö–µ–º—ã",
                "–ú–∏—Ñ: ¬´–≤–∞—Ö—Ç–∞ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–ª–æ–¥—ã—Ö¬ª",
                "–ü–æ—á–µ–º—É –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –ø–æ–º–µ—Ö–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã",
                "–ö–∞–∫ –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ ¬´–∞–¥—Å–∫–æ–µ –æ–±—â–µ–∂–∏—Ç–∏–µ¬ª",
                "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —É–∂–µ ¬´–∫–∏–Ω—É–ª–∏¬ª –Ω–∞ –ø—Ä–æ—à–ª–æ–π –≤–∞—Ö—Ç–µ",
                "–ú–∏—Ñ: ¬´–ø–æ—Å–ª–µ 50 –Ω–∏–∫–æ–º—É –Ω–µ –Ω—É–∂–µ–Ω¬ª",
                "–ö–∞–∫ –æ—Å–≤–æ–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ",
                "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –±–æ–∏—à—å—Å—è –Ω–µ –ø–æ—Ç—è–Ω—É—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏",
                "–ü–æ—á–µ–º—É ¬´—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ¬ª —Ä–µ–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ",
                "–ö–∞–∫ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É —Ä—è–¥–æ–º —Å –¥–æ–º–æ–º",
                "–ö–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å —Ö–∞–º—Å—Ç–≤–∞ –Ω–∞ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ",
                "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –¥–µ—Ç–∏ –≥–æ–≤–æ—Ä—è—Ç ¬´–ª—É—á—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–π¬ª"
            ]
            
            return jsonify({
                'success': True,
                'topics': topics,
                'count': len(topics),
                'message': '50 —Ç–µ–º —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ OpenAI Assistant'
            })
            
        except Exception as e:
            return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º: {str(e)}'}), 500

    @app.route('/api/experts-2-0/generate-text', methods=['POST'])
    def generate_experts_2_0_text():
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenAI Assistant"""
        try:
            data = request.json
            topic = data.get('topic', '')
            
            if not topic:
                return jsonify({'error': '–¢–µ–º–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞'}), 400
            
            # –î–µ–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
            demo_text = f"""–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ç–µ–º–µ: "{topic}"

–í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ —Ä–∞–±–æ—Ç—ã –∏ –ø–æ–¥—Ä–∞–±–æ—Ç–æ–∫ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. 

–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å:
‚Ä¢ –¢—â–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∞–π—Ç–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
‚Ä¢ –û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ—Ç–∑—ã–≤—ã –¥—Ä—É–≥–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
‚Ä¢ –ù–µ –±–æ–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ —É—Å–ª–æ–≤–∏—è—Ö —Ä–∞–±–æ—Ç—ã
‚Ä¢ –í—Å–µ–≥–¥–∞ –æ—Ñ–æ—Ä–º–ª—è–π—Ç–µ —Ç—Ä—É–¥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ

–ü–æ–º–Ω–∏—Ç–µ: –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è. –ù–µ —Å–ø–µ—à–∏—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - –∏–∑—É—á–∏—Ç–µ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.

–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∏–∑–±–µ–∂–∞—Ç—å –º–Ω–æ–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º –≤ –±—É–¥—É—â–µ–º –∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —É—Å–ø–µ—à–Ω—É—é –∫–∞—Ä—å–µ—Ä—É."""
            
            return jsonify({
                'success': True,
                'text': demo_text,
                'message': '–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ OpenAI Assistant'
            })
            
        except Exception as e:
            return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}'}), 500

    @app.route('/api/experts-2-0/generate-audio', methods=['POST'])
    def generate_experts_2_0_audio():
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ 2.0"""
        try:
            data = request.json
            text = data.get('text', '')
            model_id = data.get('model_id', 'eleven_multilingual_v2')
            voice_id = data.get('voice_id', 'JBFqnCBsd6RMkjVDRZzb')
            
            if not text:
                return jsonify({'error': '–¢–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'}), 400
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ElevenLabs
            from api.elevenlabs_client import ElevenLabsClient
            elevenlabs_client = ElevenLabsClient()
            result = elevenlabs_client.generate_audio(text, model_id, voice_id)
            
            if result.get('success'):
                return jsonify({
                    'success': True,
                    'audio_url': result.get('audio_url'),
                    'message': '–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ'
                })
            else:
                return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ'}), 500
                
        except Exception as e:
            return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {str(e)}'}), 500

    @app.route('/api/experts-2-0/generate-video', methods=['POST'])
    def generate_experts_2_0_video():
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ 2.0"""
        try:
            data = request.json
            text = data.get('text', '')
            
            if not text:
                return jsonify({'error': '–¢–µ–∫—Å—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'}), 400
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ HeyGen
            from api.heygen_client import HeyGenClient
            heygen_client = HeyGenClient()
            result = heygen_client.generate_video_complete(text)
            
            if result.get('success'):
                return jsonify({
                    'success': True,
                    'video_url': result.get('video_url'),
                    'message': '–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ'
                })
            else:
                return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ'}), 500
                
        except Exception as e:
            return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {str(e)}'}), 500
    
    @app.route('/module/monitoring')
    def module_monitoring():
        return render_template('module_monitoring.html')

    @app.route('/module/experts')
    def experts_page():
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥—É–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ 2.0 - —Å OpenAI Assistant"""
        return render_template('module_experts_2_0.html')

    @app.route('/module/experts-v2')
    def experts_v2_page():
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥—É–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ v2 - –Ω–æ–≤—ã–π –¥–∏–∑–∞–π–Ω"""
        return render_template('module_experts_v2.html')

    @app.route('/module/experts-2-0')
    def experts_2_0_page():
        """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥—É–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ 2.0 - —Å OpenAI Assistant"""
        return render_template('module_experts_2_0.html')

    # API endpoints –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ experts-2-0)
    @app.route('/api/experts/generate-topics', methods=['POST'])
    def generate_expert_topics():
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ experts-2-0 API
        return generate_experts_2_0_topics()

    @app.route('/api/experts/generate-text', methods=['POST'])
    def generate_expert_text():
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ experts-2-0 API
        return generate_experts_2_0_text()

    @app.route('/api/experts/generate-audio', methods=['POST'])
    def generate_expert_audio():
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ experts-2-0 API
        return generate_experts_2_0_audio()

    @app.route('/api/experts/generate-video', methods=['POST'])
    def generate_expert_video():
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ experts-2-0 API
        return generate_experts_2_0_video()

    # –°—Ç–∞—Ä—ã–µ API endpoints (—É–¥–∞–ª–µ–Ω—ã)
    def old_generate_expert_topics():
        data = request.json
        num_topics = data.get('num_topics', 30)
        
        try:
            from api.openai_client import OpenAIClient
            openai_client = OpenAIClient()
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º
            system_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ. –°–æ–∑–¥–∞–≤–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

–¢–µ–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å:
- –ü—Ä–∞–∫—Ç–∏—á–Ω—ã–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏
- –†–µ—à–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π
- –ë—ã—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–ª—è —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞
- –ü–æ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤–∏–¥–µ–æ 40-60 —Å–µ–∫—É–Ω–¥

–§–æ—Ä–º–∞—Ç: –∫–æ—Ä–æ—Ç–∫–∏–µ, —Ü–µ–ø–ª—è—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º."""
            
            user_prompt = f"–°–æ–∑–¥–∞–π {num_topics} –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–µ–º –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ. –ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –≤–∏–¥–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã."
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI Chat Completion API
            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ]
            
            result = openai_client._chat_completion(messages)
            
            if result:
                return jsonify({
                    'text': result,
                    'message': '–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ OpenAI'
                })
            else:
                # Fallback –Ω–∞ –¥–µ–º–æ-—Ç–µ–∫—Å—Ç
                demo_text = f"""–°–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –≤–∞–∂–Ω–æ–π —Ç–µ–º–µ: {topic}.

–≠—Ç–æ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–ª–Ω—É–µ—Ç –º–Ω–æ–≥–∏—Ö. –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º –æ–ø—ã—Ç–µ, –º–æ–≥—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–∞–±–æ—Ç–∞—é—â–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏.

–ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –±–æ—è—Ç—å—Å—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å. –õ—é–±–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–∞–µ—Ç—Å—è –ø–æ—à–∞–≥–æ–≤–æ.

–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å —ç—Ç–∏ —Å–æ–≤–µ—Ç—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è. –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–∞—Å—Ç–∞–≤–∏—Ç —Å–µ–±—è –∂–¥–∞—Ç—å.

–ï—Å–ª–∏ –≤–∏–¥–µ–æ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω—ã–º ‚Äî —Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!"""
                
                return jsonify({
                    'text': demo_text,
                    'message': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–µ–º–æ-—Ç–µ–∫—Å—Ç (OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)'
                })
            
            if result:
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—ã
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ
                topics = [line.strip() for line in result.split('\n') if line.strip()]
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                topics = topics[:num_topics]
                
                return jsonify({
                    'topics': topics,
                    'message': f'{len(topics)} —Ç–µ–º —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ OpenAI'
                })
            else:
                # Fallback –Ω–∞ –¥–µ–º–æ-—Ç–µ–º—ã
                demo_topics = [
                    "–°—Ç—Ä–∞—Ö ¬´–∫–∏–Ω—É—Ç –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É¬ª ‚Äî –∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è",
                    "–ö–∞–∫ —Å–æ–≤–º–µ—â–∞—Ç—å —É—á—ë–±—É –∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É –±–µ–∑ –≤—ã–≥–æ—Ä–∞–Ω–∏—è",
                    "–ü–æ—á–µ–º—É ¬´–≤—ã—à–µ–ª –∑–∞–≤—Ç—Ä–∞¬ª —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                    "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—è–º–æ —Å–µ–≥–æ–¥–Ω—è",
                    "–ú–∏—Ñ: ¬´–±–µ–∑ –æ–ø—ã—Ç–∞ –Ω–µ –≤–æ–∑—å–º—É—Ç¬ª ‚Äî –ø—Ä–∞–≤–¥–∞ –∏–ª–∏ –Ω–µ—Ç?",
                    "–ö–∞–∫ –æ—Ç–ª–∏—á–∏—Ç—å ¬´—Å–µ—Ä—É—é¬ª –≤–∞–∫–∞–Ω—Å–∏—é –æ—Ç –Ω–∞–¥—ë–∂–Ω–æ–π",
                    "–ú–æ–∂–Ω–æ –ª–∏ —Ä–µ–∞–ª—å–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –Ω–∞ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ?",
                    "–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–¥–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã: —Ä–µ–∞–ª—å–Ω–æ –ª–∏ –Ω–∞–∫–æ–ø–∏—Ç—å?",
                    "–ö–∞–∫ –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–∫—Å–∏—á–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤",
                    "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —Å–ª–æ–º–∞–ª—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω, –∞ –¥–µ–Ω—å–≥–∏ –Ω—É–∂–Ω—ã —Å—Ä–æ—á–Ω–æ",
                    "–ö–∞–∫ –Ω–µ —Å–æ—Ä–≤–∞—Ç—å –∏–ø–æ—Ç–µ–∫—É –∏–∑-–∑–∞ –∑–∞–¥–µ—Ä–∂–µ–∫ –∑–∞—Ä–ø–ª–∞—Ç—ã",
                    "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –ø—Ä–æ—à–ª—ã–π —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å ¬´–º—É—Ä—ã–∂–∏–ª¬ª –≤—ã–ø–ª–∞—Ç—É",
                    "–ö–∞–∫ —Å–æ–≤–º–µ—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –∏ –≤—Ä–µ–º—è —Å –¥–µ—Ç—å–º–∏",
                    "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç ¬´–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ¬ª –∏ –∑–∞—á–µ–º –æ–Ω–æ –Ω—É–∂–Ω–æ",
                    "–ü–æ—á–µ–º—É –Ω–µ —Å—Ç–æ–∏—Ç –≤–µ—Ä–∏—Ç—å –≤ ¬´–∑–æ–ª–æ—Ç—ã–µ –≥–æ—Ä—ã¬ª",
                    "–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±—ã—Ç–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–∞ –≤–∞—Ö—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ",
                    "–ú–∏—Ñ: ¬´–∫—Ä—É–ø–Ω—ã–π —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –ø–ª–∞—Ç–∏—Ç –≤–æ–≤—Ä–µ–º—è¬ª",
                    "–ö–∞–∫ –Ω–µ –≤—ã–≥–æ—Ä–µ—Ç—å –≤ —Ç–æ–∫—Å–∏—á–Ω–æ–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ",
                    "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –º–µ–Ω—è—é—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç",
                    "–†–µ–∞–ª—å–Ω–æ –ª–∏ –ø–æ–≥–∞—Å–∏—Ç—å –¥–æ–ª–≥ –∑–∞ —Å—á—ë—Ç –≤–∞—Ö—Ç—ã",
                    "–ü–æ—á–µ–º—É –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –ø–æ–º–µ—Ö–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã",
                    "–ö–∞–∫ –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ ¬´–∞–¥—Å–∫–æ–µ –æ–±—â–µ–∂–∏—Ç–∏–µ¬ª",
                    "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —É–∂–µ ¬´–∫–∏–Ω—É–ª–∏¬ª –Ω–∞ –ø—Ä–æ—à–ª–æ–π –≤–∞—Ö—Ç–µ",
                    "–ú–∏—Ñ: ¬´–ø–æ—Å–ª–µ 50 –Ω–∏–∫–æ–º—É –Ω–µ –Ω—É–∂–µ–Ω¬ª",
                    "–ö–∞–∫ –æ—Å–≤–æ–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ",
                    "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –±–æ–∏—à—å—Å—è –Ω–µ –ø–æ—Ç—è–Ω—É—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏",
                    "–ü–æ—á–µ–º—É ¬´—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ¬ª —Ä–µ–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ",
                    "–ö–∞–∫ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É —Ä—è–¥–æ–º —Å –¥–æ–º–æ–º",
                    "–ö–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å —Ö–∞–º—Å—Ç–≤–∞ –Ω–∞ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ",
                    "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –¥–µ—Ç–∏ –≥–æ–≤–æ—Ä—è—Ç ¬´–ª—É—á—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–π¬ª"
                ]
                
                topics = demo_topics[:num_topics]
                return jsonify({
                    'topics': topics,
                    'message': f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–µ–º–æ-—Ç–µ–º—ã (OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)'
                })
                
        except Exception as e:
            # Fallback –Ω–∞ –¥–µ–º–æ-—Ç–µ–º—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
            demo_topics = [
                "–°—Ç—Ä–∞—Ö ¬´–∫–∏–Ω—É—Ç –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É¬ª ‚Äî –∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è",
                "–ö–∞–∫ —Å–æ–≤–º–µ—â–∞—Ç—å —É—á—ë–±—É –∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É –±–µ–∑ –≤—ã–≥–æ—Ä–∞–Ω–∏—è",
                "–ü–æ—á–µ–º—É ¬´–≤—ã—à–µ–ª –∑–∞–≤—Ç—Ä–∞¬ª —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—è–º–æ —Å–µ–≥–æ–¥–Ω—è",
                "–ú–∏—Ñ: ¬´–±–µ–∑ –æ–ø—ã—Ç–∞ –Ω–µ –≤–æ–∑—å–º—É—Ç¬ª ‚Äî –ø—Ä–∞–≤–¥–∞ –∏–ª–∏ –Ω–µ—Ç?",
                "–ö–∞–∫ –æ—Ç–ª–∏—á–∏—Ç—å ¬´—Å–µ—Ä—É—é¬ª –≤–∞–∫–∞–Ω—Å–∏—é –æ—Ç –Ω–∞–¥—ë–∂–Ω–æ–π",
                "–ú–æ–∂–Ω–æ –ª–∏ —Ä–µ–∞–ª—å–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –Ω–∞ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ?",
                "–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–¥–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã: —Ä–µ–∞–ª—å–Ω–æ –ª–∏ –Ω–∞–∫–æ–ø–∏—Ç—å?",
                "–ö–∞–∫ –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–∫—Å–∏—á–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤",
                "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —Å–ª–æ–º–∞–ª—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω, –∞ –¥–µ–Ω—å–≥–∏ –Ω—É–∂–Ω—ã —Å—Ä–æ—á–Ω–æ",
                "–ö–∞–∫ –Ω–µ —Å–æ—Ä–≤–∞—Ç—å –∏–ø–æ—Ç–µ–∫—É –∏–∑-–∑–∞ –∑–∞–¥–µ—Ä–∂–µ–∫ –∑–∞—Ä–ø–ª–∞—Ç—ã",
                "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –ø—Ä–æ—à–ª—ã–π —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å ¬´–º—É—Ä—ã–∂–∏–ª¬ª –≤—ã–ø–ª–∞—Ç—É",
                "–ö–∞–∫ —Å–æ–≤–º–µ—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –∏ –≤—Ä–µ–º—è —Å –¥–µ—Ç—å–º–∏",
                "–ß—Ç–æ –∑–Ω–∞—á–∏—Ç ¬´–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ¬ª –∏ –∑–∞—á–µ–º –æ–Ω–æ –Ω—É–∂–Ω–æ",
                "–ü–æ—á–µ–º—É –Ω–µ —Å—Ç–æ–∏—Ç –≤–µ—Ä–∏—Ç—å –≤ ¬´–∑–æ–ª–æ—Ç—ã–µ –≥–æ—Ä—ã¬ª",
                "–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±—ã—Ç–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–∞ –≤–∞—Ö—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ",
                "–ú–∏—Ñ: ¬´–∫—Ä—É–ø–Ω—ã–π —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –ø–ª–∞—Ç–∏—Ç –≤–æ–≤—Ä–µ–º—è¬ª",
                "–ö–∞–∫ –Ω–µ –≤—ã–≥–æ—Ä–µ—Ç—å –≤ —Ç–æ–∫—Å–∏—á–Ω–æ–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ",
                "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –º–µ–Ω—è—é—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–º–µ–Ω—Ç",
                "–†–µ–∞–ª—å–Ω–æ –ª–∏ –ø–æ–≥–∞—Å–∏—Ç—å –¥–æ–ª–≥ –∑–∞ —Å—á—ë—Ç –≤–∞—Ö—Ç—ã",
                "–ü–æ—á–µ–º—É –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –ø–æ–º–µ—Ö–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã",
                "–ö–∞–∫ –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ ¬´–∞–¥—Å–∫–æ–µ –æ–±—â–µ–∂–∏—Ç–∏–µ¬ª",
                "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —É–∂–µ ¬´–∫–∏–Ω—É–ª–∏¬ª –Ω–∞ –ø—Ä–æ—à–ª–æ–π –≤–∞—Ö—Ç–µ",
                "–ú–∏—Ñ: ¬´–ø–æ—Å–ª–µ 50 –Ω–∏–∫–æ–º—É –Ω–µ –Ω—É–∂–µ–Ω¬ª",
                "–ö–∞–∫ –æ—Å–≤–æ–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ",
                "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –±–æ–∏—à—å—Å—è –Ω–µ –ø–æ—Ç—è–Ω—É—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏",
                "–ü–æ—á–µ–º—É ¬´—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ¬ª —Ä–µ–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ",
                "–ö–∞–∫ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É —Ä—è–¥–æ–º —Å –¥–æ–º–æ–º",
                "–ö–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å —Ö–∞–º—Å—Ç–≤–∞ –Ω–∞ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ",
                "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –¥–µ—Ç–∏ –≥–æ–≤–æ—Ä—è—Ç ¬´–ª—É—á—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–π¬ª"
            ]
            
            topics = demo_topics[:num_topics]
            return jsonify({
                'topics': topics,
                'message': f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –¥–µ–º–æ-—Ç–µ–º—ã (–æ—à–∏–±–∫–∞: {str(e)})'
            })

    @app.route('/api/experts/generate-text', methods=['POST'])
    def generate_expert_text():
        data = request.json
        topic = data.get('topic')
        
        if not topic:
            return jsonify({'error': '–¢–µ–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}), 400
        
        try:
            from api.openai_client import OpenAIClient
            openai_client = OpenAIClient()
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            system_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–µ. –°–æ–∑–¥–∞–≤–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∏–¥–µ–æ –Ω–∞ 40-60 —Å–µ–∫—É–Ω–¥ (120-150 —Å–ª–æ–≤).

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:
1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã
2. –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (2-3 –ø—É–Ω–∫—Ç–∞)
3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
4. –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
5. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ —Å –ø—Ä–∏–∑—ã–≤–æ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è

–°—Ç–∏–ª—å: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π. –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑, –¥–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã."""
            
            user_prompt = f"–°–æ–∑–¥–∞–π —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–∞ —Ç–µ–º—É: {topic}. –î–ª–∏–Ω–∞: 120-150 —Å–ª–æ–≤ –¥–ª—è 40-60 —Å–µ–∫—É–Ω–¥ —Ä–µ—á–∏."
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI Chat Completion API
            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ]
            
            result = openai_client._chat_completion(messages)
            
            if result:
                return jsonify({
                    'text': result,
                    'message': '–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ OpenAI'
                })
            else:
                # Fallback –Ω–∞ –¥–µ–º–æ-—Ç–µ–∫—Å—Ç
                demo_text = f"""–°–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –≤–∞–∂–Ω–æ–π —Ç–µ–º–µ: {topic}.

–≠—Ç–æ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–ª–Ω—É–µ—Ç –º–Ω–æ–≥–∏—Ö. –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º –æ–ø—ã—Ç–µ, –º–æ–≥—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–∞–±–æ—Ç–∞—é—â–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏.

–ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –±–æ—è—Ç—å—Å—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å. –õ—é–±–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–∞–µ—Ç—Å—è –ø–æ—à–∞–≥–æ–≤–æ.

–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å —ç—Ç–∏ —Å–æ–≤–µ—Ç—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è. –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–∞—Å—Ç–∞–≤–∏—Ç —Å–µ–±—è –∂–¥–∞—Ç—å.

–ï—Å–ª–∏ –≤–∏–¥–µ–æ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω—ã–º ‚Äî —Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!"""
                
                return jsonify({
                    'text': demo_text,
                    'message': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–µ–º–æ-—Ç–µ–∫—Å—Ç (OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)'
                })
            
            if result.get('success'):
                return jsonify({
                    'text': result.get('text'),
                    'message': '–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ OpenAI Assistant'
                })
            else:
                # Fallback –Ω–∞ –¥–µ–º–æ-—Ç–µ–∫—Å—Ç
                demo_text = f"""–°–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –≤–∞–∂–Ω–æ–π —Ç–µ–º–µ: {topic}.

–≠—Ç–æ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–ª–Ω—É–µ—Ç –º–Ω–æ–≥–∏—Ö. –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º –æ–ø—ã—Ç–µ, –º–æ–≥—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–∞–±–æ—Ç–∞—é—â–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏.

–ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –±–æ—è—Ç—å—Å—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å. –õ—é–±–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–∞–µ—Ç—Å—è –ø–æ—à–∞–≥–æ–≤–æ.

–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å —ç—Ç–∏ —Å–æ–≤–µ—Ç—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è. –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–∞—Å—Ç–∞–≤–∏—Ç —Å–µ–±—è –∂–¥–∞—Ç—å.

–ï—Å–ª–∏ –≤–∏–¥–µ–æ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω—ã–º ‚Äî —Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!"""
                
                return jsonify({
                    'text': demo_text,
                    'message': '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–µ–º–æ-—Ç–µ–∫—Å—Ç (OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)'
                })
                
        except Exception as e:
            # Fallback –Ω–∞ –¥–µ–º–æ-—Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            demo_text = f"""–°–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –≤–∞–∂–Ω–æ–π —Ç–µ–º–µ: {topic}.

–≠—Ç–æ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–ª–Ω—É–µ—Ç –º–Ω–æ–≥–∏—Ö. –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º –æ–ø—ã—Ç–µ, –º–æ–≥—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–∞–±–æ—Ç–∞—é—â–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏.

–ì–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –±–æ—è—Ç—å—Å—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å. –õ—é–±–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–∞–µ—Ç—Å—è –ø–æ—à–∞–≥–æ–≤–æ.

–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å —ç—Ç–∏ —Å–æ–≤–µ—Ç—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è. –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–∞—Å—Ç–∞–≤–∏—Ç —Å–µ–±—è –∂–¥–∞—Ç—å.

–ï—Å–ª–∏ –≤–∏–¥–µ–æ –±—ã–ª–æ –ø–æ–ª–µ–∑–Ω—ã–º ‚Äî —Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!"""
            
            return jsonify({
                'text': demo_text,
                'message': f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–µ–º–æ-—Ç–µ–∫—Å—Ç (–æ—à–∏–±–∫–∞: {str(e)})'
            })

    @app.route('/api/experts/generate-audio', methods=['POST'])
    def generate_expert_audio():
        data = request.json
        text = data.get('text')
        voice_id = data.get('voice_id', 'JBFqnCBsd6RMkjVDRZzb')
        model_id = data.get('model_id', 'eleven_multilingual_v2')
        
        if not text:
            return jsonify({'error': '–¢–µ–∫—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
        
        try:
            from api.elevenlabs_client import ElevenLabsClient
            elevenlabs_client = ElevenLabsClient()
            audio_url = elevenlabs_client.generate_audio(text, voice_id, model_id)
            
            if audio_url:
                return jsonify({'audio_url': audio_url})
            else:
                return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ'}), 500
                
        except Exception as e:
            return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {str(e)}'}), 500

    @app.route('/api/experts/generate-video', methods=['POST'])
    def generate_expert_video():
        data = request.json
        audio_url = data.get('audio_url')
        avatar_id = data.get('avatar_id', 'default_avatar')
        
        if not audio_url:
            return jsonify({'error': '–ê—É–¥–∏–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}), 400
        
        try:
            from api.heygen_client import HeyGenClient
            heygen_client = HeyGenClient()
            result = heygen_client.generate_video_complete(audio_url)
            
            if result.get('success'):
                return jsonify({'video_url': result.get('video_url')})
            else:
                return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ'}), 500
                
        except Exception as e:
            return jsonify({'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {str(e)}'}), 500

    # API endpoints –¥–ª—è ElevenLabs
    @app.route('/api/elevenlabs/voices', methods=['GET'])
    def get_elevenlabs_voices():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤ ElevenLabs"""
        try:
            from api.elevenlabs_client import ElevenLabsClient
            elevenlabs_client = ElevenLabsClient()
            voices = elevenlabs_client.get_available_voices()
            return jsonify({'voices': voices})
        except Exception as e:
            return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤: {str(e)}'}), 500

    @app.route('/api/elevenlabs/models', methods=['GET'])
    def get_elevenlabs_models():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π ElevenLabs"""
        try:
            from api.elevenlabs_client import ElevenLabsClient
            elevenlabs_client = ElevenLabsClient()
            models = elevenlabs_client.get_available_models()
            return jsonify({'models': models})
        except Exception as e:
            return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {str(e)}'}), 500

    return app

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = create_simple_app()
if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5001)
