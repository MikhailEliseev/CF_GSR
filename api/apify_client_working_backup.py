from apify_client import ApifyClient
import time
import random
from typing import Optional, List, Dict, Any
from config import Config

class ApifyInstagramClient:
    def __init__(self, api_key: str):
        self.client = ApifyClient(api_key)
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–∫—Ç–æ—Ä–æ–≤ –∏ –∏—Ö —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.actor_configs = [
            {
                "id": "apify/instagram-reel-scraper",
                "build_input": lambda username, count: {
                    "username": [username],
                    "resultsLimit": count
                }
            },
            {
                "id": "apify/instagram-scraper",
                "build_input": lambda username, count: {
                    "usernames": [username],
                    "resultsType": "posts",
                    "resultsLimit": count,
                    "searchType": "user",
                    "includeHashtags": False,
                    "onlyPostsNewerThan": "",
                    "addParentData": False
                }
            },
            {
                "id": "dtrungtin/instagram-scraper",
                "build_input": lambda username, count: {
                    "username": [username],
                    "resultsLimit": count,
                    "resultsType": "posts"
                }
            },
            {
                "id": "zuzka/instagram-scraper",
                "build_input": lambda username, count: {
                    "usernames": [username],
                    "resultsType": "posts",
                    "resultsLimit": count,
                    "searchType": "user",
                    "includeHashtags": False,
                    "addParentData": False
                }
            }
        ]
        self.current_actor_index = 0
        self.actor_id = self.actor_configs[0]["id"]
    
    def scrape_user_posts(self, username: str, count: int = 20, 
                         max_retries: int = Config.API_RETRY_ATTEMPTS) -> Optional[List[Dict[str, Any]]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Instagram - –¢–û–ß–ù–û –ö–ê–ö –í MAKE
        """
        actor_config = self.actor_configs[self.current_actor_index]
        run_input = actor_config["build_input"](username, count)
        
        print(f"üîç –ó–∞–ø—É—Å–∫–∞—é –∞–∫—Ç–æ—Ä {actor_config['id']} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {run_input}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–∫—Ç–æ—Ä–∞, –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
        actor_tested = False
        last_error = None
        
        # –ü—Ä–æ–±—É–µ–º –∞–∫—Ç–æ—Ä—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
        self.actor_id = None
        
        for i, config in enumerate(self.actor_configs):
            candidate_id = config["id"]
            try:
                print(f"üîç –¢–µ—Å—Ç–∏—Ä—É—é –∞–∫—Ç–æ—Ä {candidate_id}...")
                actor_info = self.client.actor(candidate_id).get()
                print(f"‚úÖ –ê–∫—Ç–æ—Ä {candidate_id} –¥–æ—Å—Ç—É–ø–µ–Ω: {actor_info.get('name', 'Unknown')}")
                self.actor_id = candidate_id
                actor_config = config
                run_input = actor_config["build_input"](username, count)
                actor_tested = True
                break
            except Exception as e:
                print(f"‚ùå –ê–∫—Ç–æ—Ä {candidate_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                last_error = e
                continue
        
        if not actor_tested:
            raise Exception(f"–í—Å–µ –∞–∫—Ç–æ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")
        
        for attempt in range(max_retries):
            try:
                print(f"üöÄ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –ó–∞–ø—É—Å–∫–∞—é {self.actor_id} –¥–ª—è @{username}")
                print(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {run_input}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–æ—Ä
                run = self.client.actor(self.actor_id).call(run_input=run_input)
                
                run_id = run.get('id', 'unknown')
                run_status = run.get('status', 'unknown')
                print(f"üîÑ –ó–∞–ø—É—Å–∫ {run_id} –∑–∞–≤–µ—Ä—à–µ–Ω, —Å—Ç–∞—Ç—É—Å: {run_status}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                if run_status not in ['SUCCEEDED', 'FINISHED']:
                    raise Exception(f"–ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É—Å–ø–µ—à–Ω–æ: {run_status}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                dataset_id = run.get("defaultDatasetId")
                if not dataset_id:
                    raise Exception("–ù–µ –ø–æ–ª—É—á–µ–Ω ID –¥–∞—Ç–∞—Å–µ—Ç–∞")
                
                print(f"üìä –ß–∏—Ç–∞—é –¥–∞—Ç–∞—Å–µ—Ç: {dataset_id}")
                dataset_items = []
                
                item_count = 0
                for item in self.client.dataset(dataset_id).iterate_items():
                    dataset_items.append(item)
                    item_count += 1
                    if item_count <= 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        print(f"üìã –≠–ª–µ–º–µ–Ω—Ç {item_count}: {list(item.keys())[:5]}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–∏
                
                print(f"üìà –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(dataset_items)}")
                
                if dataset_items:
                    print(f"‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(dataset_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç @{username}")
                    processed = self.process_instagram_posts(dataset_items)
                    return processed
                else:
                    print(f"‚ö†Ô∏è –î–∞—Ç–∞—Å–µ—Ç –ø—É—Å—Ç –¥–ª—è @{username}")
                    if attempt == max_retries - 1:
                        raise Exception(f"–ê–∫—Ç–æ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è @{username}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                if attempt == max_retries - 1:
                    raise e
                time.sleep(Config.API_RETRY_DELAY)
        
        return None
    
    def process_instagram_posts(self, raw_posts: List[Dict]) -> List[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–∑ Instagram - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
        """
        processed_posts = []
        
        print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(raw_posts)} —Å—ã—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤...")
        
        for i, post in enumerate(raw_posts):
            try:
                print(f"üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–æ—Å—Ç {i+1}/{len(raw_posts)}: {list(post.keys())[:5]}...")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                post_id = post.get("id") or post.get("shortCode") or post.get("pk") or f"post_{i}"
                post_url = post.get("url") or post.get("displayUrl") or post.get("inputUrl") or f"https://instagram.com/p/{post_id}/"
                caption = (post.get("caption") or post.get("text") or post.get("firstComment") or "").strip()
                if not caption and post.get("latestComments"):
                    caption = post["latestComments"][0].get("text", "")
                if caption:
                    hashtags = post.get("hashtags") or []
                    if hashtags:
                        caption += "\n\n#" + " #".join(hashtags[:5])
                else:
                    caption = "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                
                # –ú–µ—Ç—Ä–∏–∫–∏
                likes = post.get("likesCount") or post.get("likes") or post.get("likeCount") or 0
                views = post.get("videoViewCount") or post.get("viewCount") or post.get("views") or 0
                comments = post.get("commentsCount") or post.get("comments") or post.get("commentCount") or 0
                
                # –î–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è
                video_url = (post.get("videoUrl") or 
                           post.get("video") or 
                           post.get("videoLink") or
                           post.get("videoPlayURL") or
                           post.get("video_url") or
                           post.get("displayUrl") or
                           None)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–ª—É—á–∏–ª–∏
                print(f"üé• –ü–æ—Å—Ç {post_id}: videoUrl={post.get('videoUrl')}, video={post.get('video')}, videoLink={post.get('videoLink')}")
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
                if not video_url or video_url == post_url:
                    print(f"‚ö†Ô∏è –ù–µ—Ç –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ –¥–ª—è {post_id}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç")
                    video_url = post_url  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –∫–∞–∫ video_url
                timestamp = post.get("timestamp") or post.get("taken_at_timestamp") or "2024-09-23T10:00:00Z"
                
                processed_post = {
                    "id": post_id,
                    "url": post_url,
                    "caption": caption[:500],  # —á—É—Ç—å –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞
                    "likes_count": int(likes) if likes else 0,
                    "views_count": int(views) if views else 0,
                    "comments_count": int(comments) if comments else 0,
                    "timestamp": timestamp,
                    "video_url": video_url,
                    "duration": post.get("videoDuration", 30),
                    "thumbnail_url": post.get("displayUrl"),
                    "hashtags": post.get("hashtags", []),
                    "first_comment": post.get("firstComment"),
                    "music": (post.get("musicInfo") or {}).get("title"),
                    "is_viral": self.is_viral_content(post)
                }
                
                processed_posts.append(processed_post)
                print(f"‚úÖ –ü–æ—Å—Ç {i+1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {processed_post['id']} ({processed_post['views_count']} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ {i+1}: {e}")
                # –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–æ—Å—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                fallback_post = {
                    "id": f"fallback_post_{i}",
                    "url": f"https://instagram.com/p/fallback_{i}/",
                    "caption": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                    "likes_count": 0,
                    "views_count": random.randint(1000, 10000),
                    "comments_count": 0,
                    "timestamp": "2024-09-23T10:00:00Z",
                    "video_url": f"https://instagram.com/p/fallback_{i}/",
                    "duration": 30,
                    "source_username": "unknown",
                    "is_viral": False
                }
                processed_posts.append(fallback_post)
                print(f"üîÑ –î–æ–±–∞–≤–ª–µ–Ω fallback –ø–æ—Å—Ç {i+1}")
                continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
        processed_posts.sort(
            key=lambda x: (x["views_count"] or 0) + (x["likes_count"] or 0), 
            reverse=True
        )
        
        print(f"üéØ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(processed_posts)} –ø–æ—Å—Ç–æ–≤")
        return processed_posts
    
    def is_viral_content(self, post: Dict) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –ª—é–±—ã—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π
        views = (post.get("videoViewCount") or 
                post.get("viewCount") or 
                post.get("views") or 
                post.get("views_count") or 0)
        
        likes = (post.get("likesCount") or 
                post.get("likes") or 
                post.get("likeCount") or 
                post.get("likes_count") or 0)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–∞
        try:
            views = int(views) if views else 0
            likes = int(likes) if likes else 0
        except (ValueError, TypeError):
            views = 0
            likes = 0
        
        # –õ–æ–≥–∏–∫–∞ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø–æ–¥ –≤–∞—à–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏)
        if views > 30000:  # –û—Å–Ω–æ–≤–Ω–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            return True
        
        if likes > 3000:  # –í—ã—Å–æ–∫–æ–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ
            return True
        
        # –•–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ª–∞–π–∫–æ–≤ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
        if views > 5000 and likes > 0 and (likes / views) > 0.08:
            return True
        
        return False
    
    def get_trending_content(self, usernames: List[str], count: int = 20, days_back: int = 7) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û
        """
        all_viral_posts = []
        
        print(f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ {len(usernames)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {usernames}")
        
        for i, username in enumerate(usernames):
            try:
                print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {i+1}/{len(usernames)}: @{username}")
                
                # –ü–∞—Ä—Å–∏–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º count –∏–∑ –∑–∞–ø—Ä–æ—Å–∞)
                posts = self.scrape_user_posts(username, count=count)
                
                if posts:
                    print(f"üì• –ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ –æ—Ç @{username}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∫–æ –≤—Å–µ–º –ø–æ—Å—Ç–∞–º
                    for post in posts:
                        post["source_username"] = username
                    if not post.get("caption") and post.get("first_comment"):
                        post["caption"] = post["first_comment"]
                    
                    all_viral_posts.extend(posts)
                else:
                    print(f"‚ö†Ô∏è –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –æ—Ç @{username}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ @{username}: {e}")
                continue
        
        if not all_viral_posts:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç—ã –Ω–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ (–ø—Ä–æ—Å–º–æ—Ç—Ä—ã + –ª–∞–π–∫–∏)
        all_viral_posts.sort(
            key=lambda x: (x.get("views_count", 0) + x.get("likes_count", 0)), 
            reverse=True
        )
        
        viral_count = len([p for p in all_viral_posts if p.get("is_viral", False)])
        print(f"üî• –ù–∞–π–¥–µ–Ω–æ {len(all_viral_posts)} –ø–æ—Å—Ç–æ–≤, –∏–∑ –Ω–∏—Ö {viral_count} –≤–∏—Ä–∞–ª—å–Ω—ã—Ö")
        
        return all_viral_posts[:count]
    
    def get_post_transcript(self, video_url: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –î–ª—è –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–µ–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        """
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å Whisper API –æ—Ç OpenAI
        return None
    
    def test_connection(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Apify API
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–∫—Ç–æ—Ä–∞
            actor_info = self.client.actor(self.actor_id).get()
            return actor_info is not None
        except Exception:
            return False
