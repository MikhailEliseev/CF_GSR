import requests
import time
import os
from typing import Optional, List, Dict, Any
from config import Config
import io
import ssl
import urllib3
import tempfile

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class ElevenLabsClient:
    def __init__(self, api_key: str = None):
        # –ö–ª—é—á –±–µ—Ä—ë–º –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –Ω–µ —Ö—Ä–∞–Ω–∏–º –≤ –∫–æ–¥–µ
        self.api_key = api_key or os.getenv("ELEVENLABS_API_KEY", "")
        self.base_url = "https://api.elevenlabs.io/v1"
        self.headers = {
            "Accept": "audio/mpeg",
            "Content-Type": "application/json"
        }
        if self.api_key:
            self.headers["xi-api-key"] = self.api_key
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ ElevenLabs
        self.available_models = {
            "eleven_multilingual_v2": {
                "name": "Eleven Multilingual v2",
                "description": "Excels in stability, language diversity, and accent accuracy. Supports 29 languages. Recommended for most use cases.",
                "languages": 29
            },
            "eleven_flash_v2_5": {
                "name": "Eleven Flash v2.5", 
                "description": "Ultra-low latency. Supports 32 languages. Faster model, 50% lower price per character.",
                "languages": 32
            },
            "eleven_turbo_v2_5": {
                "name": "Eleven Turbo v2.5",
                "description": "Good balance of quality and latency. Ideal for developer use cases where speed is crucial. Supports 32 languages.",
                "languages": 32
            }
        }
    
    def get_available_voices(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
        """
        if not self.api_key:
            print("ElevenLabs API key not configured")
            return []

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL
            response = requests.get(
                f"{self.base_url}/voices", 
                headers=self.headers,
                verify=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                timeout=30
            )
            response.raise_for_status()
            
            voices_data = response.json()
            return [
                {
                    "voice_id": voice["voice_id"],
                    "name": voice["name"],
                    "category": voice.get("category", ""),
                    "description": voice.get("description", ""),
                    "preview_url": voice.get("preview_url", "")
                }
                for voice in voices_data.get("voices", [])
            ]
        except Exception as e:
            print(f"Error getting voices: {e}")
            return []
    
    def get_available_models(self) -> Dict[str, Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        """
        return self.available_models
    
    def text_to_speech(self, text: str, voice_id: str = "JBFqnCBsd6RMkjVDRZzb", 
                      model_id: str = "eleven_multilingual_v2",
                      stability: float = 0.5, similarity_boost: float = 0.5,
                      max_retries: int = 3) -> Optional[bytes]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏
        """
        url = f"{self.base_url}/text-to-speech/{voice_id}"
        
        data = {
            "text": text,
            "model_id": model_id,
            "voice_settings": {
                "stability": stability,
                "similarity_boost": similarity_boost
            },
            "output_format": "mp3_44100_128"
        }
        
        if not self.api_key:
            raise Exception("ElevenLabs API key not configured")

        for attempt in range(max_retries):
            try:
                response = requests.post(
                    url, 
                    json=data, 
                    headers=self.headers,
                    verify=False,
                    timeout=60
                )
                response.raise_for_status()
                
                return response.content
                
            except Exception as e:
                print(f"ElevenLabs attempt {attempt + 1} failed: {e}")
                if attempt == max_retries - 1:
                    raise e
                time.sleep(2)
        
        return None
    
    def save_audio_to_cloud(self, audio_data: bytes, filename: str) -> str:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        """
        from api.cloud_storage import CloudStorageClient
        
        cloud_client = CloudStorageClient()
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å —Å –¥–∞—Ç–æ–π
        from datetime import datetime
        date_path = datetime.now().strftime("%Y/%m/%d")
        full_path = f"audio/{date_path}/{filename}"
        
        return cloud_client.upload_file(audio_data, full_path, content_type="audio/mpeg")
    
    def generate_audio(self, text: str, voice_id: str = "JBFqnCBsd6RMkjVDRZzb", 
                      model_id: str = "eleven_multilingual_v2") -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏ –∏ –≥–æ–ª–æ—Å–∞
        """
        print(f"üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞: {text[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        if not self.api_key or not self.test_connection():
            print("‚ö†Ô∏è ElevenLabs API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return self._create_audio_placeholder(text)
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API
            audio_data = self.text_to_speech(text, voice_id, model_id)
            if audio_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤ —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º URL
                import os
                import uuid
                
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
                audio_dir = "static/audio"
                os.makedirs(audio_dir, exist_ok=True)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                filename = f"audio_{uuid.uuid4().hex}.mp3"
                filepath = os.path.join(audio_dir, filename)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ
                with open(filepath, 'wb') as f:
                    f.write(audio_data)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                os.chmod(filepath, 0o644)
                
                print(f"‚úÖ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
                return f"/static/audio/{filename}"
            
        except Exception as e:
            print(f"‚ùå ElevenLabs API –æ—à–∏–±–∫–∞: {e}")
        
        # Fallback: —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –∞—É–¥–∏–æ
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∞—É–¥–∏–æ")
        return self._create_audio_placeholder(text)
    
    def _create_audio_placeholder(self, text: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –∞—É–¥–∏–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        import os
        import uuid
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
        audio_dir = "static/audio"
        os.makedirs(audio_dir, exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        filename = f"placeholder_{uuid.uuid4().hex}.mp3"
        filepath = os.path.join(audio_dir, filename)
        
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–Ω—ã–π MP3 —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        # MP3 –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è 128kbps, 44.1kHz, –º–æ–Ω–æ
        mp3_header = bytes([
            0xFF, 0xFB, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ])
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ~5 —Å–µ–∫—É–Ω–¥ —Ç–∏—à–∏–Ω—ã
        audio_data = mp3_header * 500  # ~5 —Å–µ–∫—É–Ω–¥
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(filepath, 'wb') as f:
            f.write(audio_data)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        os.chmod(filepath, 0o644)
        
        print(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –∞—É–¥–∏–æ: {filepath} (—Ä–∞–∑–º–µ—Ä: {len(audio_data)} –±–∞–π—Ç)")
        return f"/static/audio/{filename}"
    
    def _audio_to_base64(self, audio_data: bytes) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ base64 –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        import base64
        return base64.b64encode(audio_data).decode('utf-8')

    def generate_speech_for_video(self, text: str, voice_id: str) -> Optional[str]:
        """
        –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω: —Ç–µ–∫—Å—Ç -> –∞—É–¥–∏–æ -> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ–±–ª–∞–∫–æ
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            audio_data = self.text_to_speech(text, voice_id)
            if not audio_data:
                return None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±–ª–∞–∫–æ
            filename = f"speech_{int(time.time())}.mp3"
            audio_url = self.save_audio_to_cloud(audio_data, filename)
            
            return audio_url
            
        except Exception as e:
            print(f"Error in speech generation pipeline: {e}")
            return None
    
    def test_connection(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ElevenLabs API
        """
        if not self.api_key:
            return False
        try:
            response = requests.get(
                f"{self.base_url}/voices", 
                headers=self.headers,
                verify=False,
                timeout=10
            )
            print(f"ElevenLabs API response: {response.status_code}")
            if response.status_code == 200:
                print("ElevenLabs API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                return True
            else:
                print(f"ElevenLabs API –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            print(f"ElevenLabs API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
