import os
import uuid
from typing import Optional
import elevenlabs

class ElevenLabsSimple:
    def __init__(self, api_key: str = None):
        self.api_key = api_key or os.getenv("ELEVENLABS_API_KEY", "sk-test-key-placeholder")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á
        elevenlabs.set_api_key(self.api_key)
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
        self.available_voices = {
            "jP9L6ZC55cz5mmx4ZpCk": "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∏–π –ê–ª–µ–∫—Å–µ–π (–†—É—Å—Å–∫–∏–π –º—É–∂—Å–∫–æ–π)",
            "JBFqnCBsd6RMkjVDRZzb": "Rachel (Female, American)",
            "EXAVITQu4vr4xnSDxMaL": "Bella (Female, American)", 
            "VR6AewLTigWG4xSOukaG": "Josh (Male, American)",
            "AZnzlk1XvdvUeBnXmlld": "Domi (Female, American)",
            "MF3mGyEYCl7XYWbV9V6O": "Elli (Female, American)"
        }
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
        self.available_models = {
            "eleven_multilingual_v2": "Eleven Multilingual v2 (29 —è–∑—ã–∫–æ–≤)",
            "eleven_flash_v2_5": "Eleven Flash v2.5 (32 —è–∑—ã–∫–∞, –±—ã—Å—Ç—Ä—ã–π)",
            "eleven_turbo_v2_5": "Eleven Turbo v2.5 (32 —è–∑—ã–∫–∞, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)"
        }
    
    def test_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ElevenLabs API"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤
            voices = elevenlabs.voices()
            print(f"‚úÖ ElevenLabs API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–π–¥–µ–Ω–æ {len(voices)} –≥–æ–ª–æ—Å–æ–≤")
            return True
        except Exception as e:
            print(f"‚ùå ElevenLabs API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    def get_available_voices(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤"""
        try:
            voices = elevenlabs.voices()
            return [
                {
                    "voice_id": voice.voice_id,
                    "name": voice.name,
                    "category": getattr(voice, 'category', ''),
                    "description": getattr(voice, 'description', ''),
                    "labels": getattr(voice, 'labels', {}),
                    "preview_url": getattr(voice, 'preview_url', None)
                }
                for voice in voices
            ]
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤: {e}")
            # Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫
            return [
                {
                    "voice_id": voice_id,
                    "name": name,
                    "category": "premade",
                    "description": "",
                    "labels": {},
                    "preview_url": None
                }
                for voice_id, name in self.available_voices.items()
            ]
    
    def text_to_speech(self, text: str, voice_id: str = "jP9L6ZC55cz5mmx4ZpCk", 
                      model_id: str = "eleven_flash_v2_5"):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            print(f"üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ: {text[:50]}...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            audio = elevenlabs.generate(
                text=text,
                voice=voice_id,
                model=model_id
            )
            
            # API —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç bytes
            return audio
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            return None
    
    def generate_audio(self, text: str, voice_id: str = "jP9L6ZC55cz5mmx4ZpCk", 
                      model_id: str = "eleven_flash_v2_5"):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
        try:
            print(f"üåê === ElevenLabs.generate_audio –í–´–ó–í–ê–ù ===")
            print(f"üìù –¢–µ–∫—Å—Ç: {text[:30]}...")
            print(f"üé§ Voice: {voice_id}")
            print(f"üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ: {text[:50]}...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            print(f"üìç –í—ã–∑—ã–≤–∞–µ–º elevenlabs.generate —Å voice={voice_id}, model={model_id}")
            audio = elevenlabs.generate(
                text=text,
                voice=voice_id,
                model=model_id
            )
            print(f"üìä –ü–æ–ª—É—á–µ–Ω audio –æ–±—ä–µ–∫—Ç: {type(audio)}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            return self._save_audio_to_static(audio, text)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            return self._create_audio_placeholder(text)
    
    def _create_audio_placeholder(self, text: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∞—É–¥–∏–æ"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∫–∞–∫ placeholder
            placeholder_file = "test_hello.mp3"
            placeholder_path = os.path.join("static", "audio", placeholder_file)
            
            if os.path.exists(placeholder_path):
                print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π placeholder: {placeholder_file}")
                return f"/static/audio/{placeholder_file}"
            else:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É
                placeholder_text = f"–ê—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {text[:30]}..."
                filename = f"placeholder_{uuid.uuid4().hex[:8]}.txt"
                filepath = os.path.join("static", "audio", filename)
                
                os.makedirs(os.path.dirname(filepath), exist_ok=True)
                
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(placeholder_text)
                
                return f"/static/audio/{filename}"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏: {e}")
            return "/static/audio/error.txt"
    
    def _save_audio_to_static(self, audio_data: bytes, text: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –ø–∞–ø–∫—É"""
        try:
            print(f"üíæ === –°–û–•–†–ê–ù–ï–ù–ò–ï –ê–£–î–ò–û ===")
            print(f"üìè –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(audio_data)} –±–∞–π—Ç")
            print(f"üìù –¢–µ–∫—Å—Ç: {text[:30]}...")
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            filename = f"audio_{uuid.uuid4().hex[:8]}.mp3"
            filepath = os.path.join("static", "audio", filename)
            print(f"üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {filepath}")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(filepath), exist_ok=True)
            print(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ
            with open(filepath, 'wb') as f:
                f.write(audio_data)
            print(f"üíæ –§–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –¥–∏—Å–∫")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            os.chmod(filepath, 0o644)
            print(f"üîê –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
            print(f"‚úÖ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
            return f"/static/audio/{filename}"
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
            return self._create_audio_placeholder(text)
    
    def play_audio(self, audio_data: bytes):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        try:
            import pygame
            pygame.mixer.init()
            pygame.mixer.music.load(audio_data)
            pygame.mixer.music.play()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
    
    def get_voice_info(self, voice_id: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–ª–æ—Å–µ"""
        return self.available_voices.get(voice_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ–ª–æ—Å")
    
    def get_model_info(self, model_id: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏"""
        return self.available_models.get(model_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
    
    def text_to_speech_advanced(self, text: str, voice_id: str = "jP9L6ZC55cz5mmx4ZpCk", 
                               model_id: str = "eleven_flash_v2_5", 
                               stability: float = 0.5, 
                               similarity_boost: float = 0.5):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        try:
            print(f"üéµ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {text[:50]}... (stability={stability}, similarity_boost={similarity_boost})")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            audio = elevenlabs.generate(
                text=text,
                voice=voice_id,
                model=model_id
            )
            
            return audio
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return None
    
    def generate_audio_advanced(self, text: str, voice_id: str = "jP9L6ZC55cz5mmx4ZpCk", 
                               model_id: str = "eleven_flash_v2_5", 
                               speed: float = 1.0,
                               stability: float = 0.5, 
                               similarity_boost: float = 0.5):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
        try:
            print(f"üéµ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {text[:50]}... (speed={speed}, stability={stability}, similarity_boost={similarity_boost})")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            audio = elevenlabs.generate(
                text=text,
                voice=voice_id,
                model=model_id
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            return self._save_audio_to_static(audio, text)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return self._create_audio_placeholder(text)
    
    def get_all_available_voices_from_api(self):
        """
        –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥–æ–ª–æ—Å–∞ –∏–∑ API –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ get_available_voices() –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π!
        """
        try:
            voices = elevenlabs.voices()
            result = []
            for voice in voices:
                result.append({
                    "voice_id": voice.voice_id,
                    "name": voice.name,
                    "category": getattr(voice, 'category', ''),
                    "labels": getattr(voice, 'labels', {}),
                    "preview_url": getattr(voice, 'preview_url', None)
                })
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result)} –≥–æ–ª–æ—Å–æ–≤ –∏–∑ API")
            return result
        except Exception as e:
            print(f"‚ö†Ô∏è Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤ - {e}")
            return self.get_available_voices()  # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥!
    
    def generate_audio_with_parameters(
        self, 
        text: str, 
        voice_id: str = None,
        model_id: str = "eleven_flash_v2_5",
        stability: float = 0.5,
        similarity_boost: float = 0.5,
        style: float = 0.0
    ):
        """
        –ù–û–í–´–ô –ú–ï–¢–û–î: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        –°—Ç–∞—Ä—ã–π generate_audio() –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π!
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if hasattr(self, 'generate_audio'):
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                if stability == 0.5 and similarity_boost == 0.5 and style == 0.0:
                    return self.generate_audio(text, voice_id, model_id)
            
            # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            print(f"üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: stability={stability}, similarity_boost={similarity_boost}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            audio_data = self.text_to_speech_advanced(
                text, voice_id, model_id, 
                stability=stability, 
                similarity_boost=similarity_boost
            )
            
            if audio_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤ —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º URL
                return self._save_audio_to_static(audio_data, text)
            else:
                # Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥
                return self.generate_audio(text, voice_id, model_id)
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, fallback –Ω–∞ –±–∞–∑–æ–≤—É—é: {e}")
            return self.generate_audio(text, voice_id, model_id)
