import os
import assemblyai as aai
from typing import Optional
import time
import requests

class AssemblyAIClient:
    def __init__(self, api_key: Optional[str] = None):
        self.api_key = api_key or os.getenv('ASSEMBLYAI_API_KEY', 'test-key-placeholder')
        if not self.api_key or self.api_key == 'test-key-placeholder':
            print("‚ö†Ô∏è AssemblyAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É")
        else:
            aai.settings.api_key = self.api_key

    def transcribe_audio_url(self, audio_url: str, language_code: str = "ru") -> str:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
            if not self.api_key or self.api_key == 'test-key-placeholder':
                return f"–î–µ–º–æ-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª—è {audio_url[:50]}... (AssemblyAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)"
            
            print(f"üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∞—É–¥–∏–æ: {audio_url[:50]}...")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            config = aai.TranscriptionConfig(
                language_code=language_code, 
                punctuate=True, 
                format_text=True,
                auto_highlights=True,
                sentiment_analysis=True
            )
            
            transcriber = aai.Transcriber(config=config)
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            transcript = transcriber.transcribe(audio_url)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            timeout = 300  # 5 –º–∏–Ω—É—Ç –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
            start_time = time.time()
            
            while transcript.status not in [aai.TranscriptStatus.completed, aai.TranscriptStatus.error]:
                if time.time() - start_time > timeout:
                    raise TimeoutError("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
                
                time.sleep(2)
                print(f"‚è≥ –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {transcript.status}")
            
            if transcript.status == aai.TranscriptStatus.error:
                raise RuntimeError(f"AssemblyAI error: {transcript.error}")
            
            if transcript.status == aai.TranscriptStatus.completed:
                print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return transcript.text
            else:
                raise RuntimeError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {transcript.status}")
                
        except TimeoutError as e:
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return f"–û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞: {str(e)}"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {str(e)}"

    def transcribe_video_url(self, video_url: str, language_code: str = "ru") -> str:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ"""
        return self.transcribe_audio_url(video_url, language_code)

    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AssemblyAI"""
        try:
            if not self.api_key or self.api_key == 'test-key-placeholder':
                print("‚ö†Ô∏è AssemblyAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            response = requests.get("https://api.assemblyai.com/v2/transcript", 
                                 headers={"authorization": self.api_key}, 
                                 timeout=10)
            return response.status_code in [200, 401]  # 401 —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AssemblyAI: {e}")
            return False
