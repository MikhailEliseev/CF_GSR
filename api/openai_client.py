import requests
import time
import json
import os
from typing import Optional, Dict, Any
from config import Config

class OpenAIClient:
    """–ö–ª–∏–µ–Ω—Ç OpenAI —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –∫–ª—é—á–µ–π."""

    def __init__(self, api_key: Optional[str] = None):
        # –ù–µ —Ö—Ä–∞–Ω–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –≤ –∫–æ–¥–µ, –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å —á–∏—Ç–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.api_key = api_key or os.getenv("OPENAI_API_KEY")
        self.session = requests.Session()
        self.base_url = "https://api.openai.com/v1"

    @property
    def headers(self) -> Dict[str, str]:
        if not self.api_key:
            return {"Content-Type": "application/json"}
        return {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
    
    def _chat_completion(self, messages: list) -> str:
        """–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ OpenAI API —Å fallback –Ω–∞ Gemini"""
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞ OpenAI - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –±–µ–∑ —ç–º–æ–¥–∑–∏
        if not self.api_key:
            print("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –±–µ–∑ —ç–º–æ–¥–∑–∏")
            return self._generate_error_fallback(messages)

        try:
            print(f"üîç OpenAI API: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Chat Completion API")
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π OpenAI API
            response = self.session.post(
                f"{self.base_url}/chat/completions",
                headers=self.headers,
                json={
                    "model": "gpt-4o-mini",
                    "messages": messages,
                    "temperature": 0.7,
                    "max_tokens": 4000
                },
                timeout=30
            )
            print(f"üîç OpenAI API: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                result = data['choices'][0]['message']['content'].strip()
                print(f"‚úÖ OpenAI API: –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                return result
            elif response.status_code == 429:
                # Quota exceeded - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –±–µ–∑ —ç–º–æ–¥–∑–∏
                print("‚ö†Ô∏è OpenAI quota exceeded, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –±–µ–∑ —ç–º–æ–¥–∑–∏")
                return self._generate_error_fallback(messages)
            else:
                raise Exception(f"OpenAI API error: {response.status_code}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –±–µ–∑ —ç–º–æ–¥–∑–∏")
            return self._generate_error_fallback(messages)
    
    def _gemini_request(self, messages: list) -> str:
        """–ó–∞–ø—Ä–æ—Å –∫ Gemini API"""
        gemini_api_key = "AIzaSyDFK7vrH2hpj37cfVLSz35kjIOe5U8PHxg"
        gemini_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={gemini_api_key}"
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º messages –≤ —Ñ–æ—Ä–º–∞—Ç Gemini
        system_prompt = ""
        user_content = ""
        
        for message in messages:
            if message["role"] == "system":
                system_prompt = message["content"]
            elif message["role"] == "user":
                user_content = message["content"]
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º system –∏ user –ø—Ä–æ–º–ø—Ç—ã
        full_prompt = f"{system_prompt}\n\n{user_content}" if system_prompt else user_content
        
        gemini_payload = {
            "contents": [
                {
                    "parts": [
                        {
                            "text": full_prompt
                        }
                    ]
                }
            ],
            "generationConfig": {
                "temperature": 0.7,
                "maxOutputTokens": 1000
            }
        }
        
        headers = {
            "Content-Type": "application/json"
        }
        
        resp = self.session.post(
            gemini_url,
            json=gemini_payload,
            headers=headers,
            timeout=30
        )
        
        if resp.status_code == 200:
            data = resp.json()
            if "candidates" in data and len(data["candidates"]) > 0:
                candidate = data["candidates"][0]
                if "content" in candidate and "parts" in candidate["content"]:
                    return candidate["content"]["parts"][0]["text"].strip()
        
        raise Exception(f"Gemini API error: {resp.status_code} - {resp.text}")
    
    def _generate_error_fallback(self, messages: list) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π fallback —Ç–µ–∫—Å—Ç –∫–æ–≥–¥–∞ –≤—Å–µ AI —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        user_content = ""
        for message in messages:
            if message["role"] == "user":
                user_content = message["content"]
                break
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–æ–∑–¥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π fallback
        if user_content and len(user_content) > 10:
            # –°–æ–∑–¥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ AI
            rewritten_text = self._create_quality_fallback(user_content)
            return rewritten_text
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: AI —Å–µ—Ä–≤–∏—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
    
    def _create_quality_fallback(self, original_text: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–æ—Å–ª–µ "–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:")
        if "–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:" in original_text:
            parts = original_text.split("–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:")
            if len(parts) > 1:
                text = parts[1].strip()
            else:
                text = original_text.strip()
        else:
            text = original_text.strip()
        
        # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        # if len(text) > 100:
        #     text = text[:100] + "..."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –≤ –∫–æ–Ω–µ—Ü
        if not text.endswith(("!", ".", "?")):
            text += "!"
        
        return text
    
    def rewrite_text(self, text: str, master_prompt: str = None) -> str:
        """–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Chat Completion API"""
        prompt = master_prompt or "–ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è Instagram Reels, —Å–¥–µ–ª–∞–π –µ–≥–æ –±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ –≤–∏—Ä—É—Å–Ω—ã–º"
        messages = [
            {"role": "system", "content": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π"},
            {"role": "user", "content": f"{prompt}:\n\n{text}"}
        ]
        return self._chat_completion(messages)
    
    def _extract_field(self, text: str, pattern: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–ª–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é"""
        import re
        match = re.search(pattern, text, re.IGNORECASE)
        return match.group(1).strip() if match else ""
    
    def create_assistant_message(self, assistant_id: str, content: str, 
                               max_retries: int = 3) -> Optional[Dict[Any, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI Assistant API"""
        if not self.api_key:
            fallback_messages = [
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": content}
            ]
            text = self._generate_error_fallback(fallback_messages)
            return {'content': text, 'thread_id': None, 'run_id': None}

        try:
            # –°–æ–∑–¥–∞–µ–º thread
            thread_response = self.session.post(
                f"{self.base_url}/threads",
                headers=self.assistant_headers,
                json={}
            )
            
            if thread_response.status_code != 200:
                raise Exception(f"Failed to create thread: {thread_response.text}")
            
            thread_id = thread_response.json()['id']
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ thread
            message_response = self.session.post(
                f"{self.base_url}/threads/{thread_id}/messages",
                headers=self.assistant_headers,
                json={
                    "role": "user",
                    "content": content
                }
            )
            
            if message_response.status_code != 200:
                raise Exception(f"Failed to add message: {message_response.text}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º assistant
            run_response = self.session.post(
                f"{self.base_url}/threads/{thread_id}/runs",
                headers=self.assistant_headers,
                json={
                    "assistant_id": assistant_id
                }
            )
            
            if run_response.status_code != 200:
                raise Exception(f"Failed to run assistant: {run_response.text}")
            
            run_id = run_response.json()['id']
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            for _ in range(30):  # 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
                status_response = self.session.get(
                    f"{self.base_url}/threads/{thread_id}/runs/{run_id}",
                    headers=self.assistant_headers
                )
                
                if status_response.status_code == 200:
                    status_data = status_response.json()
                    if status_data['status'] == 'completed':
                        break
                    elif status_data['status'] == 'failed':
                        raise Exception("Assistant run failed")
                time.sleep(1)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            messages_response = self.session.get(
                f"{self.base_url}/threads/{thread_id}/messages",
                headers=self.assistant_headers
            )
            
            if messages_response.status_code == 200:
                messages_data = messages_response.json()
                for message in messages_data['data']:
                    if message['role'] == 'assistant':
                        return {
                            'content': message['content'][0]['text']['value'],
                            'thread_id': thread_id,
                            'run_id': run_id
                        }
            
            return None
            
        except Exception as e:
            print(f"Assistant API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π chat completion
            messages = [
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": content}
            ]
            text = self._chat_completion(messages)
            return {'content': text, 'thread_id': None, 'run_id': None}
    
    def extract_redpolicy_text(self, pdf_path: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF —Ä–µ–¥–ø–æ–ª–∏—Ç–∏–∫–∏"""
        import PyPDF2
        import os
        
        if not os.path.exists(pdf_path):
            return ""
        
        text = ""
        try:
            with open(pdf_path, 'rb') as file:
                reader = PyPDF2.PdfReader(file)
                for page in reader.pages:
                    text += page.extract_text()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF: {e}")
            return ""
        
        return text.strip()

    def generate_text_for_video(self, assistant_id: str, prompt: str, context: str = "", redpolicy_path: str = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Chat Completion API
        –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø—Ä–æ–º–ø—Ç–æ–º —Å —Ä–µ–¥–ø–æ–ª–∏—Ç–∏–∫–æ–π
        """
        redpolicy_text = ""
        if redpolicy_path:
            redpolicy_text = self.extract_redpolicy_text(redpolicy_path)
        
        system_prompt = f"""{prompt}

{redpolicy_text if redpolicy_text else ""}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ù–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –≠–ú–û–î–ó–ò - —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
- –ù–ï –∫–æ–ø–∏—Ä—É–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–¥–∏–Ω –≤ –æ–¥–∏–Ω
- –°–æ–∑–¥–∞–π –ù–û–í–´–ô –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã
- –î–ª–∏–Ω–∞: 100-120 —Å–ª–æ–≤ –¥–ª—è 40 —Å–µ–∫—É–Ω–¥ —á—Ç–µ–Ω–∏—è
- –°–¥–µ–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –∂–∏–≤—ã–º, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –¥–ª—è –æ–∑–≤—É—á–∫–∏
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Å—Ç–∏–ª—å
- –°–æ–∑–¥–∞—Ç—å –∫—Ä—é—á–æ–∫ –≤ –Ω–∞—á–∞–ª–µ –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –≤–Ω–∏–º–∞–Ω–∏—è
- –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –≤ –∫–æ–Ω—Ü–µ
- –ò–∑–±–µ–≥–∞—Ç—å —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –¥–ª–∏–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π

–°–¢–ò–õ–¨: –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π, –ë–ï–ó –≠–ú–û–î–ó–ò, –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""

        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": f"–°–æ–∑–¥–∞–π –ù–û–í–´–ô —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π —Ç–µ–º—ã:\n\n{context}"}
        ]
        
        result = self._chat_completion(messages)
        
        print(f"üîç DEBUG: –î–æ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏: {result[:100]}...")
        
        # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞: —É–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        import re
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç–º–æ–¥–∑–∏ (—Å–∏–º–≤–æ–ª—ã —Å –∫–æ–¥–∞–º–∏ > 127)
        result = re.sub(r'[^\x00-\x7F]+', '', result)
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        result = re.sub(r'\s+', ' ', result).strip()
        
        print(f"üîç DEBUG: –ü–æ—Å–ª–µ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏: {result[:100]}...")
        
        return result
    
    def test_connection(self, assistant_id: str) -> bool:
        try:
            self._chat_completion([
                {"role": "user", "content": "say ok"}
            ])
            return True
        except Exception:
            return False
    
    # ========== –ú–ï–¢–û–î–´ –î–õ–Ø ASSISTANT API V2 ==========
    
    @property
    def assistant_headers(self) -> Dict[str, str]:
        """–ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Assistant API —Å beta –≤–µ—Ä—Å–∏–µ–π"""
        if not self.api_key:
            return {"Content-Type": "application/json"}
        return {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "OpenAI-Beta": "assistants=v2"
        }
    
    def create_thread(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π thread –¥–ª—è Assistant API"""
        try:
            response = self.session.post(
                f"{self.base_url}/threads",
                headers=self.assistant_headers,
                json={},
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()['id']
            else:
                raise Exception(f"Failed to create thread: {response.status_code} - {response.text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è thread: {e}")
            return None
    
    def add_message(self, thread_id: str, content: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ thread"""
        try:
            response = self.session.post(
                f"{self.base_url}/threads/{thread_id}/messages",
                headers=self.assistant_headers,
                json={
                    "role": "user",
                    "content": content
                },
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()['id']
            else:
                raise Exception(f"Failed to add message: {response.status_code} - {response.text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    def run_assistant(self, thread_id: str, assistant_id: str) -> str:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç assistant –≤ thread"""
        try:
            response = self.session.post(
                f"{self.base_url}/threads/{thread_id}/runs",
                headers=self.assistant_headers,
                json={
                    "assistant_id": assistant_id
                },
                timeout=30
            )
            
            if response.status_code == 200:
                return response.json()['id']
            else:
                raise Exception(f"Failed to run assistant: {response.status_code} - {response.text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ assistant: {e}")
            return None
    
    def get_response(self, thread_id: str, run_id: str, timeout: int = 60) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç assistant —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        try:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è run
            for i in range(timeout):
                status_response = self.session.get(
                    f"{self.base_url}/threads/{thread_id}/runs/{run_id}",
                    headers=self.assistant_headers,
                    timeout=30
                )
                
                if status_response.status_code == 200:
                    status_data = status_response.json()
                    status = status_data['status']
                    
                    if status == 'completed':
                        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                        messages_response = self.session.get(
                            f"{self.base_url}/threads/{thread_id}/messages",
                            headers=self.assistant_headers,
                            timeout=30
                        )
                        
                        if messages_response.status_code == 200:
                            messages = messages_response.json()['data']
                            if messages:
                                # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç assistant
                                for msg in messages:
                                    if msg['role'] == 'assistant':
                                        return msg['content'][0]['text']['value']
                        break
                    elif status == 'failed':
                        raise Exception("Assistant run failed")
                
                time.sleep(1)
            
            raise Exception(f"Timeout waiting for assistant response ({timeout}s)")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
            return None
    
    def rewrite_with_assistant(self, transcript: str, assistant_id: str) -> str:
        """–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Assistant API —Å fallback"""
        with open('/var/www/gsr-content-factory/debug.log', 'a') as f:
            f.write(f"üîç DEBUG: api_key={self.api_key[:20]}..., assistant_id={assistant_id}\n")
        
        if not self.api_key or not assistant_id:
            with open('/var/www/gsr-content-factory/debug.log', 'a') as f:
                f.write(f"‚ö†Ô∏è Fallback: api_key={bool(self.api_key)}, assistant_id={bool(assistant_id)}\n")
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            return self._chat_completion([
                {"role": "user", "content": f"–ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è Instagram Reels, —Å–¥–µ–ª–∞–π –µ–≥–æ –±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ –≤–∏—Ä—É—Å–Ω—ã–º:\n\n{transcript}"}
            ])
        
        try:
            # –°–æ–∑–¥–∞–µ–º thread
            thread_id = self.create_thread()
            if not thread_id:
                raise Exception("Failed to create thread")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_id = self.add_message(thread_id, transcript)
            if not message_id:
                raise Exception("Failed to add message")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º assistant
            run_id = self.run_assistant(thread_id, assistant_id)
            if not run_id:
                raise Exception("Failed to run assistant")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            response = self.get_response(thread_id, run_id, timeout=60)
            if response:
                return response
            else:
                raise Exception("Failed to get response")
                
        except Exception as e:
            print(f"‚ùå Assistant API failed: {e}, falling back to chat completion")
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            return self._chat_completion([
                {"role": "user", "content": f"–ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è Instagram Reels, —Å–¥–µ–ª–∞–π –µ–≥–æ –±–æ–ª–µ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ –≤–∏—Ä—É—Å–Ω—ã–º:\n\n{transcript}"}
            ])