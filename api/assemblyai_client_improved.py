#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π AssemblyAI –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π webhooks
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç API –∫–ª—é—á: e4b374b6b23642cdafecfa3e92da87a5
"""

import os
import assemblyai as aai
from typing import Optional, Dict, Any
import time
import requests
import json
import threading
from flask import Flask, request, jsonify

class AssemblyAIClientImproved:
    def __init__(self, api_key: Optional[str] = None):
        self.api_key = api_key or os.getenv('ASSEMBLYAI_API_KEY', 'e4b374b6b23642cdafecfa3e92da87a5')
        if not self.api_key or self.api_key == 'test-key-placeholder':
            print("‚ö†Ô∏è AssemblyAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É")
        else:
            aai.settings.api_key = self.api_key
            print(f"‚úÖ AssemblyAI API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {self.api_key[:10]}...")
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        self.transcripts = {}
        self.webhook_app = None
        self.webhook_thread = None

    def transcribe_audio_url_async(self, audio_url: str, language_code: str = "ru", webhook_url: str = None) -> str:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º webhooks"""
        try:
            if not self.api_key or self.api_key == 'test-key-placeholder':
                return f"–î–µ–º–æ-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª—è {audio_url[:50]}... (AssemblyAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)"
            
            print(f"üé§ –ó–∞–ø—É—Å–∫–∞—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é: {audio_url[:50]}...")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å webhook (—É–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞)
            config = aai.TranscriptionConfig(
                language_code=language_code,
                punctuate=True,
                format_text=True,
                speaker_labels=True
            )
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω webhook URL, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if webhook_url:
                config = config.set_webhook(webhook_url)
                print(f"üîó Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {webhook_url}")
            
            transcriber = aai.Transcriber(config=config)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é (–Ω–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
            transcript = transcriber.submit(audio_url)
            
            print(f"üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, ID: {transcript.id}")
            return transcript.id
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return f"–û—à–∏–±–∫–∞: {str(e)}"

    def transcribe_audio_url_sync(self, audio_url: str, language_code: str = "ru") -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ fallback –¥–ª—è Instagram URL"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ Instagram URL (–∑–∞–≥–ª—É—à–∫–∞)
            if 'instagram.com/p/' in audio_url or 'instagram.com/reel/' in audio_url:
                print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω Instagram URL: {audio_url}")
                print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è Instagram –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                return self._get_demo_transcript_for_instagram()
            
            if not self.api_key or self.api_key == 'test-key-placeholder':
                return f"–î–µ–º–æ-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª—è {audio_url[:50]}... (AssemblyAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)"
            
            print(f"üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∞—É–¥–∏–æ: {audio_url[:50]}...")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (—É–±–∏—Ä–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞)
            config = aai.TranscriptionConfig(
                language_code=language_code,
                punctuate=True,
                format_text=True,
                speaker_labels=True
            )
            
            transcriber = aai.Transcriber(config=config)
            
            # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            transcript = transcriber.transcribe(audio_url)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            timeout = 120  # 2 –º–∏–Ω—É—Ç—ã
            start_time = time.time()
            
            while transcript.status not in [aai.TranscriptStatus.completed, aai.TranscriptStatus.error]:
                if time.time() - start_time > timeout:
                    raise TimeoutError("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
                
                time.sleep(3)
                print(f"‚è≥ –°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {transcript.status}")
            
            if transcript.status == aai.TranscriptStatus.error:
                raise RuntimeError(f"AssemblyAI error: {transcript.error}")
            
            if transcript.status == aai.TranscriptStatus.completed:
                print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return transcript.text
            else:
                raise RuntimeError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {transcript.status}")
                
        except TimeoutError as e:
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return f"–û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞: {str(e)}"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {str(e)}"

    def get_transcript_by_id(self, transcript_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–æ ID"""
        try:
            transcript = aai.Transcript.get_by_id(transcript_id)
            
            if transcript.status == "error":
                return {
                    "success": False,
                    "error": transcript.error,
                    "status": "error"
                }
            
            if transcript.status == "completed":
                return {
                    "success": True,
                    "text": transcript.text,
                    "status": "completed",
                    "confidence": getattr(transcript, 'confidence', None),
                    "words": getattr(transcript, 'words', None),
                    "sentiment_analysis": getattr(transcript, 'sentiment_analysis_results', None)
                }
            else:
                return {
                    "success": False,
                    "status": transcript.status,
                    "message": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞"
                }
                
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "status": "error"
            }

    def start_webhook_server(self, port: int = 5001):
        """–ó–∞–ø—É—Å–∫ webhook —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if self.webhook_app:
            return
        
        self.webhook_app = Flask(__name__)
        
        @self.webhook_app.route('/webhook/assemblyai', methods=['POST'])
        def handle_webhook():
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç AssemblyAI"""
            try:
                data = request.get_json()
                transcript_id = data.get('transcript_id')
                status = data.get('status')
                
                print(f"üì® –ü–æ–ª—É—á–µ–Ω webhook: {transcript_id} - {status}")
                
                if status == "completed":
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                    result = self.get_transcript_by_id(transcript_id)
                    if result['success']:
                        self.transcripts[transcript_id] = result
                        print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è {transcript_id} –≥–æ—Ç–æ–≤–∞")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ {transcript_id}: {result.get('error')}")
                elif status == "error":
                    print(f"‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è {transcript_id} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
                    self.transcripts[transcript_id] = {"success": False, "error": "Transcription failed"}
                
                return jsonify({"status": "received"})
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
                return jsonify({"error": str(e)}), 500
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_webhook():
            self.webhook_app.run(host='0.0.0.0', port=port, debug=False)
        
        self.webhook_thread = threading.Thread(target=run_webhook, daemon=True)
        self.webhook_thread.start()
        
        print(f"üîó Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AssemblyAI"""
        try:
            if not self.api_key or self.api_key == 'test-key-placeholder':
                print("‚ö†Ô∏è AssemblyAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            response = requests.get("https://api.assemblyai.com/v2/transcript", 
                                 headers={"authorization": self.api_key}, 
                                 timeout=10)
            return response.status_code in [200, 401]  # 401 —Ç–æ–∂–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AssemblyAI: {e}")
            return False

    def transcribe_video_url(self, video_url: str, language_code: str = "ru") -> str:
        """–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        return self.transcribe_audio_url_sync(video_url, language_code)

    def transcribe_audio_url(self, audio_url: str, language_code: str = "ru") -> str:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        return self.transcribe_audio_url_sync(audio_url, language_code)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    def _get_demo_transcript_for_instagram(self) -> str:
        """–î–µ–º–æ-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª—è Instagram –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        demo_transcripts = [
            "–ü—Ä–∏–≤–µ—Ç! –°–µ–≥–æ–¥–Ω—è —è —Ä–∞—Å—Å–∫–∞–∂—É –≤–∞–º –æ —Ç–æ–º, –∫–∞–∫ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã. –ú–Ω–æ–≥–∏–µ –ª—é–¥–∏ –∏—â—É—Ç —Ä–∞–±–æ—Ç—É, –Ω–æ –Ω–µ –∑–Ω–∞—é—Ç —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å. –í —ç—Ç–æ–º –≤–∏–¥–µ–æ —è –ø–æ–¥–µ–ª—é—Å—å —Å–µ–∫—Ä–µ—Ç–∞–º–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã.",
            "–†–∞–±–æ—Ç–∞ - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏, —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ –º–µ—á—Ç—ã. –Ø —Ä–∞–±–æ—Ç–∞—é –≤ HR —É–∂–µ 5 –ª–µ—Ç –∏ –∑–Ω–∞—é, —á—Ç–æ –∏—â—É—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–∏. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –º–Ω–æ–π, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ!",
            "–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ 80% –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ? –≠—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∫—Ä—ã—Ç—ã–π —Ä—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞. –°–µ–≥–æ–¥–Ω—è —è —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —ç—Ç–æ—Ç —Ä—ã–Ω–æ–∫ –∏ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É —Å–≤–æ–µ–π –º–µ—á—Ç—ã.",
            "–ú–Ω–æ–≥–∏–µ –¥—É–º–∞—é—Ç, —á—Ç–æ –¥–ª—è —Ö–æ—Ä–æ—à–µ–π —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞–≤—ã–∫–∏. –ù–æ —ç—Ç–æ –Ω–µ —Ç–∞–∫! –í–∞–∂–Ω–æ —É–º–µ—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞—Ç—å —Å–µ–±—è, –ø–∏—Å–∞—Ç—å —Ä–µ–∑—é–º–µ –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è. –Ø –Ω–∞—É—á—É –≤–∞—Å –≤—Å–µ–º—É —ç—Ç–æ–º—É.",
            "–†–∞–±–æ—Ç–∞ –≤ IT - —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ. –ï—Å—Ç—å –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: –¥–∏–∑–∞–π–Ω, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥, –ø—Ä–æ–¥–∞–∂–∏, HR. –í —ç—Ç–æ–º –≤–∏–¥–µ–æ —è —Ä–∞—Å—Å–∫–∞–∂—É –æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –≤ IT —Å—Ñ–µ—Ä–µ."
        ]
        
        import random
        return random.choice(demo_transcripts)

def test_assemblyai():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AssemblyAI –∫–ª–∏–µ–Ω—Ç–∞"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ASSEMBLYAI –ö–õ–ò–ï–ù–¢–ê")
    print("="*50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
    client = AssemblyAIClientImproved()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    print("üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
    if client.test_connection():
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AssemblyAI —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ AssemblyAI")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
    test_url = "https://storage.googleapis.com/aai-web-samples/5_common_sports_injuries.mp3"
    print(f"üé§ –¢–µ—Å—Ç–∏—Ä—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é: {test_url}")
    
    try:
        result = client.transcribe_audio_url(test_url)
        print(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:100]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")

if __name__ == "__main__":
    test_assemblyai()
