import os
import uuid
from typing import Optional
try:
    from elevenlabs import ElevenLabs, play
except ImportError:
    # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
    import elevenlabs
    ElevenLabs = elevenlabs.ElevenLabs
    play = elevenlabs.play

class ElevenLabsClientNew:
    def __init__(self, api_key: str = None):
        self.api_key = api_key or os.getenv("ELEVENLABS_API_KEY", "1d5cd83ef960acc13a1a1dd9a1c87cab2309bc763255060a9ff75203751a1c85")
        self.client = ElevenLabs(api_key=self.api_key)
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
        self.available_voices = {
            "JBFqnCBsd6RMkjVDRZzb": "Rachel (Female, American)",
            "EXAVITQu4vr4xnSDxMaL": "Bella (Female, American)", 
            "VR6AewLTigWG4xSOukaG": "Josh (Male, American)",
            "AZnzlk1XvdvUeBnXmlld": "Domi (Female, American)",
            "MF3mGyEYCl7XYWbV9V6O": "Elli (Female, American)"
        }
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
        self.available_models = {
            "eleven_multilingual_v2": "Eleven Multilingual v2 (29 —è–∑—ã–∫–æ–≤)",
            "eleven_flash_v2_5": "Eleven Flash v2.5 (32 —è–∑—ã–∫–∞, –±—ã—Å—Ç—Ä—ã–π)",
            "eleven_turbo_v2_5": "Eleven Turbo v2.5 (32 —è–∑—ã–∫–∞, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)"
        }
    
    def test_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ElevenLabs API"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤
            voices = self.client.voices.get_all()
            print(f"‚úÖ ElevenLabs API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–π–¥–µ–Ω–æ {len(voices)} –≥–æ–ª–æ—Å–æ–≤")
            return True
        except Exception as e:
            print(f"‚ùå ElevenLabs API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    def get_available_voices(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤"""
        try:
            voices = self.client.voices.get_all()
            return [
                {
                    "voice_id": voice.voice_id,
                    "name": voice.name,
                    "category": getattr(voice, 'category', ''),
                    "description": getattr(voice, 'description', ''),
                    "preview_url": getattr(voice, 'preview_url', '')
                }
                for voice in voices
            ]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤: {e}")
            return []
    
    def text_to_speech(self, text: str, voice_id: str = "JBFqnCBsd6RMkjVDRZzb", 
                      model_id: str = "eleven_multilingual_v2") -> Optional[bytes]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π
        """
        try:
            print(f"üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ: {text[:50]}...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API
            audio = self.client.generate(
                text=text,
                voice=voice_id,
                model=model_id
            )
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ bytes
            audio_bytes = b''.join(audio)
            print(f"‚úÖ –ê—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(audio_bytes)} –±–∞–π—Ç")
            return audio_bytes
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            return None
    
    def generate_audio(self, text: str, voice_id: str = "JBFqnCBsd6RMkjVDRZzb", 
                      model_id: str = "eleven_multilingual_v2") -> Optional[str]:
        """
        –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω: —Ç–µ–∫—Å—Ç -> –∞—É–¥–∏–æ -> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        """
        print(f"üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞: {text[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not self.test_connection():
            print("‚ö†Ô∏è ElevenLabs API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return self._create_audio_placeholder(text)
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            audio_data = self.text_to_speech(text, voice_id, model_id)
            if not audio_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
                return self._create_audio_placeholder(text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            audio_dir = "static/audio"
            os.makedirs(audio_dir, exist_ok=True)
            
            filename = f"audio_{uuid.uuid4().hex}.mp3"
            filepath = os.path.join(audio_dir, filename)
            
            with open(filepath, 'wb') as f:
                f.write(audio_data)
            
            os.chmod(filepath, 0o644)
            
            print(f"‚úÖ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filepath}")
            return f"/static/audio/{filename}"
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ: {e}")
            return self._create_audio_placeholder(text)
    
    def _create_audio_placeholder(self, text: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –∞—É–¥–∏–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("üîÑ –°–æ–∑–¥–∞–µ–º fallback –∞—É–¥–∏–æ")
        
        audio_dir = "static/audio"
        os.makedirs(audio_dir, exist_ok=True)
        
        filename = f"placeholder_{uuid.uuid4().hex}.mp3"
        filepath = os.path.join(audio_dir, filename)
        
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–Ω—ã–π MP3 —Ñ–∞–π–ª
        mp3_header = bytes([
            0xFF, 0xFB, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ])
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ~5 —Å–µ–∫—É–Ω–¥ —Ç–∏—à–∏–Ω—ã
        audio_data = mp3_header * 500
        
        with open(filepath, 'wb') as f:
            f.write(audio_data)
        
        os.chmod(filepath, 0o644)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞: {filepath} ({len(audio_data)} –±–∞–π—Ç)")
        return f"/static/audio/{filename}"
    
    def play_audio(self, audio_data: bytes):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        try:
            play(audio_data)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
    
    def get_voice_info(self, voice_id: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–ª–æ—Å–µ"""
        return self.available_voices.get(voice_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ–ª–æ—Å")
    
    def get_model_info(self, model_id: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏"""
        return self.available_models.get(model_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
