#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç CSV –∑–∞–≥—Ä—É–∑–∫–∏ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from routes.vacancies import parse_vacancies_direct
import json

def test_csv_parsing_with_real_data():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π CSV
    with open("/Users/mikhaileliseev/Desktop/–ö–ó GSR/test_data/test_vacancies_full.csv", "r", encoding="utf-8") as f:
        csv_data = f.read()
    
    print(f"üìÑ –†–∞–∑–º–µ—Ä CSV —Ñ–∞–π–ª–∞: {len(csv_data)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"üìÑ –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:\n{csv_data[:200]}")
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    vacancies = parse_vacancies_direct(csv_data)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(vacancies)}")
    
    if vacancies:
        print(f"\nüìã –ü–µ—Ä–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è:")
        first_vacancy = vacancies[0]
        for key, value in first_vacancy.items():
            print(f"  {key}: {value}")
        
        print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–∞–∫–∞–Ω—Å–∏—è:")
        last_vacancy = vacancies[-1]
        for key, value in last_vacancy.items():
            print(f"  {key}: {value}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö:")
    
    valid_vacancies = 0
    for i, vacancy in enumerate(vacancies):
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not vacancy.get('position', '').strip():
            issues.append("–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")
        if not vacancy.get('salary', '').strip():
            issues.append("–ù–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã")
        if not vacancy.get('company', '').strip():
            issues.append("–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏")
        
        if not issues:
            valid_vacancies += 1
        else:
            print(f"  –í–∞–∫–∞–Ω—Å–∏—è {i+1}: {', '.join(issues)}")
    
    print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: {valid_vacancies}/{len(vacancies)}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∫–∞—á–µ—Å—Ç–≤–∞: {(valid_vacancies/len(vacancies)*100):.1f}%" if vacancies else "0%")
    
    return len(vacancies) > 0

def test_column_mapping():
    """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–æ–∫"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–æ–∫...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π CSV —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    test_csv = """–ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏,–û–±—ä–µ–∫—Ç,–û–ø–ª–∞—Ç–∞,–£—Å–ª–æ–≤–∏—è,–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è,–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å,–ú–µ–Ω–µ–¥–∂–µ—Ä,–Æ—Ä.–ª–∏—Ü–æ,–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
–î–æ–ª–∂–Ω–æ—Å—Ç—å:,–û–±—ä–µ–∫—Ç,–û–ø–ª–∞—Ç–∞,–£—Å–ª–æ–≤–∏—è,–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è,–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å,–ú–µ–Ω–µ–¥–∂–µ—Ä,–Æ—Ä.–ª–∏—Ü–æ,–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
,–¢–µ—Å—Ç–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è,1000 —Ä—É–±/—á–∞—Å,8 —á–∞—Å–æ–≤,–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã,5 —á–µ–ª.,–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤,–û–û–û –¢–µ—Å—Ç,–•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è"""
    
    vacancies = parse_vacancies_direct(test_csv)
    
    if not vacancies:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return False
    
    vacancy = vacancies[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –º–∞–ø–ø–∏–Ω–≥–∞
    expected_mapping = {
        'position': '–¢–µ—Å—Ç–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è',  # B (–∏–Ω–¥–µ–∫—Å 1)
        'salary': '1000 —Ä—É–±/—á–∞—Å',         # C (–∏–Ω–¥–µ–∫—Å 2) 
        'conditions': '8 —á–∞—Å–æ–≤',          # D (–∏–Ω–¥–µ–∫—Å 3)
        'requirements': '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã',    # E (–∏–Ω–¥–µ–∫—Å 4)
        'positions_needed': '5 —á–µ–ª.',     # F (–∏–Ω–¥–µ–∫—Å 5)
        'manager': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',         # G (–∏–Ω–¥–µ–∫—Å 6)
        'company': '–û–û–û –¢–µ—Å—Ç',           # H (–∏–Ω–¥–µ–∫—Å 7)
        'benefits': '–•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è'     # I (–∏–Ω–¥–µ–∫—Å 8)
    }
    
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫:")
    all_correct = True
    
    for field, expected_value in expected_mapping.items():
        actual_value = vacancy.get(field, '')
        if actual_value == expected_value:
            print(f"  ‚úÖ {field}: {actual_value}")
        else:
            print(f"  ‚ùå {field}: –æ–∂–∏–¥–∞–ª–æ—Å—å '{expected_value}', –ø–æ–ª—É—á–µ–Ω–æ '{actual_value}'")
            all_correct = False
    
    return all_correct

def run_final_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã CSV –∑–∞–≥—Ä—É–∑–∫–∏...")
    print("="*60)
    
    try:
        # –¢–µ—Å—Ç 1: –ü–∞—Ä—Å–∏–Ω–≥ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        test1_success = test_csv_parsing_with_real_data()
        
        # –¢–µ—Å—Ç 2: –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–æ–∫
        test2_success = test_column_mapping()
        
        print("\n" + "="*60)
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {'–ü–†–û–ô–î–ï–ù' if test1_success else '–ü–†–û–í–ê–õ–ï–ù'}")
        print(f"‚úÖ –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫: {'–ü–†–û–ô–î–ï–ù' if test2_success else '–ü–†–û–í–ê–õ–ï–ù'}")
        
        if test1_success and test2_success:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("üìã –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:")
            print("  ‚Ä¢ –ò–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
            print("  ‚Ä¢ Circular import —É–±—Ä–∞–Ω")
            print("  ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
            print("  ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
            print("  ‚Ä¢ –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            return True
        else:
            print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
            return False
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = run_final_tests()
    exit(0 if success else 1)
