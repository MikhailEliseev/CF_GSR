#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Submagic API
–ü—Ä—è–º–æ–π Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Submagic –±–µ–∑ Flask
"""

import requests
import json
import os
import glob
import time
from typing import Dict, Any

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SUBMAGIC_API_KEY = "sk-f5cfec75ecd20466f31774ccd701dc42ff0aaa71602cd27cd1db2f6a43c5ab31"
SUBMAGIC_BASE_URL = "https://api.submagic.co"
SERVER_BASE_URL = "http://72.56.66.228"

def find_latest_video() -> str:
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
    print("üîç –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
    
    # –ò—â–µ–º —á–µ—Ä–µ–∑ API —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get(f"{SERVER_BASE_URL}/api/trends/test-video-url", timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                video_url = data.get('video_url')
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: {video_url}")
                return video_url
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ API: {e}")
    
    # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤–∏–¥–µ–æ
    fallback_videos = [
        "http://72.56.66.228/static/video/caption_ab9279a3.mp4",
        "http://72.56.66.228/static/video/caption_a9487e76.mp4",
        "http://72.56.66.228/static/video/caption_ae7c953e.mp4"
    ]
    
    for video_url in fallback_videos:
        try:
            response = requests.head(video_url, timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ Fallback –≤–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ: {video_url}")
                return video_url
        except:
            continue
    
    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤–∏–¥–µ–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

def test_submagic_connection() -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Submagic API"""
    print("üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Submagic API...")
    
    try:
        headers = {
            "x-api-key": SUBMAGIC_API_KEY,
            "Content-Type": "application/json"
        }
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º health check
        response = requests.get(f"{SUBMAGIC_BASE_URL}/health", headers=headers, timeout=10)
        print(f"üì° Health check: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ Submagic API –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ö†Ô∏è Submagic API –≤–µ—Ä–Ω—É–ª {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Submagic: {e}")
        return False

def test_submagic_templates() -> list:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ Submagic"""
    print("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤...")
    
    try:
        headers = {
            "x-api-key": SUBMAGIC_API_KEY,
            "Content-Type": "application/json"
        }
        
        response = requests.get(f"{SUBMAGIC_BASE_URL}/v1/templates", headers=headers, timeout=10)
        print(f"üì° Templates API: {response.status_code}")
        
        if response.status_code == 200:
            templates = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}")
            return templates
        else:
            print(f"‚ö†Ô∏è Templates API –≤–µ—Ä–Ω—É–ª {response.status_code}: {response.text}")
            return []
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        return []

def test_submagic_video_processing(video_url: str) -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Submagic"""
    print(f"üé¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ: {video_url}")
    
    try:
        headers = {
            "x-api-key": SUBMAGIC_API_KEY,
            "Content-Type": "application/json"
        }
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π Submagic API
        payload = {
            "title": "Test Video Processing",
            "language": "ru",
            "videoUrl": video_url
        }
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Submagic: {json.dumps(payload, indent=2)}")
        
        response = requests.post(
            f"{SUBMAGIC_BASE_URL}/v1/projects",
            json=payload,
            headers=headers,
            timeout=30
        )
        
        print(f"üì° –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code}")
        print(f"üìä –û—Ç–≤–µ—Ç: {response.text}")
        
        if response.status_code == 201:
            project_data = response.json()
            project_id = project_data.get('id')
            print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: {project_id}")
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å—Ç–∞—Ç—É—Å
            return monitor_project_status(project_id, headers)
        else:
            return {
                'success': False,
                'error': f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {response.status_code} - {response.text}"
            }
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
        return {
            'success': False,
            'error': str(e)
        }

def monitor_project_status(project_id: str, headers: Dict[str, str]) -> Dict[str, Any]:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞"""
    print(f"üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ {project_id}...")
    
    max_attempts = 20  # 20 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 10 —Å–µ–∫—É–Ω–¥ = 3.3 –º–∏–Ω—É—Ç—ã
    for attempt in range(max_attempts):
        try:
            response = requests.get(
                f"{SUBMAGIC_BASE_URL}/v1/projects/{project_id}",
                headers=headers,
                timeout=10
            )
            
            if response.status_code == 200:
                project_data = response.json()
                status = project_data.get('status', 'unknown')
                print(f"üìä –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: —Å—Ç–∞—Ç—É—Å = {status}")
                
                if status == 'completed':
                    video_url = project_data.get('videoUrl')
                    print(f"‚úÖ –ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {video_url}")
                    return {
                        'success': True,
                        'project_id': project_id,
                        'video_url': video_url,
                        'status': status
                    }
                elif status == 'failed':
                    error = project_data.get('error', 'Unknown error')
                    print(f"‚ùå –ü—Ä–æ–µ–∫—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {error}")
                    return {
                        'success': False,
                        'error': f"–ü—Ä–æ–µ–∫—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {error}"
                    }
                else:
                    print(f"‚è≥ –°—Ç–∞—Ç—É—Å: {status}, –∂–¥–µ–º...")
                    time.sleep(10)
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
                time.sleep(10)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            time.sleep(10)
    
    return {
        'success': False,
        'error': f"–ü—Ä–æ–µ–∫—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ {max_attempts * 10} —Å–µ–∫—É–Ω–¥"
    }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ SUBMAGIC API")
    print("=" * 50)
    
    # 1. –ù–∞—Ö–æ–¥–∏–º –≤–∏–¥–µ–æ
    try:
        video_url = find_latest_video()
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ: {e}")
        return
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not test_submagic_connection():
        print("‚ùå Submagic API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç...")
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã
    templates = test_submagic_templates()
    if templates:
        template_names = [t.get('name', 'Unknown') for t in templates[:3]] if isinstance(templates, list) else ['Unknown']
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã: {template_names}")
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ
    print(f"\nüé¨ –¢–ï–°–¢–ò–†–£–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ –í–ò–î–ï–û")
    print("-" * 30)
    result = test_submagic_video_processing(video_url)
    
    # 5. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 30)
    
    if result.get('success'):
        print(f"‚úÖ –£–°–ü–ï–•!")
        print(f"üé¨ –ü—Ä–æ–µ–∫—Ç: {result.get('project_id')}")
        print(f"üîó –í–∏–¥–µ–æ: {result.get('video_url')}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {result.get('status')}")
    else:
        print(f"‚ùå –û–®–ò–ë–ö–ê: {result.get('error')}")
    
    print(f"\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    main()
