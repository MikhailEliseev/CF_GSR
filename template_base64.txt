{% extends "base.html" %}

{% block title %}Модуль Трендвотчинга - Контент Завод{% endblock %}

{% block extra_head %}
<script>
// Функции для работы с конкурентами

async function loadCompetitors() {
    console.log('🔄 ЗАГРУЗКА КОНКУРЕНТОВ - НАЧАЛО');
    const container = document.getElementById('competitorsList');
    const countEl = document.getElementById('competitorsCount');
    
    if (!container) {
        console.error('❌ Элемент competitorsList не найден');
        return;
    }
    
    container.innerHTML = `
        <div class="text-center text-primary p-3">
            <div class="spinner-border spinner-border-sm me-2" role="status"></div>
            <span>Загружаем конкурентов...</span>
        </div>`;
    
    try {
        console.log('📡 ОТПРАВЛЯЕМ ЗАПРОС К /api/competitors');
        const response = await fetch('/api/competitors');
        console.log('📡 ОТВЕТ ПОЛУЧЕН:', response.status);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        
        const competitors = await response.json();
        console.log('📊 ДАННЫЕ ПОЛУЧЕНЫ:', competitors.length);

        if (!Array.isArray(competitors) || competitors.length === 0) {
            container.innerHTML = `
                <div class="text-center text-muted p-3">
                    <i class="fas fa-users fa-2x mb-2 text-muted"></i>
                    <div>Конкуренты не добавлены</div>
                </div>`;
            if (countEl) countEl.textContent = '0';
            return;
        }

        console.log('✅ РЕНДЕРИМ СПИСОК КОНКУРЕНТОВ В СТИЛЕ EXCEL');
        container.innerHTML = `
            <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
                <table class="table table-sm table-bordered table-hover mb-0" style="font-size: 14px;">
                    <thead class="table-dark sticky-top">
                        <tr>
                            <th width="40" class="text-center">
                                <input type="checkbox" id="selectAll" onchange="toggleAllCompetitors()" class="form-check-input">
                            </th>
                            <th width="60" class="text-center">№</th>
                            <th>Конкурент</th>
                            <th width="100" class="text-center">Платформа</th>
                            <th width="80" class="text-center">Статус</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${competitors.map((comp, index) => `
                            <tr class="align-middle">
                                <td class="text-center">
                                    <input type="checkbox" value="${comp.username}" id="comp_${comp.id}" ${index === 0 ? 'checked' : ''} onchange="updateCompetitorCount()" class="form-check-input">
                                </td>
                                <td class="text-center fw-bold text-muted">${index + 1}</td>
                                <td>
                    <div class="d-flex align-items-center">
                                        <i class="fas fa-user-circle me-2 text-primary"></i>
                                        <span class="fw-bold">@${comp.username}</span>
                        </div>
                                </td>
                                <td class="text-center">
                                    <span class="badge bg-info">${comp.platform}</span>
                                </td>
                                <td class="text-center">
                                    <span class="badge bg-success">Активен</span>
                                </td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
                    </div>
        `;
        
        if (countEl) countEl.textContent = competitors.length;
        
        console.log('✅ КОНКУРЕНТЫ ЗАГРУЖЕНЫ УСПЕШНО:', competitors.length);
        
    } catch (error) {
        console.error('❌ ОШИБКА:', error);
        container.innerHTML = `
            <div class="text-center text-danger p-3">
                <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                <div>Ошибка загрузки</div>
                <small>${error.message}</small>
            </div>`;
        if (countEl) countEl.textContent = '0';
    }
}

// Функции для работы с таблицей конкурентов
function toggleAllCompetitors() {
    const selectAll = document.getElementById('selectAll');
    const checkboxes = document.querySelectorAll('#competitorsList input[type="checkbox"]:not(#selectAll)');
    
    checkboxes.forEach(checkbox => {
        checkbox.checked = selectAll.checked;
    });
    
    updateCompetitorCount();
}

function updateCompetitorCount() {
    const checkedBoxes = document.querySelectorAll('#competitorsList input[type="checkbox"]:not(#selectAll):checked');
    const countEl = document.getElementById('competitorsCount');
    const selectAll = document.getElementById('selectAll');
    
    if (countEl) {
        countEl.textContent = checkedBoxes.length;
    }
    
    // Обновляем состояние "Выбрать всех"
    if (selectAll) {
        const allBoxes = document.querySelectorAll('#competitorsList input[type="checkbox"]:not(#selectAll)');
        selectAll.checked = checkedBoxes.length === allBoxes.length;
        selectAll.indeterminate = checkedBoxes.length > 0 && checkedBoxes.length < allBoxes.length;
    }
}

// Функция сбора рилсов конкурентов с увеличенным таймаутом
async function collectReels(event) {
    event.preventDefault();
    console.log('🎬 НАЧИНАЕМ СБОР РИЛСОВ КОНКУРЕНТОВ');
    
    const button = document.getElementById('collectButton');
    const statusDiv = document.getElementById('collectStatus');
    const reelsCount = document.getElementById('reelsCount').value;
    
    // Получаем выбранных конкурентов
    const selectedCompetitors = [];
    const checkboxes = document.querySelectorAll('#competitorsList input[type="checkbox"]:not(#selectAll):checked');
    
    checkboxes.forEach(checkbox => {
        selectedCompetitors.push(checkbox.value);
    });
    
    if (selectedCompetitors.length === 0) {
        statusDiv.innerHTML = `
            <div class="alert alert-warning">
                <i class="fas fa-exclamation-triangle me-2"></i>
                Выберите хотя бы одного конкурента
            </div>`;
        return;
    }
    
    console.log('📊 ВЫБРАННЫЕ КОНКУРЕНТЫ:', selectedCompetitors);
    console.log('📊 КОЛИЧЕСТВО РИЛСОВ:', reelsCount);
    
    // Предупреждение о таймауте для больших значений
    if (parseInt(reelsCount) > 5) {
        statusDiv.innerHTML = `
            <div class="alert alert-warning">
                <i class="fas fa-exclamation-triangle me-2"></i>
                <strong>Внимание!</strong> Большое количество рилсов (${reelsCount}) может вызвать таймаут.
                <br><small>Рекомендуется использовать 1-5 рилсов для стабильной работы</small>
            </div>`;
        return;
    }
    
    // Блокируем кнопку и показываем статус
    button.disabled = true;
    button.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Собираем рилсы...';
    
    statusDiv.innerHTML = `
        <div class="alert alert-info">
            <i class="fas fa-info-circle me-2"></i>
            Начинаем сбор рилсов для ${selectedCompetitors.length} конкурентов...
            <br><small class="text-muted">Это может занять несколько минут</small>
        </div>`;
    
    try {
        console.log('📡 ОТПРАВЛЯЕМ ЗАПРОС НА СБОР РИЛСОВ');
        
        // Создаем AbortController для контроля таймаута
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 600000); // 10 минут таймаут
        
        const response = await fetch('/api/trends/collect-reels', {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                competitors: selectedCompetitors,
                count: parseInt(reelsCount)
            }),
            signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        console.log('📡 ОТВЕТ ПОЛУЧЕН:', response.status);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.json();
        console.log('📊 РЕЗУЛЬТАТ СБОРА:', result);
        
        if (result.success) {
            statusDiv.innerHTML = `
                <div class="alert alert-success">
                    <i class="fas fa-check-circle me-2"></i>
                    Успешно собрано ${result.total_count || result.total_reels || 0} рилсов от ${selectedCompetitors.length} конкурентов
                    <br><small class="text-muted">Виральных: ${result.viral_count || 0}</small>
        </div>`;
            
            // Сохраняем данные в глобальную переменную
            window.collectedReelsData = result;
            console.log('💾 Данные рилсов сохранены:', result);
            
            // Активируем следующий шаг
            activateStep2();
            
            // Обновляем статистику
            updateReelsStats(result);
            
        } else {
            throw new Error(result.error || 'Неизвестная ошибка');
        }
        
    } catch (error) {
        console.error('❌ ОШИБКА СБОРА РИЛСОВ:', error);
        
        let errorMessage = error.message;
        if (error.name === 'AbortError') {
            errorMessage = 'Превышено время ожидания (5 минут). Попробуйте уменьшить количество рилсов.';
        }
        
        statusDiv.innerHTML = `
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-triangle me-2"></i>
                Ошибка сбора рилсов: ${errorMessage}
                <br><small class="text-muted">Попробуйте уменьшить количество рилсов или проверить подключение</small>
            </div>`;
    } finally {
        // Разблокируем кнопку
        button.disabled = false;
        button.innerHTML = '<i class="fas fa-cloud-download-alt me-2"></i>Собрать рилсы конкурентов';
    }
}

// Функция обновления статистики рилсов
function updateReelsStats(result) {
    const totalReels = document.getElementById('totalReels');
    const viralReels = document.getElementById('viralReels');
    
    if (totalReels) {
        totalReels.textContent = result.total_count || result.total_reels || 0;
    }
    
    if (viralReels) {
        // Показываем общее количество вместо виральных
        viralReels.textContent = result.total_count || result.total_reels || 0;
    }
}

// Функция активации второго шага с отображением рилсов
function activateStep2() {
    const step2 = document.getElementById('step2');
    if (step2) {
        step2.classList.remove('step-disabled');
        step2.classList.add('step-active');
        console.log('✅ Шаг 2 активирован');
        
        // Загружаем и отображаем собранные рилсы
        loadCollectedReels();
    }
}

// Функция загрузки и отображения собранных рилсов
function loadCollectedReels() {
    console.log('🎬 Загружаем собранные рилсы...');
    
    // Получаем данные из глобальной переменной или делаем запрос
    if (window.collectedReelsData) {
        displayReels(window.collectedReelsData);
    } else {
        // Если данных нет, показываем сообщение
        const reelsList = document.getElementById('reelsList');
        if (reelsList) {
            reelsList.innerHTML = `
                <div class="col-12 text-center text-muted p-4">
                    <i class="fas fa-video fa-2x mb-2"></i>
                    <div>Рилсы загружаются...</div>
                    </div>
            `;
        }
    }
}

// Функция отображения рилсов
function displayReels(reelsData) {
    console.log('📺 Отображаем рилсы:', reelsData);
    
    const reelsList = document.getElementById('reelsList');
    if (!reelsList) return;
    
    if (!reelsData || !reelsData.reels || reelsData.reels.length === 0) {
        reelsList.innerHTML = `
            <div class="col-12 text-center text-muted p-4">
                <i class="fas fa-video fa-2x mb-2"></i>
                <div>Рилсы не найдены</div>
                </div>
        `;
            return;
        }

    // Отображаем рилсы в виде карточек
    reelsList.innerHTML = reelsData.reels.map((reel, index) => `
        <div class="col-md-6 col-lg-4">
            <div class="card h-100 border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start mb-2">
                        <h6 class="card-title mb-0">Рилс ${index + 1}</h6>
                        <div class="btn-group" role="group">
                            <button class="btn btn-sm btn-outline-primary" onclick="showReelPreview(${index})">
                                <i class="fas fa-play me-1"></i>Предпросмотр
                            </button>
                            <button class="btn btn-sm btn-success" onclick="confirmReelSelection(${index})">
                                <i class="fas fa-check me-1"></i>Выбрать
                </button>
            </div>
        </div>
                    
                    <div class="mb-2">
                        <small class="text-muted">${reel.caption ? reel.caption.substring(0, 100) + '...' : 'Без описания'}</small>
                        ${reel.url ? `
                            <div class="mt-1">
                                <a href="${reel.url}" target="_blank" class="btn btn-sm btn-outline-secondary">
                                    <i class="fab fa-instagram me-1"></i>Открыть в Instagram
                                </a>
    </div>
                        ` : ''}
</div>

                    <div class="row g-2 text-center">
                        <div class="col-4">
                            <div class="text-primary fw-bold">${reel.views_count || 0}</div>
                            <small class="text-muted">Просмотры</small>
                    </div>
                        <div class="col-4">
                            <div class="text-danger fw-bold">${reel.likes_count || 0}</div>
                            <small class="text-muted">Лайки</small>
                </div>
                        <div class="col-4">
                            <div class="text-info fw-bold">${reel.comments_count || 0}</div>
                            <small class="text-muted">Комменты</small>
                </div>
            </div>

                    ${reel.hashtags && reel.hashtags.length > 0 ? `
                        <div class="mt-2">
                            ${reel.hashtags.slice(0, 3).map(tag => `<span class="badge bg-light text-dark me-1">#${tag}</span>`).join('')}
                </div>
                    ` : ''}
                </div>
            </div>
            </div>
    `).join('');
}

// Функция выбора рилса
function selectReel(reelIndex) {
    console.log('✅ Выбран рилс:', reelIndex);
    
    // Убираем выделение с других рилсов
    document.querySelectorAll('#reelsList .btn-primary').forEach(btn => {
        btn.classList.remove('btn-primary');
        btn.classList.add('btn-outline-primary');
    });
    
    // Выделяем выбранный рилс (исправлено - используем правильный селектор)
    const selectedBtn = document.querySelectorAll('#reelsList .btn')[reelIndex];
    if (selectedBtn) {
        selectedBtn.classList.remove('btn-outline-primary');
        selectedBtn.classList.add('btn-primary');
    }
    
    // Показываем модальное окно с предпросмотром
    showReelPreview(reelIndex);
}

// Функция показа модального окна с предпросмотром рилса
function showReelPreview(reelIndex) {
    console.log('🎬 Показываем предпросмотр рилса:', reelIndex);
    
    if (!window.collectedReelsData || !window.collectedReelsData.reels) {
        console.error('❌ Данные рилсов не найдены');
            return;
        }

    const reel = window.collectedReelsData.reels[reelIndex];
    if (!reel) {
        console.error('❌ Рилс не найден:', reelIndex);
            return;
        }

    // Создаем модальное окно
    const modalHtml = `
        <div class="modal fade" id="reelPreviewModal" tabindex="-1" aria-labelledby="reelPreviewModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="reelPreviewModalLabel">
                            <i class="fas fa-video me-2"></i>Предпросмотр рилса ${reelIndex + 1}
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="ratio ratio-16x9 mb-3">
                                    ${reel.video_url ? `
                                        <video controls class="w-100 h-100" preload="metadata">
                                            <source src="${reel.video_url}" type="video/mp4">
                                            <source src="${reel.video_url}" type="video/webm">
                                            Ваш браузер не поддерживает видео элемент.
                                        </video>
                                    ` : `
                                        <div class="d-flex align-items-center justify-content-center bg-light border rounded">
                                            <div class="text-center text-muted">
                                                <i class="fas fa-video fa-3x mb-2"></i>
                                                <div>Видео недоступно</div>
                                                <small>URL: ${reel.url || 'Не указан'}</small>
            </div>
        </div>
                                    `}
    </div>
</div>
                <div class="col-md-4">
                                <h6 class="fw-bold">Статистика:</h6>
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between">
                                        <span>Просмотры:</span>
                                        <span class="fw-bold text-primary">${reel.views_count || 0}</span>
                </div>
                                    <div class="d-flex justify-content-between">
                                        <span>Лайки:</span>
                                        <span class="fw-bold text-danger">${reel.likes_count || 0}</span>
                </div>
                                    <div class="d-flex justify-content-between">
                                        <span>Комментарии:</span>
                                        <span class="fw-bold text-info">${reel.comments_count || 0}</span>
                </div>
            </div>
            
                                <h6 class="fw-bold">Описание:</h6>
                                <p class="text-muted small">${reel.caption || 'Без описания'}</p>
                                
                                ${reel.url ? `
                                    <h6 class="fw-bold">Ссылка:</h6>
                                    <div class="mb-2">
                                        <a href="${reel.url}" target="_blank" class="btn btn-sm btn-outline-primary">
                                            <i class="fab fa-instagram me-1"></i>Открыть в Instagram
                                        </a>
        </div>
                                ` : ''}
                                
                                ${reel.hashtags && reel.hashtags.length > 0 ? `
                                    <h6 class="fw-bold">Хештеги:</h6>
                                    <div class="mb-2">
                                        ${reel.hashtags.slice(0, 5).map(tag => `<span class="badge bg-light text-dark me-1 mb-1">#${tag}</span>`).join('')}
                </div>
                                ` : ''}
            </div>
                </div>
                </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                            <i class="fas fa-times me-2"></i>Закрыть
            </button>
                        <button type="button" class="btn btn-gsr-accent" onclick="confirmReelSelection(${reelIndex})" data-bs-dismiss="modal">
                            <i class="fas fa-check me-2"></i>Выбрать этот рилс
                        </button>
        </div>
    </div>
</div>
        </div>
    `;
    
    // Удаляем старое модальное окно если есть
    const existingModal = document.getElementById('reelPreviewModal');
    if (existingModal) {
        existingModal.remove();
    }
    
    // Добавляем новое модальное окно
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    
    // Показываем модальное окно
    const modal = new bootstrap.Modal(document.getElementById('reelPreviewModal'));
    
    // Добавляем обработчик закрытия модального окна для остановки видео
    modal._element.addEventListener('hidden.bs.modal', function() {
        console.log('🔇 Останавливаем видео при закрытии модального окна');
        const video = document.querySelector('#reelPreviewModal video');
        if (video) {
            video.pause();
            video.currentTime = 0;
        }
    });
    
    modal.show();
}

// Функция подтверждения выбора рилса
function confirmReelSelection(reelIndex) {
    console.log('✅ Подтвержден выбор рилса:', reelIndex);
    
    // Проверяем что данные существуют
    if (!window.collectedReelsData || !window.collectedReelsData.reels || !window.collectedReelsData.reels[reelIndex]) {
        console.error('❌ Данные рилсов не найдены');
        alert('Ошибка: данные рилсов не найдены. Попробуйте собрать рилсы заново.');
            return;
        }

    // Сохраняем выбранный рилс
    window.selectedReelIndex = reelIndex;
    window.selectedReel = window.collectedReelsData.reels[reelIndex];
    
    console.log('📝 Выбранный рилс:', window.selectedReel);
    
    // Обновляем UI - показываем выбранный рилс
    updateSelectedReelUI(reelIndex);
    
    // Активируем следующий шаг
    activateStep3();
    
    // Плавный скролл к шагу 3
    setTimeout(() => {
        const step3 = document.getElementById('step3');
        if (step3) {
            step3.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
    }, 100);
}

// Функция обновления UI выбранного рилса
function updateSelectedReelUI(reelIndex) {
    // Убираем выделение с всех рилсов
    document.querySelectorAll('#reelsList .btn-primary').forEach(btn => {
        btn.classList.remove('btn-primary');
        btn.classList.add('btn-outline-primary');
    });
    
    // Выделяем выбранный рилс
    const selectedBtn = document.querySelectorAll('#reelsList .btn')[reelIndex];
    if (selectedBtn) {
        selectedBtn.classList.remove('btn-outline-primary');
        selectedBtn.classList.add('btn-primary');
    }
    
    // Показываем уведомление
    const statusDiv = document.getElementById('collectStatus');
    if (statusDiv) {
        statusDiv.innerHTML = `
            <div class="alert alert-success">
                <i class="fas fa-check-circle me-2"></i>
                Выбран рилс ${reelIndex + 1} для транскрибации
            </div>`;
    }
}

// Функция активации третьего шага
function activateStep3() {
    console.log('➡️ Активация Шага 3: Транскрибация');
    const step3 = document.getElementById('step3');
    if (step3) {
        step3.classList.remove('step-disabled');
        step3.classList.add('step-active');
        
        // Отображаем информацию о выбранном рилсе
        displaySelectedReelInfo();
    }
}

// Функция отображения информации о выбранном рилсе
function displaySelectedReelInfo() {
    if (!window.selectedReel) {
        console.error('❌ Выбранный рилс не найден');
            return;
        }

    const reel = window.selectedReel;
    const selectedReelInfo = document.getElementById('selectedReelInfo');
    
    if (selectedReelInfo) {
        selectedReelInfo.innerHTML = `
            <div class="alert alert-success d-flex align-items-start">
                <div class="me-3">
                    <i class="fas fa-check-circle fa-2x text-success"></i>
                    </div>
                <div class="flex-grow-1">
                    <h6 class="alert-heading mb-2">Выбран рилс ${window.selectedReelIndex + 1}</h6>
                    <div class="small">
                        <div class="mb-1">
                            <strong>Просмотры:</strong> ${reel.views_count || 0} | 
                            <strong>Лайки:</strong> ${reel.likes_count || 0} | 
                            <strong>Комментарии:</strong> ${reel.comments_count || 0}
                    </div>
                        ${reel.caption ? `
                            <div class="text-muted">
                                <strong>Описание:</strong> ${reel.caption.substring(0, 100)}${reel.caption.length > 100 ? '...' : ''}
                </div>
                        ` : ''}
                        ${reel.url ? `
                            <div class="mt-2">
                                <a href="${reel.url}" target="_blank" class="btn btn-sm btn-outline-primary">
                                    <i class="fab fa-instagram me-1"></i>Открыть в Instagram
                                </a>
                    </div>
                        ` : ''}
                </div>
            </div>
            </div>
        `;
        selectedReelInfo.style.display = 'block';
    }
}

// Функции для остальных шагов
async function transcribeSelectedReel() {
    console.log('🎤 Транскрибация выбранного рилса с AssemblyAI...');
    const statusDiv = document.getElementById('transcribeStatus');
    
    // Проверяем что рилс выбран
    if (!window.selectedReel) {
        statusDiv.innerHTML = `
            <div class="alert alert-warning">
                <i class="fas fa-exclamation-triangle me-2"></i>
                Сначала выберите рилс на шаге 2
            </div>`;
        return;
    }
    
    statusDiv.innerHTML = `
        <div class="alert alert-info">
            <i class="fas fa-spinner fa-spin me-2"></i>
            Транскрибируем рилс с помощью AssemblyAI... Это может занять несколько минут.
        </div>`;
    
    try {
        console.log('📡 Отправляем запрос на транскрибацию...');
        
        const response = await fetch('/api/trends/transcribe', {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                video_url: window.selectedReel.video_url || window.selectedReel.url,
                assemblyai_key: 'e4b374b6b23642cdafecfa3e92da87a5'
            })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.json();
        console.log('📊 Результат транскрибации:', result);
        
        if (result.success) {
            statusDiv.innerHTML = `
                <div class="alert alert-success">
                    <i class="fas fa-check-circle me-2"></i>
                    Транскрибация завершена! Текст извлечен из ${result.duration || 'неизвестной'} секунд аудио.
                </div>`;
            
            // Показываем результат
            document.getElementById('transcriptResult').style.display = 'block';
            document.getElementById('transcriptText').value = result.transcript || 'Транскрипция не найдена';
            
            // Сохраняем транскрипт
            window.transcriptText = result.transcript;
            
            // Активируем следующий шаг
            activateStep4();
            
        } else {
            throw new Error(result.error || 'Неизвестная ошибка транскрибации');
        }
        
    } catch (error) {
        console.error('❌ ОШИБКА ТРАНСКРИБАЦИИ:', error);
        
        statusDiv.innerHTML = `
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-triangle me-2"></i>
                Ошибка транскрибации: ${error.message}
                <br><small class="text-muted">Попробуйте еще раз или проверьте URL видео</small>
            </div>`;
    }
}

function activateStep4() {
    console.log('➡️ Активация Шага 4: Переписывание');
    const step4 = document.getElementById('step4');
    if (step4) {
        step4.classList.remove('step-disabled');
        step4.classList.add('step-active');
    }
}

async function rewriteTranscript() {
    console.log('✏️ Переписывание транскрипта...');
    const statusDiv = document.getElementById('rewriteStatus');
    const transcriptText = document.getElementById('transcriptText').value;
    
    if (!transcriptText || transcriptText.trim() === '') {
        statusDiv.innerHTML = `
            <div class="alert alert-warning">
                <i class="fas fa-exclamation-triangle me-2"></i>
                Сначала выполните транскрибацию на шаге 3
            </div>`;
        return;
    }
    
    statusDiv.innerHTML = `
        <div class="alert alert-info">
            <i class="fas fa-spinner fa-spin me-2"></i>
            Переписываем текст с помощью ИИ...
        </div>`;
    
    try {
        const response = await fetch('/api/trends/rewrite', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                transcript: transcriptText
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            statusDiv.innerHTML = `
                <div class="alert alert-success">
                    <i class="fas fa-check-circle me-2"></i>
                    Текст переписан!
                </div>`;
            
            // Показываем результат
            document.getElementById('rewrittenResult').style.display = 'block';
            document.getElementById('rewrittenText').textContent = result.rewritten_text;
            
            // Активируем следующий шаг
            activateStep5();
        } else {
            statusDiv.innerHTML = `
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-circle me-2"></i>
                    Ошибка переписывания: ${result.message || 'Неизвестная ошибка'}
                </div>`;
        }
    } catch (error) {
        console.error('Ошибка переписывания:', error);
        statusDiv.innerHTML = `
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-circle me-2"></i>
                Ошибка переписывания: ${error.message}
            </div>`;
    }
}

function activateStep5() {
    console.log('➡️ Активация Шага 5: Генерация аудио');
    const step5 = document.getElementById('step5');
    if (step5) {
        step5.classList.remove('step-disabled');
        step5.classList.add('step-active');
    }
}

function generateAudio() {
    console.log('🔊 Генерация аудио...');
    const statusDiv = document.getElementById('audioStatus');
    statusDiv.innerHTML = `
        <div class="alert alert-info">
            <i class="fas fa-spinner fa-spin me-2"></i>
            Создаем аудио с помощью ИИ...
        </div>`;
    
    // Здесь будет логика генерации аудио
    setTimeout(() => {
        statusDiv.innerHTML = `
            <div class="alert alert-success">
                <i class="fas fa-check-circle me-2"></i>
                Аудио создано!
            </div>`;
        
        // Показываем результат
        document.getElementById('audioResult').style.display = 'block';
        document.getElementById('audioSource').src = '#'; // Здесь будет URL аудио
        
        // Активируем следующий шаг
        activateStep6();
    }, 3000);
}

function activateStep6() {
    console.log('➡️ Активация Шага 6: Генерация видео');
    const step6 = document.getElementById('step6');
    if (step6) {
        step6.classList.remove('step-disabled');
        step6.classList.add('step-active');
    }
}

function generateVideo() {
    console.log('🎬 Генерация видео...');
    const statusDiv = document.getElementById('videoStatus');
    statusDiv.innerHTML = `
        <div class="alert alert-info">
            <i class="fas fa-spinner fa-spin me-2"></i>
            Создаем финальное видео...
        </div>`;
    
    // Здесь будет логика генерации видео
    setTimeout(() => {
        statusDiv.innerHTML = `
            <div class="alert alert-success">
                <i class="fas fa-check-circle me-2"></i>
                Видео готово!
            </div>`;
        
        // Показываем результат
        document.getElementById('videoResult').style.display = 'block';
        document.getElementById('videoSource').src = '#'; // Здесь будет URL видео
    }, 5000);
}

// Функции для сортировки (заглушки)
function sortByViews() {
    console.log('📊 Сортировка по просмотрам');
    // TODO: Реализовать сортировку
}

function sortByLikes() {
    console.log('📊 Сортировка по лайкам');
    // TODO: Реализовать сортировку
}

// Автозагрузка при загрузке страницы
document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 DOM загружен, запускаем загрузку конкурентов');
    loadCompetitors();
});
// Функции для работы с транскриптом
function copyTranscript() {
    const textarea = document.getElementById('transcriptText');
    textarea.select();
    document.execCommand('copy');
    
    // Показываем уведомление
    const button = event.target.closest('button');
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-check me-1"></i>Скопировано!';
    button.classList.remove('btn-outline-primary');
    button.classList.add('btn-success');
    
    setTimeout(() => {
        button.innerHTML = originalText;
        button.classList.remove('btn-success');
        button.classList.add('btn-outline-primary');
    }, 2000);
}

function clearTranscript() {
    if (confirm('Вы уверены, что хотите очистить транскрипт?')) {
        document.getElementById('transcriptText').value = '';
    }
}

function saveTranscript() {
    const transcript = document.getElementById('transcriptText').value;
    window.transcriptText = transcript;
    
    // Показываем уведомление
    const button = event.target.closest('button');
    const originalText = button.innerHTML;
    button.innerHTML = '<i class="fas fa-check me-1"></i>Сохранено!';
    button.classList.remove('btn-outline-success');
    button.classList.add('btn-success');
    
    setTimeout(() => {
        button.innerHTML = originalText;
        button.classList.remove('btn-success');
        button.classList.add('btn-outline-success');
    }, 2000);
}

// Автоматически сохраняем изменения при редактировании
document.addEventListener('DOMContentLoaded', function() {
    const transcriptTextarea = document.getElementById('transcriptText');
    if (transcriptTextarea) {
        transcriptTextarea.addEventListener('input', function() {
            window.transcriptText = this.value;
        });
    }
});

</script>

<style>
    /* Улучшенные стили для блоков-шагов */
    .progress-step {
        margin-bottom: 30px !important;
        box-shadow: 0 8px 32px rgba(0, 64, 39, 0.12) !important;
        border-radius: 16px !important;
        border: 1px solid rgba(0, 64, 39, 0.08) !important;
        transition: all 0.3s ease !important;
    }
    
    .progress-step:hover {
        box-shadow: 0 12px 40px rgba(0, 64, 39, 0.18) !important;
        transform: translateY(-2px) !important;
    }
    
    .progress-step.step-active {
        border-color: var(--gsr-accent) !important;
        box-shadow: 0 8px 32px rgba(39, 145, 52, 0.15) !important;
    }
    
    /* Отступы для контейнера */
    .step-container {
        padding: 0 15px;
        margin-top: 40px; /* Отступ между зеленой плашкой и блоками */
    }
    
    /* Улучшенные отступы внутри блоков */
    .progress-step .card-body,
    .progress-step {
        padding: 30px !important;
    }
    
    /* Красивые тени для кнопок */
    .btn-gsr-accent {
        box-shadow: 0 4px 16px rgba(39, 145, 52, 0.3) !important;
        transition: all 0.3s ease !important;
    }
    
    .btn-gsr-accent:hover {
        box-shadow: 0 6px 20px rgba(39, 145, 52, 0.4) !important;
        transform: translateY(-1px) !important;
    }
    
    /* Улучшенный логотип GSR */
    .gsr-logo {
        height: 90px !important;
        width: 90px !important;
        border-radius: 50% !important;
        background: rgba(255, 255, 255, 0.15) !important;
        padding: 18px !important;
        box-shadow: 0 6px 20px rgba(255, 255, 255, 0.25) !important;
        transition: all 0.3s ease !important;
        border: 2px solid rgba(255, 255, 255, 0.3) !important;
        object-fit: contain !important;
    }
    
    .gsr-logo:hover {
        transform: scale(1.08) !important;
        box-shadow: 0 8px 25px rgba(255, 255, 255, 0.4) !important;
        border-color: rgba(255, 255, 255, 0.5) !important;
    }
    
    /* Анимация появления логотипа */
    .gsr-logo {
        animation: logoGlow 2s ease-in-out infinite alternate !important;
    }
    
    @keyframes logoGlow {
        0% { box-shadow: 0 6px 20px rgba(255, 255, 255, 0.25); }
        100% { box-shadow: 0 8px 25px rgba(255, 255, 255, 0.35); }
    }
    
    /* Стили для Excel-таблицы */
    .table-responsive {
        border: 1px solid #dee2e6;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    .table thead th {
        background-color: #343a40 !important;
        color: white !important;
        border-color: #495057 !important;
        font-weight: 600;
        font-size: 13px;
        padding: 8px 12px;
    }
    
    .table tbody tr {
        transition: background-color 0.2s ease;
    }
    
    .table tbody tr:hover {
        background-color: #f8f9fa !important;
    }
    
    .table tbody td {
        padding: 8px 12px;
        vertical-align: middle;
        border-color: #dee2e6;
    }
    
    .form-check-input {
        margin: 0;
    }
    
    /* Скрытие неактивных шагов */
    .progress-step.step-disabled {
        display: none !important;
    }
    
    .progress-step.step-active {
        display: block !important;
    }
</style>
{% endblock %}

{% block content %}
<div class="row">
    <div class="col-12">
        <div class="card-gsr">
            <div class="card-body text-center gsr-bg-gradient text-white" style="border-radius: 16px 16px 0 0;">
                <img src="/static/7411193.png" alt="GSR" class="gsr-logo mb-3">
                <h1 class="gsr-heading mb-2">
                    <i class="fas fa-chart-line me-2"></i>Модуль Трендвотчинга
                </h1>
                <p class="mb-0 fs-5">Анализ трендов и создание вирусного контента на основе данных конкурентов</p>
                <a href="{{ url_for('settings_page', module_name='trends') }}" class="btn btn-outline-light btn-lg mt-3">
                    <i class="fas fa-cog me-2"></i>Настройки API
                </a>
            </div>
                </div>
                </div>
            </div>

<div class="row step-container">
    <div class="col-12">
        <div class="card-gsr progress-step step-active" id="step1">
            <div class="d-flex align-items-center mb-4">
                    <div class="step-number-gsr">1</div>
                <div class="flex-grow-1">
                    <div class="d-flex align-items-center mb-2">
                        <img src="/static/7411193.png" alt="GSR" class="gsr-logo me-3" style="height: 40px; width: 40px; border-radius: 50%; background: rgba(0, 64, 39, 0.1); padding: 8px;">
                        <h4 class="gsr-heading mb-0 gsr-text-primary">Сбор рилсов</h4>
            </div>
                    <p class="text-muted mb-0">Укажите конкурентов и лимит, чтобы собрать свежие рилсы</p>
                </div>
                </div>
                
            <div class="mb-4">
                <label for="reelsCount" class="form-label fw-bold gsr-text-secondary">
                        <i class="fas fa-hashtag me-2"></i>Количество рилсов на конкурента
                    </label>
                <select class="form-select form-select-lg" id="reelsCount" 
                        style="border: 2px solid rgba(0, 64, 39, 0.2); border-radius: 12px;">
                        <option value="1">1 рилс (быстро)</option>
                        <option value="3" selected>3 рилса (рекомендуется)</option>
                        <option value="5">5 рилсов (медленно)</option>
                        <option value="10">10 рилсов (риск таймаута)</option>
                    </select>
                </div>
            
            <div class="mb-4">
                <label class="form-label fw-bold gsr-text-secondary">
                        <i class="fas fa-users me-2"></i>Конкуренты для анализа
                    </label>
                <div id="competitorsList" class="p-3 border rounded bg-light" style="max-height: 200px; overflow-y: auto;">
                        <div class="text-center text-muted">
                            <div class="spinner-border spinner-border-sm" role="status"></div>
                            <div class="mt-2">Загружаем конкурентов…</div>
                        </div>
                    </div>
                    <div class="mt-2">
                    <button class="btn btn-sm btn-outline-primary" onclick="loadCompetitors()">
                        <i class="fas fa-refresh me-1"></i>Обновить список
                    </button>
                </div>
                <div class="mt-2">
                    <small class="text-muted">
                        <span id="competitorsCount">0</span> конкурентов загружено
                    </small>
                </div>
                <div class="form-text mt-2">
                    <a href="{{ url_for('settings_page', module_name='trends') }}" class="link-success">
                        <i class="fas fa-cog me-1"></i>Добавить конкурентов
                        </a>
                    </div>
                </div>
                
            <button class="btn btn-gsr-accent btn-lg" id="collectButton" onclick="collectReels(event)">
                <i class="fas fa-cloud-download-alt me-2"></i>Собрать рилсы конкурентов
            </button>
            
            <div id="collectStatus" class="mt-3"></div>
                        </div>
                    </div>
                        </div>

<!-- Остальные шаги остаются без изменений -->
<div class="row step-container">
    <div class="col-12">
        <div class="card-gsr progress-step step-active" id="step2">
            <div class="d-flex align-items-center mb-4">
                <div class="step-number-gsr">2</div>
                <div>
                    <h4 class="gsr-heading mb-1 gsr-text-primary">Отбор рилсов</h4>
                    <p class="text-muted mb-0">Выберите лучший рилс для транскрибации</p>
                    </div>
                        </div>
            
            <div class="row g-3 mb-4">
                <div class="col-md-6">
                    <div class="d-flex align-items-center justify-content-between p-3 bg-light border rounded">
                        <span class="fw-bold">Всего:</span>
                        <span class="badge bg-primary fs-6" id="totalReels">0</span>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="d-flex align-items-center justify-content-between p-3 bg-light border rounded">
                        <span class="fw-bold">Всего собрано:</span>
                        <span class="badge bg-primary fs-6" id="viralReels">0</span>
            </div>
                </div>
            </div>
            
            <div class="d-flex gap-2 mb-3">
                <button class="btn btn-outline-primary" onclick="sortByViews()">
                    <i class="fas fa-eye me-1"></i>Просмотры
                </button>
                <button class="btn btn-outline-danger" onclick="sortByLikes()">
                    <i class="fas fa-heart me-1"></i>Лайки
                </button>
            </div>
            
            <div id="reelsList" class="row g-3">
                <div class="col-12 text-center text-muted p-4">
                    <i class="fas fa-video fa-2x mb-2"></i>
                    <div>Сначала соберите рилсы конкурентов</div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Шаг 3: Транскрибация -->
<div class="row step-container">
    <div class="col-12">
        <div class="card-gsr progress-step step-disabled" id="step3">
            <div class="d-flex align-items-center mb-4">
                <div class="step-number-gsr">3</div>
                <div>
                    <h4 class="gsr-heading mb-1 gsr-text-primary">Транскрибация</h4>
                    <p class="text-muted mb-0">Извлеките текст из выбранного рилса</p>
                </div>
            </div>
            
            <!-- Информация о выбранном рилсе -->
            <div id="selectedReelInfo" class="mb-4" style="display: none;">
                <!-- Здесь будет отображаться информация о выбранном рилсе -->
            </div>
            
            <div class="mb-4">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    Выберите рилс на шаге 2, затем нажмите кнопку транскрибации
                </div>
            </div>
            
            <button class="btn btn-gsr-accent btn-lg" onclick="transcribeSelectedReel()">
                <i class="fas fa-microphone me-2"></i>Транскрибировать рилс
            </button>
            
            <div id="transcribeStatus" class="mt-3"></div>
            
            <div id="transcriptResult" class="mt-4" style="display: none;">
                <h5 class="gsr-text-primary">Результат транскрибации:</h5>
                <div class="p-3 bg-light border rounded">
                    <div class="mb-3">
                        <label class="form-label fw-bold">
                            <i class="fas fa-edit me-2"></i>Отредактируйте текст перед отправкой в ИИ:
                        </label>
                        <textarea id="transcriptText" class="form-control" rows="6" 
                                  placeholder="Здесь будет отображаться транскрипт..."></textarea>
                        <div class="form-text">
                            <i class="fas fa-info-circle me-1"></i>
                            Вы можете отредактировать текст перед переписыванием
                        </div>
                    </div>
                    <div class="d-flex gap-2">
                        <button class="btn btn-outline-primary btn-sm" onclick="copyTranscript()">
                            <i class="fas fa-copy me-1"></i>Копировать
                        </button>
                        <button class="btn btn-outline-secondary btn-sm" onclick="clearTranscript()">
                            <i class="fas fa-eraser me-1"></i>Очистить
                        </button>
                        <button class="btn btn-outline-success btn-sm" onclick="saveTranscript()">
                            <i class="fas fa-save me-1"></i>Сохранить
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Шаг 4: Переписывание текста -->
<div class="row step-container">
    <div class="col-12">
        <div class="card-gsr progress-step step-disabled" id="step4">
            <div class="d-flex align-items-center mb-4">
                <div class="step-number-gsr">4</div>
                <div>
                    <h4 class="gsr-heading mb-1 gsr-text-primary">Переписывание</h4>
                    <p class="text-muted mb-0">Улучшите текст с помощью ИИ</p>
                </div>
            </div>
            
            <div class="mb-4">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    Сначала выполните транскрибацию на шаге 3
                </div>
            </div>
            
            <button class="btn btn-gsr-accent btn-lg" onclick="rewriteTranscript()">
                <i class="fas fa-edit me-2"></i>Переписать текст
            </button>
            
            <div id="rewriteStatus" class="mt-3"></div>
            
            <div id="rewrittenResult" class="mt-4" style="display: none;">
                <h5 class="gsr-text-primary">Улучшенный текст:</h5>
                <div class="p-3 bg-light border rounded">
                    <p id="rewrittenText" class="mb-0"></p>
            </div>
            </div>
        </div>
    </div>
                </div>
                
<!-- Шаг 5: Генерация аудио -->
<div class="row step-container">
    <div class="col-12">
        <div class="card-gsr progress-step step-disabled" id="step5">
            <div class="d-flex align-items-center mb-4">
                <div class="step-number-gsr">5</div>
                <div>
                    <h4 class="gsr-heading mb-1 gsr-text-primary">Генерация аудио</h4>
                    <p class="text-muted mb-0">Создайте голосовое сопровождение</p>
                        </div>
            </div>
            
            <div class="mb-4">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    Сначала перепишите текст на шаге 4
                    </div>
                </div>
                
            <button class="btn btn-gsr-accent btn-lg" onclick="generateAudio()">
                <i class="fas fa-volume-up me-2"></i>Создать аудио
            </button>
            
            <div id="audioStatus" class="mt-3"></div>
            
            <div id="audioResult" class="mt-4" style="display: none;">
                <h5 class="gsr-text-primary">Сгенерированное аудио:</h5>
                <audio controls class="w-100">
                    <source id="audioSource" src="" type="audio/mpeg">
                    Ваш браузер не поддерживает аудио элемент.
                </audio>
                        </div>
                    </div>
                        </div>
                    </div>

<!-- Шаг 6: Генерация видео -->
<div class="row step-container">
    <div class="col-12">
        <div class="card-gsr progress-step step-disabled" id="step6">
            <div class="d-flex align-items-center mb-4">
                <div class="step-number-gsr">6</div>
                <div>
                    <h4 class="gsr-heading mb-1 gsr-text-primary">Генерация видео</h4>
                    <p class="text-muted mb-0">Создайте финальное видео</p>
                        </div>
                    </div>
            
            <div class="mb-4">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    Сначала создайте аудио на шаге 5
                </div>
            </div>
            
            <button class="btn btn-gsr-accent btn-lg" onclick="generateVideo()">
                <i class="fas fa-video me-2"></i>Создать видео
                </button>
            
            <div id="videoStatus" class="mt-3"></div>
            
            <div id="videoResult" class="mt-4" style="display: none;">
                <h5 class="gsr-text-primary">Готовое видео:</h5>
                <video controls class="w-100">
                    <source id="videoSource" src="" type="video/mp4">
                    Ваш браузер не поддерживает видео элемент.
                </video>
            </div>
        </div>
    </div>
</div>

{% endblock %}
