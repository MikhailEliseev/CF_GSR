#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å ElevenLabs
"""

import paramiko
import time

SERVER_HOST = "72.56.66.228"
SERVER_USER = "root"
SERVER_PASSWORD = "g2D,RytdQoSAYv"

def diagnose_elevenlabs():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å ElevenLabs"""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ElevenLabs...")
    
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(SERVER_HOST, username=SERVER_USER, password=SERVER_PASSWORD)
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ElevenLabs API
        print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ElevenLabs API...")
        test_cmd = '''
import requests
import json

api_key = "sk_76ff61f01df7d9a12c594e8f45cfa349d1917402ba5ec828"

print("–¢–µ—Å—Ç–∏—Ä—É–µ–º ElevenLabs API...")

try:
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    print("–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    response = requests.get(
        "https://api.elevenlabs.io/v1/user",
        headers={"xi-api-key": api_key},
        timeout=15
    )
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    if response.status_code == 200:
        user_data = response.json()
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.get('first_name', 'N/A')}")
        print(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞: {user_data.get('subscription', {}).get('tier', 'N/A')}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text[:200]}")
        
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤
    print("\\n–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤...")
    response = requests.get(
        "https://api.elevenlabs.io/v1/voices",
        headers={"xi-api-key": api_key},
        timeout=15
    )
    print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
    if response.status_code == 200:
        voices = response.json()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤: {len(voices.get('voices', []))}")
        if voices.get('voices'):
            first_voice = voices['voices'][0]
            print(f"‚úÖ –ü–µ—Ä–≤—ã–π –≥–æ–ª–æ—Å: {first_voice.get('name', 'N/A')}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.text[:200]}")
        
    # –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ
    print("\\n–¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ...")
    if voices.get('voices'):
        voice_id = voices['voices'][0]['voice_id']
        payload = {
            "text": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç.",
            "model_id": "eleven_multilingual_v2",
            "voice_settings": {
                "stability": 0.5,
                "similarity_boost": 0.5
            }
        }
        
        response = requests.post(
            f"https://api.elevenlabs.io/v1/text-to-speech/{voice_id}",
            headers={
                "xi-api-key": api_key,
                "Content-Type": "application/json"
            },
            json=payload,
            timeout=30
        )
        
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            print(f"‚úÖ –ê—É–¥–∏–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ! –†–∞–∑–º–µ—Ä: {len(response.content)} –±–∞–π—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.text[:200]}")
    
except requests.exceptions.Timeout:
    print("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ElevenLabs")
except requests.exceptions.ConnectionError:
    print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ElevenLabs")
except Exception as e:
    print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
'''
        
        stdin, stdout, stderr = ssh.exec_command(f"python3 -c \"{test_cmd}\"")
        result = stdout.read().decode()
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:")
        print(result)
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        stdin, stdout, stderr = ssh.exec_command("tail -50 /root/server.log | grep -i elevenlabs")
        logs = stdout.read().decode()
        if logs.strip():
            print("–õ–æ–≥–∏ ElevenLabs:")
            print(logs)
        else:
            print("–ù–µ—Ç –ª–æ–≥–æ–≤ ElevenLabs –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 50 —Å—Ç—Ä–æ–∫–∞—Ö")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å...")
        stdin, stdout, stderr = ssh.exec_command("curl -I https://api.elevenlabs.io/v1/user")
        curl_result = stdout.read().decode()
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç curl:")
        print(curl_result)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
    finally:
        ssh.close()

if __name__ == "__main__":
    diagnose_elevenlabs()
